# SIKOKU Snapshot\n# Timestamp: 2025-09-20 11:34:07\n# Files: 160\n\n\n\n===== FILE 1/160: assets/data/stage1/level_1.json =====\n{
  "level": 1,
  "difficulty": "normal",
  "size": 6,
  "puzzle": [
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "blue_square",
        "locked": true
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ]
  ],
  "solution": [
    [
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "blue_square"
    ],
    [
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle"
    ],
    [
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "blue_square"
    ],
    [
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square"
    ],
    [
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle"
    ],
    [
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle"
    ]
  ],
  "hints": [
    {
      "type": "equal",
      "cell1": [
        3,
        4
      ],
      "cell2": [
        4,
        4
      ]
    },
    {
      "type": "equal",
      "cell1": [
        2,
        3
      ],
      "cell2": [
        3,
        3
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        0,
        3
      ],
      "cell2": [
        1,
        3
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        1,
        1
      ],
      "cell2": [
        2,
        1
      ]
    }
  ],
  "theme": "color",
  "metadata": {
    "attempt": 16,
    "total_locks": 8,
    "equal_hints": 2,
    "notequal_hints": 2,
    "unique_checked": false,
    "solutions": null,
    "logic_steps": 28,
    "trace_len": 28
  }
}\n\n===== FILE 2/160: assets/data/stage1/level_10.json =====\n{
  "level": 10,
  "difficulty": "normal",
  "size": 6,
  "puzzle": [
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      }
    ],
    [
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ]
  ],
  "solution": [
    [
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle"
    ],
    [
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle"
    ],
    [
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "blue_square"
    ],
    [
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square"
    ],
    [
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle"
    ],
    [
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square"
    ]
  ],
  "hints": [
    {
      "type": "equal",
      "cell1": [
        1,
        4
      ],
      "cell2": [
        2,
        4
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        5,
        4
      ],
      "cell2": [
        5,
        5
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        4,
        1
      ],
      "cell2": [
        4,
        2
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        3,
        3
      ],
      "cell2": [
        3,
        4
      ]
    }
  ],
  "theme": "color",
  "metadata": {
    "attempt": 428,
    "total_locks": 7,
    "equal_hints": 1,
    "notequal_hints": 3,
    "unique_checked": false,
    "solutions": null,
    "logic_steps": 29,
    "trace_len": 29
  }
}\n\n===== FILE 3/160: assets/data/stage1/level_11.json =====\n{
  "level": 11,
  "difficulty": "normal",
  "size": 6,
  "puzzle": [
    [
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "blue_square",
        "locked": true
      }
    ],
    [
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      }
    ]
  ],
  "solution": [
    [
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle"
    ],
    [
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "blue_square"
    ],
    [
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square"
    ],
    [
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle"
    ],
    [
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square"
    ],
    [
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle"
    ]
  ],
  "hints": [],
  "theme": "color",
  "metadata": {
    "attempt": 64,
    "total_locks": 10,
    "equal_hints": 0,
    "notequal_hints": 0,
    "unique_checked": false,
    "solutions": null,
    "logic_steps": 26,
    "trace_len": 26
  }
}\n\n===== FILE 4/160: assets/data/stage1/level_12.json =====\n{
  "level": 12,
  "difficulty": "normal",
  "size": 6,
  "puzzle": [
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ]
  ],
  "solution": [
    [
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "blue_square"
    ],
    [
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle"
    ],
    [
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "blue_square"
    ],
    [
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle"
    ],
    [
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle"
    ],
    [
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square"
    ]
  ],
  "hints": [
    {
      "type": "equal",
      "cell1": [
        4,
        1
      ],
      "cell2": [
        4,
        2
      ]
    },
    {
      "type": "equal",
      "cell1": [
        2,
        0
      ],
      "cell2": [
        3,
        0
      ]
    },
    {
      "type": "equal",
      "cell1": [
        0,
        4
      ],
      "cell2": [
        0,
        5
      ]
    },
    {
      "type": "equal",
      "cell1": [
        4,
        3
      ],
      "cell2": [
        4,
        4
      ]
    },
    {
      "type": "equal",
      "cell1": [
        3,
        1
      ],
      "cell2": [
        3,
        2
      ]
    },
    {
      "type": "equal",
      "cell1": [
        0,
        1
      ],
      "cell2": [
        1,
        1
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        2,
        3
      ],
      "cell2": [
        2,
        4
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        1,
        3
      ],
      "cell2": [
        1,
        4
      ]
    }
  ],
  "theme": "color",
  "metadata": {
    "attempt": 18,
    "total_locks": 5,
    "equal_hints": 6,
    "notequal_hints": 2,
    "unique_checked": false,
    "solutions": null,
    "logic_steps": 31,
    "trace_len": 31
  }
}\n\n===== FILE 5/160: assets/data/stage1/level_13.json =====\n{
  "level": 13,
  "difficulty": "normal",
  "size": 6,
  "puzzle": [
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "yellow_triangle",
        "locked": true
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ]
  ],
  "solution": [
    [
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "blue_square"
    ],
    [
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square"
    ],
    [
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle"
    ],
    [
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "blue_square"
    ],
    [
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle"
    ],
    [
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle"
    ]
  ],
  "hints": [
    {
      "type": "equal",
      "cell1": [
        1,
        1
      ],
      "cell2": [
        1,
        2
      ]
    },
    {
      "type": "equal",
      "cell1": [
        3,
        4
      ],
      "cell2": [
        3,
        5
      ]
    },
    {
      "type": "equal",
      "cell1": [
        4,
        4
      ],
      "cell2": [
        4,
        5
      ]
    },
    {
      "type": "equal",
      "cell1": [
        1,
        2
      ],
      "cell2": [
        2,
        2
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        3,
        1
      ],
      "cell2": [
        4,
        1
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        1,
        5
      ],
      "cell2": [
        2,
        5
      ]
    }
  ],
  "theme": "color",
  "metadata": {
    "attempt": 34,
    "total_locks": 8,
    "equal_hints": 4,
    "notequal_hints": 2,
    "unique_checked": false,
    "solutions": null,
    "logic_steps": 28,
    "trace_len": 28
  }
}\n\n===== FILE 6/160: assets/data/stage1/level_14.json =====\n{
  "level": 14,
  "difficulty": "normal",
  "size": 6,
  "puzzle": [
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      }
    ],
    [
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      }
    ]
  ],
  "solution": [
    [
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square"
    ],
    [
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle"
    ],
    [
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "blue_square"
    ],
    [
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle"
    ],
    [
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle"
    ],
    [
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square"
    ]
  ],
  "hints": [
    {
      "type": "equal",
      "cell1": [
        0,
        2
      ],
      "cell2": [
        1,
        2
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        3,
        1
      ],
      "cell2": [
        3,
        2
      ]
    }
  ],
  "theme": "color",
  "metadata": {
    "attempt": 51,
    "total_locks": 9,
    "equal_hints": 1,
    "notequal_hints": 1,
    "unique_checked": false,
    "solutions": null,
    "logic_steps": 27,
    "trace_len": 27
  }
}\n\n===== FILE 7/160: assets/data/stage1/level_15.json =====\n{
  "level": 15,
  "difficulty": "normal",
  "size": 6,
  "puzzle": [
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      }
    ],
    [
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ]
  ],
  "solution": [
    [
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle"
    ],
    [
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "blue_square"
    ],
    [
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square"
    ],
    [
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle"
    ],
    [
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle"
    ],
    [
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square"
    ]
  ],
  "hints": [
    {
      "type": "equal",
      "cell1": [
        2,
        2
      ],
      "cell2": [
        3,
        2
      ]
    },
    {
      "type": "equal",
      "cell1": [
        5,
        1
      ],
      "cell2": [
        5,
        2
      ]
    }
  ],
  "theme": "color",
  "metadata": {
    "attempt": 125,
    "total_locks": 8,
    "equal_hints": 2,
    "notequal_hints": 0,
    "unique_checked": false,
    "solutions": null,
    "logic_steps": 28,
    "trace_len": 28
  }
}\n\n===== FILE 8/160: assets/data/stage1/level_16.json =====\n{
  "level": 16,
  "difficulty": "normal",
  "size": 6,
  "puzzle": [
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      }
    ],
    [
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ]
  ],
  "solution": [
    [
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "blue_square"
    ],
    [
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square"
    ],
    [
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle"
    ],
    [
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square"
    ],
    [
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle"
    ],
    [
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle"
    ]
  ],
  "hints": [
    {
      "type": "not_equal",
      "cell1": [
        4,
        4
      ],
      "cell2": [
        4,
        5
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        1,
        2
      ],
      "cell2": [
        1,
        3
      ]
    }
  ],
  "theme": "color",
  "metadata": {
    "attempt": 163,
    "total_locks": 9,
    "equal_hints": 0,
    "notequal_hints": 2,
    "unique_checked": false,
    "solutions": null,
    "logic_steps": 27,
    "trace_len": 27
  }
}\n\n===== FILE 9/160: assets/data/stage1/level_17.json =====\n{
  "level": 17,
  "difficulty": "normal",
  "size": 6,
  "puzzle": [
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      }
    ]
  ],
  "solution": [
    [
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle"
    ],
    [
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle"
    ],
    [
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square"
    ],
    [
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square"
    ],
    [
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle"
    ],
    [
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "blue_square"
    ]
  ],
  "hints": [],
  "theme": "color",
  "metadata": {
    "attempt": 45,
    "total_locks": 12,
    "equal_hints": 0,
    "notequal_hints": 0,
    "unique_checked": false,
    "solutions": null,
    "logic_steps": 24,
    "trace_len": 24
  }
}\n\n===== FILE 10/160: assets/data/stage1/level_18.json =====\n{
  "level": 18,
  "difficulty": "normal",
  "size": 6,
  "puzzle": [
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ]
  ],
  "solution": [
    [
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square"
    ],
    [
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "blue_square"
    ],
    [
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle"
    ],
    [
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle"
    ],
    [
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square"
    ],
    [
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle"
    ]
  ],
  "hints": [
    {
      "type": "equal",
      "cell1": [
        2,
        5
      ],
      "cell2": [
        3,
        5
      ]
    },
    {
      "type": "equal",
      "cell1": [
        0,
        3
      ],
      "cell2": [
        0,
        4
      ]
    },
    {
      "type": "equal",
      "cell1": [
        5,
        1
      ],
      "cell2": [
        5,
        2
      ]
    },
    {
      "type": "equal",
      "cell1": [
        0,
        3
      ],
      "cell2": [
        1,
        3
      ]
    },
    {
      "type": "equal",
      "cell1": [
        1,
        4
      ],
      "cell2": [
        1,
        5
      ]
    },
    {
      "type": "equal",
      "cell1": [
        0,
        0
      ],
      "cell2": [
        1,
        0
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        4,
        4
      ],
      "cell2": [
        4,
        5
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        1,
        2
      ],
      "cell2": [
        1,
        3
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        2,
        1
      ],
      "cell2": [
        3,
        1
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        3,
        3
      ],
      "cell2": [
        4,
        3
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        4,
        5
      ],
      "cell2": [
        5,
        5
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        2,
        2
      ],
      "cell2": [
        3,
        2
      ]
    }
  ],
  "theme": "color",
  "metadata": {
    "attempt": 142,
    "total_locks": 1,
    "equal_hints": 6,
    "notequal_hints": 6,
    "unique_checked": false,
    "solutions": null,
    "logic_steps": 35,
    "trace_len": 35
  }
}\n\n===== FILE 11/160: assets/data/stage1/level_19.json =====\n{
  "level": 19,
  "difficulty": "normal",
  "size": 6,
  "puzzle": [
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      }
    ]
  ],
  "solution": [
    [
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "blue_square"
    ],
    [
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle"
    ],
    [
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle"
    ],
    [
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square"
    ],
    [
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square"
    ],
    [
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle"
    ]
  ],
  "hints": [
    {
      "type": "equal",
      "cell1": [
        3,
        1
      ],
      "cell2": [
        3,
        2
      ]
    },
    {
      "type": "equal",
      "cell1": [
        1,
        2
      ],
      "cell2": [
        2,
        2
      ]
    },
    {
      "type": "equal",
      "cell1": [
        1,
        1
      ],
      "cell2": [
        1,
        2
      ]
    },
    {
      "type": "equal",
      "cell1": [
        4,
        1
      ],
      "cell2": [
        4,
        2
      ]
    },
    {
      "type": "equal",
      "cell1": [
        0,
        2
      ],
      "cell2": [
        0,
        3
      ]
    },
    {
      "type": "equal",
      "cell1": [
        1,
        4
      ],
      "cell2": [
        2,
        4
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        0,
        4
      ],
      "cell2": [
        0,
        5
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        2,
        2
      ],
      "cell2": [
        3,
        2
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        4,
        4
      ],
      "cell2": [
        5,
        4
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        3,
        1
      ],
      "cell2": [
        4,
        1
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        2,
        0
      ],
      "cell2": [
        3,
        0
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        1,
        3
      ],
      "cell2": [
        2,
        3
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        3,
        0
      ],
      "cell2": [
        4,
        0
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        1,
        0
      ],
      "cell2": [
        1,
        1
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        4,
        3
      ],
      "cell2": [
        4,
        4
      ]
    }
  ],
  "theme": "color",
  "metadata": {
    "attempt": 9,
    "total_locks": 3,
    "equal_hints": 6,
    "notequal_hints": 9,
    "unique_checked": false,
    "solutions": null,
    "logic_steps": 33,
    "trace_len": 33
  }
}\n\n===== FILE 12/160: assets/data/stage1/level_2.json =====\n{
  "level": 2,
  "difficulty": "normal",
  "size": 6,
  "puzzle": [
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      }
    ]
  ],
  "solution": [
    [
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "blue_square"
    ],
    [
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle"
    ],
    [
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle"
    ],
    [
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square"
    ],
    [
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "blue_square"
    ],
    [
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle"
    ]
  ],
  "hints": [
    {
      "type": "equal",
      "cell1": [
        4,
        4
      ],
      "cell2": [
        4,
        5
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        2,
        3
      ],
      "cell2": [
        2,
        4
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        1,
        1
      ],
      "cell2": [
        1,
        2
      ]
    }
  ],
  "theme": "color",
  "metadata": {
    "attempt": 33,
    "total_locks": 8,
    "equal_hints": 1,
    "notequal_hints": 2,
    "unique_checked": false,
    "solutions": null,
    "logic_steps": 28,
    "trace_len": 28
  }
}\n\n===== FILE 13/160: assets/data/stage1/level_20.json =====\n{
  "level": 20,
  "difficulty": "normal",
  "size": 6,
  "puzzle": [
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ]
  ],
  "solution": [
    [
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle"
    ],
    [
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle"
    ],
    [
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "blue_square"
    ],
    [
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle"
    ],
    [
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "blue_square"
    ],
    [
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "blue_square"
    ]
  ],
  "hints": [
    {
      "type": "equal",
      "cell1": [
        4,
        0
      ],
      "cell2": [
        4,
        1
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        2,
        3
      ],
      "cell2": [
        2,
        4
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        3,
        4
      ],
      "cell2": [
        3,
        5
      ]
    }
  ],
  "theme": "color",
  "metadata": {
    "attempt": 210,
    "total_locks": 10,
    "equal_hints": 1,
    "notequal_hints": 2,
    "unique_checked": false,
    "solutions": null,
    "logic_steps": 26,
    "trace_len": 26
  }
}\n\n===== FILE 14/160: assets/data/stage1/level_21.json =====\n{
  "level": 11,
  "difficulty": "normal",
  "size": 8,
  "puzzle": [
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "yellow_triangle",
        "locked": true
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "blue_square",
        "locked": true
      }
    ],
    [
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      }
    ]
  ],
  "solution": [
    [
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "blue_square"
    ],
    [
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square"
    ],
    [
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle"
    ],
    [
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle"
    ],
    [
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square"
    ],
    [
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "blue_square"
    ],
    [
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle"
    ],
    [
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle"
    ]
  ],
  "hints": [
    {
      "type": "equal",
      "cell1": [
        2,
        1
      ],
      "cell2": [
        3,
        1
      ]
    },
    {
      "type": "equal",
      "cell1": [
        0,
        5
      ],
      "cell2": [
        1,
        5
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        3,
        6
      ],
      "cell2": [
        3,
        7
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        1,
        1
      ],
      "cell2": [
        2,
        1
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        4,
        3
      ],
      "cell2": [
        5,
        3
      ]
    }
  ],
  "theme": "color",
  "metadata": {
    "attempt": 221,
    "total_locks": 18,
    "equal_hints": 2,
    "notequal_hints": 3,
    "unique_checked": false,
    "solutions": null,
    "logic_steps": 46,
    "trace_len": 46
  }
}\n\n===== FILE 15/160: assets/data/stage1/level_22.json =====\n{
  "level": 12,
  "difficulty": "normal",
  "size": 8,
  "puzzle": [
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "blue_square",
        "locked": true
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ]
  ],
  "solution": [
    [
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle"
    ],
    [
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle"
    ],
    [
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square"
    ],
    [
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "blue_square"
    ],
    [
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle"
    ],
    [
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square"
    ],
    [
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle"
    ],
    [
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "blue_square"
    ]
  ],
  "hints": [
    {
      "type": "equal",
      "cell1": [
        2,
        1
      ],
      "cell2": [
        3,
        1
      ]
    },
    {
      "type": "equal",
      "cell1": [
        0,
        4
      ],
      "cell2": [
        0,
        5
      ]
    },
    {
      "type": "equal",
      "cell1": [
        4,
        0
      ],
      "cell2": [
        4,
        1
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        3,
        1
      ],
      "cell2": [
        3,
        2
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        2,
        4
      ],
      "cell2": [
        2,
        5
      ]
    }
  ],
  "theme": "color",
  "metadata": {
    "attempt": 253,
    "total_locks": 18,
    "equal_hints": 3,
    "notequal_hints": 2,
    "unique_checked": false,
    "solutions": null,
    "logic_steps": 46,
    "trace_len": 46
  }
}\n\n===== FILE 16/160: assets/data/stage1/level_23.json =====\n{
  "level": 13,
  "difficulty": "normal",
  "size": 8,
  "puzzle": [
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      }
    ]
  ],
  "solution": [
    [
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "blue_square"
    ],
    [
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle"
    ],
    [
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square"
    ],
    [
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle"
    ],
    [
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square"
    ],
    [
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "blue_square"
    ],
    [
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle"
    ],
    [
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle"
    ]
  ],
  "hints": [
    {
      "type": "equal",
      "cell1": [
        4,
        2
      ],
      "cell2": [
        5,
        2
      ]
    },
    {
      "type": "equal",
      "cell1": [
        0,
        5
      ],
      "cell2": [
        1,
        5
      ]
    },
    {
      "type": "equal",
      "cell1": [
        2,
        2
      ],
      "cell2": [
        3,
        2
      ]
    },
    {
      "type": "equal",
      "cell1": [
        4,
        6
      ],
      "cell2": [
        5,
        6
      ]
    },
    {
      "type": "equal",
      "cell1": [
        7,
        4
      ],
      "cell2": [
        7,
        5
      ]
    },
    {
      "type": "equal",
      "cell1": [
        2,
        3
      ],
      "cell2": [
        2,
        4
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        2,
        6
      ],
      "cell2": [
        3,
        6
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        7,
        2
      ],
      "cell2": [
        7,
        3
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        0,
        5
      ],
      "cell2": [
        0,
        6
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        6,
        6
      ],
      "cell2": [
        7,
        6
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        1,
        6
      ],
      "cell2": [
        2,
        6
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        3,
        7
      ],
      "cell2": [
        4,
        7
      ]
    }
  ],
  "theme": "color",
  "metadata": {
    "attempt": 395,
    "total_locks": 10,
    "equal_hints": 6,
    "notequal_hints": 6,
    "unique_checked": false,
    "solutions": null,
    "logic_steps": 54,
    "trace_len": 54
  }
}\n\n===== FILE 17/160: assets/data/stage1/level_24.json =====\n{
  "level": 14,
  "difficulty": "normal",
  "size": 8,
  "puzzle": [
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ]
  ],
  "solution": [
    [
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle"
    ],
    [
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle"
    ],
    [
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "blue_square"
    ],
    [
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square"
    ],
    [
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle"
    ],
    [
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square"
    ],
    [
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "blue_square"
    ],
    [
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle"
    ]
  ],
  "hints": [
    {
      "type": "equal",
      "cell1": [
        6,
        6
      ],
      "cell2": [
        7,
        6
      ]
    },
    {
      "type": "equal",
      "cell1": [
        4,
        3
      ],
      "cell2": [
        4,
        4
      ]
    },
    {
      "type": "equal",
      "cell1": [
        0,
        6
      ],
      "cell2": [
        0,
        7
      ]
    },
    {
      "type": "equal",
      "cell1": [
        5,
        0
      ],
      "cell2": [
        6,
        0
      ]
    },
    {
      "type": "equal",
      "cell1": [
        4,
        2
      ],
      "cell2": [
        5,
        2
      ]
    },
    {
      "type": "equal",
      "cell1": [
        6,
        2
      ],
      "cell2": [
        6,
        3
      ]
    },
    {
      "type": "equal",
      "cell1": [
        0,
        0
      ],
      "cell2": [
        1,
        0
      ]
    },
    {
      "type": "equal",
      "cell1": [
        2,
        5
      ],
      "cell2": [
        3,
        5
      ]
    },
    {
      "type": "equal",
      "cell1": [
        2,
        2
      ],
      "cell2": [
        2,
        3
      ]
    },
    {
      "type": "equal",
      "cell1": [
        6,
        5
      ],
      "cell2": [
        7,
        5
      ]
    },
    {
      "type": "equal",
      "cell1": [
        5,
        0
      ],
      "cell2": [
        5,
        1
      ]
    },
    {
      "type": "equal",
      "cell1": [
        0,
        2
      ],
      "cell2": [
        1,
        2
      ]
    },
    {
      "type": "equal",
      "cell1": [
        2,
        6
      ],
      "cell2": [
        2,
        7
      ]
    },
    {
      "type": "equal",
      "cell1": [
        0,
        0
      ],
      "cell2": [
        0,
        1
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        6,
        0
      ],
      "cell2": [
        6,
        1
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        0,
        2
      ],
      "cell2": [
        0,
        3
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        6,
        2
      ],
      "cell2": [
        7,
        2
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        5,
        4
      ],
      "cell2": [
        6,
        4
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        5,
        6
      ],
      "cell2": [
        6,
        6
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        5,
        1
      ],
      "cell2": [
        5,
        2
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        1,
        3
      ],
      "cell2": [
        2,
        3
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        3,
        0
      ],
      "cell2": [
        3,
        1
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        6,
        0
      ],
      "cell2": [
        7,
        0
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        2,
        1
      ],
      "cell2": [
        3,
        1
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        4,
        1
      ],
      "cell2": [
        4,
        2
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        5,
        4
      ],
      "cell2": [
        5,
        5
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        5,
        6
      ],
      "cell2": [
        5,
        7
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        5,
        3
      ],
      "cell2": [
        6,
        3
      ]
    }
  ],
  "theme": "color",
  "metadata": {
    "attempt": 52,
    "total_locks": 1,
    "equal_hints": 14,
    "notequal_hints": 14,
    "unique_checked": false,
    "solutions": null,
    "logic_steps": 63,
    "trace_len": 63
  }
}\n\n===== FILE 18/160: assets/data/stage1/level_25.json =====\n{
  "level": 15,
  "difficulty": "normal",
  "size": 8,
  "puzzle": [
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      }
    ],
    [
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ]
  ],
  "solution": [
    [
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle"
    ],
    [
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle"
    ],
    [
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "blue_square"
    ],
    [
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "blue_square"
    ],
    [
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle"
    ],
    [
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle"
    ],
    [
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square"
    ],
    [
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "blue_square"
    ]
  ],
  "hints": [
    {
      "type": "equal",
      "cell1": [
        4,
        7
      ],
      "cell2": [
        5,
        7
      ]
    },
    {
      "type": "equal",
      "cell1": [
        7,
        4
      ],
      "cell2": [
        7,
        5
      ]
    },
    {
      "type": "equal",
      "cell1": [
        5,
        5
      ],
      "cell2": [
        6,
        5
      ]
    },
    {
      "type": "equal",
      "cell1": [
        6,
        7
      ],
      "cell2": [
        7,
        7
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        7,
        1
      ],
      "cell2": [
        7,
        2
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        0,
        5
      ],
      "cell2": [
        0,
        6
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        5,
        0
      ],
      "cell2": [
        5,
        1
      ]
    }
  ],
  "theme": "color",
  "metadata": {
    "attempt": 492,
    "total_locks": 15,
    "equal_hints": 4,
    "notequal_hints": 3,
    "unique_checked": false,
    "solutions": null,
    "logic_steps": 49,
    "trace_len": 49
  }
}\n\n===== FILE 19/160: assets/data/stage1/level_26.json =====\n{
  "level": 16,
  "difficulty": "normal",
  "size": 8,
  "puzzle": [
    [
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ]
  ],
  "solution": [
    [
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle"
    ],
    [
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "blue_square"
    ],
    [
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle"
    ],
    [
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle"
    ],
    [
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square"
    ],
    [
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "blue_square"
    ],
    [
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle"
    ],
    [
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square"
    ]
  ],
  "hints": [
    {
      "type": "equal",
      "cell1": [
        3,
        2
      ],
      "cell2": [
        4,
        2
      ]
    },
    {
      "type": "equal",
      "cell1": [
        0,
        4
      ],
      "cell2": [
        1,
        4
      ]
    },
    {
      "type": "equal",
      "cell1": [
        5,
        6
      ],
      "cell2": [
        6,
        6
      ]
    },
    {
      "type": "equal",
      "cell1": [
        2,
        5
      ],
      "cell2": [
        3,
        5
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        4,
        6
      ],
      "cell2": [
        4,
        7
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        0,
        5
      ],
      "cell2": [
        0,
        6
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        6,
        7
      ],
      "cell2": [
        7,
        7
      ]
    }
  ],
  "theme": "color",
  "metadata": {
    "attempt": 728,
    "total_locks": 15,
    "equal_hints": 4,
    "notequal_hints": 3,
    "unique_checked": false,
    "solutions": null,
    "logic_steps": 49,
    "trace_len": 49
  }
}\n\n===== FILE 20/160: assets/data/stage1/level_27.json =====\n{
  "level": 17,
  "difficulty": "normal",
  "size": 8,
  "puzzle": [
    [
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ]
  ],
  "solution": [
    [
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square"
    ],
    [
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "blue_square"
    ],
    [
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle"
    ],
    [
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "blue_square"
    ],
    [
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle"
    ],
    [
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle"
    ],
    [
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square"
    ],
    [
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle"
    ]
  ],
  "hints": [
    {
      "type": "equal",
      "cell1": [
        3,
        4
      ],
      "cell2": [
        4,
        4
      ]
    },
    {
      "type": "equal",
      "cell1": [
        1,
        1
      ],
      "cell2": [
        2,
        1
      ]
    },
    {
      "type": "equal",
      "cell1": [
        0,
        7
      ],
      "cell2": [
        1,
        7
      ]
    },
    {
      "type": "equal",
      "cell1": [
        4,
        1
      ],
      "cell2": [
        5,
        1
      ]
    },
    {
      "type": "equal",
      "cell1": [
        4,
        1
      ],
      "cell2": [
        4,
        2
      ]
    },
    {
      "type": "equal",
      "cell1": [
        1,
        2
      ],
      "cell2": [
        2,
        2
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        3,
        3
      ],
      "cell2": [
        3,
        4
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        6,
        5
      ],
      "cell2": [
        6,
        6
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        5,
        0
      ],
      "cell2": [
        5,
        1
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        6,
        0
      ],
      "cell2": [
        6,
        1
      ]
    }
  ],
  "theme": "color",
  "metadata": {
    "attempt": 97,
    "total_locks": 12,
    "equal_hints": 6,
    "notequal_hints": 4,
    "unique_checked": false,
    "solutions": null,
    "logic_steps": 52,
    "trace_len": 52
  }
}\n\n===== FILE 21/160: assets/data/stage1/level_28.json =====\n{
  "level": 18,
  "difficulty": "normal",
  "size": 8,
  "puzzle": [
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ]
  ],
  "solution": [
    [
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle"
    ],
    [
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle"
    ],
    [
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square"
    ],
    [
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle"
    ],
    [
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "blue_square"
    ],
    [
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle"
    ],
    [
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "blue_square"
    ],
    [
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "blue_square"
    ]
  ],
  "hints": [
    {
      "type": "equal",
      "cell1": [
        4,
        6
      ],
      "cell2": [
        4,
        7
      ]
    },
    {
      "type": "equal",
      "cell1": [
        0,
        2
      ],
      "cell2": [
        1,
        2
      ]
    },
    {
      "type": "equal",
      "cell1": [
        6,
        0
      ],
      "cell2": [
        7,
        0
      ]
    },
    {
      "type": "equal",
      "cell1": [
        6,
        1
      ],
      "cell2": [
        7,
        1
      ]
    },
    {
      "type": "equal",
      "cell1": [
        3,
        1
      ],
      "cell2": [
        3,
        2
      ]
    },
    {
      "type": "equal",
      "cell1": [
        4,
        0
      ],
      "cell2": [
        5,
        0
      ]
    },
    {
      "type": "equal",
      "cell1": [
        4,
        6
      ],
      "cell2": [
        5,
        6
      ]
    },
    {
      "type": "equal",
      "cell1": [
        5,
        3
      ],
      "cell2": [
        6,
        3
      ]
    },
    {
      "type": "equal",
      "cell1": [
        7,
        6
      ],
      "cell2": [
        7,
        7
      ]
    },
    {
      "type": "equal",
      "cell1": [
        2,
        6
      ],
      "cell2": [
        3,
        6
      ]
    },
    {
      "type": "equal",
      "cell1": [
        2,
        1
      ],
      "cell2": [
        3,
        1
      ]
    },
    {
      "type": "equal",
      "cell1": [
        2,
        5
      ],
      "cell2": [
        3,
        5
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        2,
        6
      ],
      "cell2": [
        2,
        7
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        6,
        6
      ],
      "cell2": [
        7,
        6
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        4,
        2
      ],
      "cell2": [
        4,
        3
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        2,
        4
      ],
      "cell2": [
        3,
        4
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        4,
        0
      ],
      "cell2": [
        4,
        1
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        5,
        0
      ],
      "cell2": [
        5,
        1
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        1,
        7
      ],
      "cell2": [
        2,
        7
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        1,
        3
      ],
      "cell2": [
        1,
        4
      ]
    }
  ],
  "theme": "color",
  "metadata": {
    "attempt": 215,
    "total_locks": 5,
    "equal_hints": 12,
    "notequal_hints": 8,
    "unique_checked": false,
    "solutions": null,
    "logic_steps": 59,
    "trace_len": 59
  }
}\n\n===== FILE 22/160: assets/data/stage1/level_29.json =====\n{
  "level": 19,
  "difficulty": "normal",
  "size": 8,
  "puzzle": [
    [
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "yellow_triangle",
        "locked": true
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      }
    ],
    [
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      }
    ]
  ],
  "solution": [
    [
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square"
    ],
    [
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle"
    ],
    [
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle"
    ],
    [
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square"
    ],
    [
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle"
    ],
    [
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square"
    ],
    [
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "blue_square"
    ],
    [
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle"
    ]
  ],
  "hints": [
    {
      "type": "equal",
      "cell1": [
        1,
        1
      ],
      "cell2": [
        2,
        1
      ]
    },
    {
      "type": "equal",
      "cell1": [
        3,
        3
      ],
      "cell2": [
        4,
        3
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        2,
        0
      ],
      "cell2": [
        2,
        1
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        6,
        0
      ],
      "cell2": [
        6,
        1
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        1,
        3
      ],
      "cell2": [
        2,
        3
      ]
    }
  ],
  "theme": "color",
  "metadata": {
    "attempt": 44,
    "total_locks": 19,
    "equal_hints": 2,
    "notequal_hints": 3,
    "unique_checked": false,
    "solutions": null,
    "logic_steps": 45,
    "trace_len": 45
  }
}\n\n===== FILE 23/160: assets/data/stage1/level_3.json =====\n{
  "level": 3,
  "difficulty": "normal",
  "size": 6,
  "puzzle": [
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ]
  ],
  "solution": [
    [
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "blue_square"
    ],
    [
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle"
    ],
    [
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle"
    ],
    [
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square"
    ],
    [
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle"
    ],
    [
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "blue_square"
    ]
  ],
  "hints": [
    {
      "type": "equal",
      "cell1": [
        2,
        3
      ],
      "cell2": [
        3,
        3
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        0,
        4
      ],
      "cell2": [
        0,
        5
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        0,
        1
      ],
      "cell2": [
        0,
        2
      ]
    }
  ],
  "theme": "color",
  "metadata": {
    "attempt": 2,
    "total_locks": 9,
    "equal_hints": 1,
    "notequal_hints": 2,
    "unique_checked": false,
    "solutions": null,
    "logic_steps": 27,
    "trace_len": 27
  }
}\n\n===== FILE 24/160: assets/data/stage1/level_30.json =====\n{
  "level": 20,
  "difficulty": "normal",
  "size": 8,
  "puzzle": [
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      }
    ],
    [
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      }
    ],
    [
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ]
  ],
  "solution": [
    [
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle"
    ],
    [
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle"
    ],
    [
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "blue_square"
    ],
    [
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square"
    ],
    [
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle"
    ],
    [
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "blue_square"
    ],
    [
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "blue_square"
    ],
    [
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle"
    ]
  ],
  "hints": [
    {
      "type": "equal",
      "cell1": [
        1,
        5
      ],
      "cell2": [
        2,
        5
      ]
    },
    {
      "type": "equal",
      "cell1": [
        5,
        4
      ],
      "cell2": [
        5,
        5
      ]
    }
  ],
  "theme": "color",
  "metadata": {
    "attempt": 140,
    "total_locks": 22,
    "equal_hints": 2,
    "notequal_hints": 0,
    "unique_checked": false,
    "solutions": null,
    "logic_steps": 42,
    "trace_len": 42
  }
}\n\n===== FILE 25/160: assets/data/stage1/level_31.json =====\n{
  "level": 41,
  "difficulty": "normal",
  "size": 8,
  "puzzle": [
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ]
  ],
  "solution": [
    [
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle"
    ],
    [
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle"
    ],
    [
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square"
    ],
    [
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle"
    ],
    [
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "blue_square"
    ],
    [
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle"
    ],
    [
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square"
    ],
    [
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "blue_square"
    ]
  ],
  "hints": [
    {
      "type": "equal",
      "cell1": [
        4,
        4
      ],
      "cell2": [
        4,
        5
      ]
    },
    {
      "type": "equal",
      "cell1": [
        4,
        1
      ],
      "cell2": [
        4,
        2
      ]
    },
    {
      "type": "equal",
      "cell1": [
        0,
        6
      ],
      "cell2": [
        1,
        6
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        5,
        4
      ],
      "cell2": [
        6,
        4
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        0,
        5
      ],
      "cell2": [
        1,
        5
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        7,
        2
      ],
      "cell2": [
        7,
        3
      ]
    }
  ],
  "theme": "color",
  "metadata": {
    "attempt": 438,
    "total_locks": 16,
    "equal_hints": 3,
    "notequal_hints": 3,
    "unique_checked": false,
    "solutions": null,
    "logic_steps": 48,
    "trace_len": 48
  }
}\n\n===== FILE 26/160: assets/data/stage1/level_32.json =====\n{
  "level": 42,
  "difficulty": "normal",
  "size": 8,
  "puzzle": [
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "yellow_triangle",
        "locked": true
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ]
  ],
  "solution": [
    [
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square"
    ],
    [
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle"
    ],
    [
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle"
    ],
    [
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "blue_square"
    ],
    [
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square"
    ],
    [
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle"
    ],
    [
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "blue_square"
    ],
    [
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle"
    ]
  ],
  "hints": [
    {
      "type": "equal",
      "cell1": [
        0,
        2
      ],
      "cell2": [
        0,
        3
      ]
    },
    {
      "type": "equal",
      "cell1": [
        2,
        0
      ],
      "cell2": [
        3,
        0
      ]
    },
    {
      "type": "equal",
      "cell1": [
        4,
        5
      ],
      "cell2": [
        5,
        5
      ]
    },
    {
      "type": "equal",
      "cell1": [
        3,
        7
      ],
      "cell2": [
        4,
        7
      ]
    },
    {
      "type": "equal",
      "cell1": [
        0,
        0
      ],
      "cell2": [
        1,
        0
      ]
    },
    {
      "type": "equal",
      "cell1": [
        5,
        0
      ],
      "cell2": [
        6,
        0
      ]
    }
  ],
  "theme": "color",
  "metadata": {
    "attempt": 96,
    "total_locks": 18,
    "equal_hints": 6,
    "notequal_hints": 0,
    "unique_checked": false,
    "solutions": null,
    "logic_steps": 46,
    "trace_len": 46
  }
}\n\n===== FILE 27/160: assets/data/stage1/level_33.json =====\n{
  "level": 43,
  "difficulty": "normal",
  "size": 8,
  "puzzle": [
    [
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "yellow_triangle",
        "locked": true
      }
    ],
    [
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ]
  ],
  "solution": [
    [
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle"
    ],
    [
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "blue_square"
    ],
    [
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "blue_square"
    ],
    [
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle"
    ],
    [
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square"
    ],
    [
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "blue_square"
    ],
    [
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle"
    ],
    [
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle"
    ]
  ],
  "hints": [
    {
      "type": "equal",
      "cell1": [
        5,
        0
      ],
      "cell2": [
        6,
        0
      ]
    },
    {
      "type": "equal",
      "cell1": [
        0,
        4
      ],
      "cell2": [
        0,
        5
      ]
    },
    {
      "type": "equal",
      "cell1": [
        5,
        6
      ],
      "cell2": [
        5,
        7
      ]
    },
    {
      "type": "equal",
      "cell1": [
        4,
        3
      ],
      "cell2": [
        5,
        3
      ]
    },
    {
      "type": "equal",
      "cell1": [
        0,
        2
      ],
      "cell2": [
        1,
        2
      ]
    },
    {
      "type": "equal",
      "cell1": [
        4,
        5
      ],
      "cell2": [
        5,
        5
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        0,
        5
      ],
      "cell2": [
        1,
        5
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        4,
        1
      ],
      "cell2": [
        5,
        1
      ]
    }
  ],
  "theme": "color",
  "metadata": {
    "attempt": 315,
    "total_locks": 15,
    "equal_hints": 6,
    "notequal_hints": 2,
    "unique_checked": false,
    "solutions": null,
    "logic_steps": 49,
    "trace_len": 49
  }
}\n\n===== FILE 28/160: assets/data/stage1/level_34.json =====\n{
  "level": 44,
  "difficulty": "normal",
  "size": 8,
  "puzzle": [
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ]
  ],
  "solution": [
    [
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "blue_square"
    ],
    [
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle"
    ],
    [
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle"
    ],
    [
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square"
    ],
    [
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle"
    ],
    [
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle"
    ],
    [
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "blue_square"
    ],
    [
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "blue_square"
    ]
  ],
  "hints": [
    {
      "type": "equal",
      "cell1": [
        5,
        4
      ],
      "cell2": [
        5,
        5
      ]
    },
    {
      "type": "equal",
      "cell1": [
        3,
        5
      ],
      "cell2": [
        3,
        6
      ]
    },
    {
      "type": "equal",
      "cell1": [
        0,
        0
      ],
      "cell2": [
        1,
        0
      ]
    },
    {
      "type": "equal",
      "cell1": [
        7,
        6
      ],
      "cell2": [
        7,
        7
      ]
    },
    {
      "type": "equal",
      "cell1": [
        6,
        1
      ],
      "cell2": [
        7,
        1
      ]
    },
    {
      "type": "equal",
      "cell1": [
        4,
        3
      ],
      "cell2": [
        4,
        4
      ]
    },
    {
      "type": "equal",
      "cell1": [
        5,
        6
      ],
      "cell2": [
        5,
        7
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        2,
        5
      ],
      "cell2": [
        3,
        5
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        5,
        5
      ],
      "cell2": [
        6,
        5
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        3,
        0
      ],
      "cell2": [
        4,
        0
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        1,
        4
      ],
      "cell2": [
        2,
        4
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        1,
        3
      ],
      "cell2": [
        2,
        3
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        2,
        5
      ],
      "cell2": [
        2,
        6
      ]
    }
  ],
  "theme": "color",
  "metadata": {
    "attempt": 328,
    "total_locks": 10,
    "equal_hints": 7,
    "notequal_hints": 6,
    "unique_checked": false,
    "solutions": null,
    "logic_steps": 54,
    "trace_len": 54
  }
}\n\n===== FILE 29/160: assets/data/stage1/level_35.json =====\n{
  "level": 45,
  "difficulty": "normal",
  "size": 8,
  "puzzle": [
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ]
  ],
  "solution": [
    [
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "blue_square"
    ],
    [
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square"
    ],
    [
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle"
    ],
    [
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle"
    ],
    [
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square"
    ],
    [
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square"
    ],
    [
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle"
    ],
    [
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle"
    ]
  ],
  "hints": [
    {
      "type": "equal",
      "cell1": [
        0,
        6
      ],
      "cell2": [
        1,
        6
      ]
    },
    {
      "type": "equal",
      "cell1": [
        2,
        1
      ],
      "cell2": [
        3,
        1
      ]
    },
    {
      "type": "equal",
      "cell1": [
        6,
        5
      ],
      "cell2": [
        7,
        5
      ]
    },
    {
      "type": "equal",
      "cell1": [
        2,
        5
      ],
      "cell2": [
        3,
        5
      ]
    },
    {
      "type": "equal",
      "cell1": [
        3,
        3
      ],
      "cell2": [
        3,
        4
      ]
    },
    {
      "type": "equal",
      "cell1": [
        6,
        4
      ],
      "cell2": [
        6,
        5
      ]
    },
    {
      "type": "equal",
      "cell1": [
        0,
        0
      ],
      "cell2": [
        1,
        0
      ]
    },
    {
      "type": "equal",
      "cell1": [
        6,
        0
      ],
      "cell2": [
        6,
        1
      ]
    },
    {
      "type": "equal",
      "cell1": [
        6,
        7
      ],
      "cell2": [
        7,
        7
      ]
    },
    {
      "type": "equal",
      "cell1": [
        2,
        6
      ],
      "cell2": [
        3,
        6
      ]
    },
    {
      "type": "equal",
      "cell1": [
        5,
        3
      ],
      "cell2": [
        6,
        3
      ]
    },
    {
      "type": "equal",
      "cell1": [
        4,
        7
      ],
      "cell2": [
        5,
        7
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        1,
        4
      ],
      "cell2": [
        1,
        5
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        6,
        6
      ],
      "cell2": [
        6,
        7
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        2,
        4
      ],
      "cell2": [
        2,
        5
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        0,
        2
      ],
      "cell2": [
        0,
        3
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        4,
        1
      ],
      "cell2": [
        5,
        1
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        3,
        7
      ],
      "cell2": [
        4,
        7
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        1,
        5
      ],
      "cell2": [
        2,
        5
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        5,
        0
      ],
      "cell2": [
        5,
        1
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        0,
        3
      ],
      "cell2": [
        1,
        3
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        0,
        5
      ],
      "cell2": [
        0,
        6
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        6,
        5
      ],
      "cell2": [
        6,
        6
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        3,
        4
      ],
      "cell2": [
        4,
        4
      ]
    }
  ],
  "theme": "color",
  "metadata": {
    "attempt": 721,
    "total_locks": 1,
    "equal_hints": 12,
    "notequal_hints": 12,
    "unique_checked": false,
    "solutions": null,
    "logic_steps": 63,
    "trace_len": 63
  }
}\n\n===== FILE 30/160: assets/data/stage1/level_36.json =====\n{
  "level": 46,
  "difficulty": "normal",
  "size": 8,
  "puzzle": [
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ]
  ],
  "solution": [
    [
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "blue_square"
    ],
    [
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square"
    ],
    [
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle"
    ],
    [
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle"
    ],
    [
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square"
    ],
    [
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "blue_square"
    ],
    [
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle"
    ],
    [
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle"
    ]
  ],
  "hints": [
    {
      "type": "equal",
      "cell1": [
        6,
        7
      ],
      "cell2": [
        7,
        7
      ]
    },
    {
      "type": "equal",
      "cell1": [
        2,
        4
      ],
      "cell2": [
        3,
        4
      ]
    },
    {
      "type": "equal",
      "cell1": [
        2,
        0
      ],
      "cell2": [
        3,
        0
      ]
    },
    {
      "type": "equal",
      "cell1": [
        6,
        6
      ],
      "cell2": [
        6,
        7
      ]
    },
    {
      "type": "equal",
      "cell1": [
        0,
        0
      ],
      "cell2": [
        1,
        0
      ]
    },
    {
      "type": "equal",
      "cell1": [
        4,
        1
      ],
      "cell2": [
        5,
        1
      ]
    },
    {
      "type": "equal",
      "cell1": [
        7,
        4
      ],
      "cell2": [
        7,
        5
      ]
    },
    {
      "type": "equal",
      "cell1": [
        2,
        1
      ],
      "cell2": [
        2,
        2
      ]
    },
    {
      "type": "equal",
      "cell1": [
        2,
        7
      ],
      "cell2": [
        3,
        7
      ]
    },
    {
      "type": "equal",
      "cell1": [
        5,
        6
      ],
      "cell2": [
        5,
        7
      ]
    },
    {
      "type": "equal",
      "cell1": [
        0,
        1
      ],
      "cell2": [
        1,
        1
      ]
    },
    {
      "type": "equal",
      "cell1": [
        6,
        0
      ],
      "cell2": [
        6,
        1
      ]
    },
    {
      "type": "equal",
      "cell1": [
        0,
        3
      ],
      "cell2": [
        1,
        3
      ]
    },
    {
      "type": "equal",
      "cell1": [
        6,
        6
      ],
      "cell2": [
        7,
        6
      ]
    },
    {
      "type": "equal",
      "cell1": [
        0,
        4
      ],
      "cell2": [
        1,
        4
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        2,
        2
      ],
      "cell2": [
        3,
        2
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        3,
        2
      ],
      "cell2": [
        3,
        3
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        3,
        1
      ],
      "cell2": [
        4,
        1
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        1,
        2
      ],
      "cell2": [
        1,
        3
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        0,
        6
      ],
      "cell2": [
        1,
        6
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        1,
        0
      ],
      "cell2": [
        2,
        0
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        3,
        6
      ],
      "cell2": [
        3,
        7
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        6,
        3
      ],
      "cell2": [
        6,
        4
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        3,
        1
      ],
      "cell2": [
        3,
        2
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        1,
        5
      ],
      "cell2": [
        1,
        6
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        4,
        5
      ],
      "cell2": [
        5,
        5
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        3,
        6
      ],
      "cell2": [
        4,
        6
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        0,
        2
      ],
      "cell2": [
        0,
        3
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        1,
        4
      ],
      "cell2": [
        1,
        5
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        0,
        0
      ],
      "cell2": [
        0,
        1
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        1,
        6
      ],
      "cell2": [
        1,
        7
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        5,
        5
      ],
      "cell2": [
        6,
        5
      ]
    }
  ],
  "theme": "color",
  "metadata": {
    "attempt": 1,
    "total_locks": 6,
    "equal_hints": 15,
    "notequal_hints": 17,
    "unique_checked": false,
    "solutions": null,
    "logic_steps": 58,
    "trace_len": 58
  }
}\n\n===== FILE 31/160: assets/data/stage1/level_37.json =====\n{
  "level": 47,
  "difficulty": "normal",
  "size": 8,
  "puzzle": [
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ]
  ],
  "solution": [
    [
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle"
    ],
    [
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square"
    ],
    [
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square"
    ],
    [
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle"
    ],
    [
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "blue_square"
    ],
    [
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle"
    ],
    [
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle"
    ],
    [
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square"
    ]
  ],
  "hints": [
    {
      "type": "equal",
      "cell1": [
        7,
        1
      ],
      "cell2": [
        7,
        2
      ]
    },
    {
      "type": "equal",
      "cell1": [
        3,
        4
      ],
      "cell2": [
        3,
        5
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        5,
        5
      ],
      "cell2": [
        5,
        6
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        0,
        1
      ],
      "cell2": [
        1,
        1
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        3,
        5
      ],
      "cell2": [
        3,
        6
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        5,
        4
      ],
      "cell2": [
        5,
        5
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        0,
        7
      ],
      "cell2": [
        1,
        7
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        6,
        1
      ],
      "cell2": [
        7,
        1
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        0,
        3
      ],
      "cell2": [
        0,
        4
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        2,
        6
      ],
      "cell2": [
        3,
        6
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        4,
        0
      ],
      "cell2": [
        5,
        0
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        5,
        2
      ],
      "cell2": [
        5,
        3
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        4,
        6
      ],
      "cell2": [
        5,
        6
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        3,
        6
      ],
      "cell2": [
        4,
        6
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        3,
        4
      ],
      "cell2": [
        4,
        4
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        3,
        0
      ],
      "cell2": [
        4,
        0
      ]
    }
  ],
  "theme": "color",
  "metadata": {
    "attempt": 580,
    "total_locks": 12,
    "equal_hints": 2,
    "notequal_hints": 14,
    "unique_checked": false,
    "solutions": null,
    "logic_steps": 52,
    "trace_len": 52
  }
}\n\n===== FILE 32/160: assets/data/stage1/level_38.json =====\n{
  "level": 48,
  "difficulty": "normal",
  "size": 8,
  "puzzle": [
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ]
  ],
  "solution": [
    [
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle"
    ],
    [
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle"
    ],
    [
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square"
    ],
    [
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle"
    ],
    [
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square"
    ],
    [
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle"
    ],
    [
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "blue_square"
    ],
    [
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square"
    ]
  ],
  "hints": [
    {
      "type": "equal",
      "cell1": [
        5,
        6
      ],
      "cell2": [
        6,
        6
      ]
    },
    {
      "type": "equal",
      "cell1": [
        5,
        5
      ],
      "cell2": [
        5,
        6
      ]
    },
    {
      "type": "equal",
      "cell1": [
        1,
        0
      ],
      "cell2": [
        1,
        1
      ]
    },
    {
      "type": "equal",
      "cell1": [
        0,
        0
      ],
      "cell2": [
        1,
        0
      ]
    },
    {
      "type": "equal",
      "cell1": [
        6,
        6
      ],
      "cell2": [
        6,
        7
      ]
    },
    {
      "type": "equal",
      "cell1": [
        0,
        1
      ],
      "cell2": [
        1,
        1
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        1,
        3
      ],
      "cell2": [
        1,
        4
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        2,
        6
      ],
      "cell2": [
        3,
        6
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        0,
        5
      ],
      "cell2": [
        1,
        5
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        2,
        6
      ],
      "cell2": [
        2,
        7
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        5,
        3
      ],
      "cell2": [
        5,
        4
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        6,
        1
      ],
      "cell2": [
        6,
        2
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        3,
        0
      ],
      "cell2": [
        4,
        0
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        3,
        2
      ],
      "cell2": [
        4,
        2
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        0,
        3
      ],
      "cell2": [
        1,
        3
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        3,
        6
      ],
      "cell2": [
        4,
        6
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        3,
        2
      ],
      "cell2": [
        3,
        3
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        6,
        0
      ],
      "cell2": [
        7,
        0
      ]
    }
  ],
  "theme": "color",
  "metadata": {
    "attempt": 36,
    "total_locks": 16,
    "equal_hints": 6,
    "notequal_hints": 12,
    "unique_checked": false,
    "solutions": null,
    "logic_steps": 48,
    "trace_len": 48
  }
}\n\n===== FILE 33/160: assets/data/stage1/level_39.json =====\n{
  "level": 49,
  "difficulty": "normal",
  "size": 8,
  "puzzle": [
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      }
    ],
    [
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      }
    ]
  ],
  "solution": [
    [
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle"
    ],
    [
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle"
    ],
    [
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "blue_square"
    ],
    [
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square"
    ],
    [
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle"
    ],
    [
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "blue_square"
    ],
    [
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle"
    ],
    [
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square"
    ]
  ],
  "hints": [
    {
      "type": "equal",
      "cell1": [
        1,
        6
      ],
      "cell2": [
        1,
        7
      ]
    },
    {
      "type": "equal",
      "cell1": [
        5,
        0
      ],
      "cell2": [
        5,
        1
      ]
    },
    {
      "type": "equal",
      "cell1": [
        5,
        4
      ],
      "cell2": [
        5,
        5
      ]
    },
    {
      "type": "equal",
      "cell1": [
        3,
        3
      ],
      "cell2": [
        3,
        4
      ]
    },
    {
      "type": "equal",
      "cell1": [
        0,
        4
      ],
      "cell2": [
        1,
        4
      ]
    },
    {
      "type": "equal",
      "cell1": [
        0,
        3
      ],
      "cell2": [
        1,
        3
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        0,
        3
      ],
      "cell2": [
        0,
        4
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        5,
        6
      ],
      "cell2": [
        5,
        7
      ]
    }
  ],
  "theme": "color",
  "metadata": {
    "attempt": 6,
    "total_locks": 20,
    "equal_hints": 6,
    "notequal_hints": 2,
    "unique_checked": false,
    "solutions": null,
    "logic_steps": 44,
    "trace_len": 44
  }
}\n\n===== FILE 34/160: assets/data/stage1/level_4.json =====\n{
  "level": 4,
  "difficulty": "normal",
  "size": 6,
  "puzzle": [
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ]
  ],
  "solution": [
    [
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle"
    ],
    [
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "blue_square"
    ],
    [
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle"
    ],
    [
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square"
    ],
    [
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square"
    ],
    [
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle"
    ]
  ],
  "hints": [
    {
      "type": "equal",
      "cell1": [
        1,
        4
      ],
      "cell2": [
        1,
        5
      ]
    },
    {
      "type": "equal",
      "cell1": [
        2,
        2
      ],
      "cell2": [
        2,
        3
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        3,
        3
      ],
      "cell2": [
        4,
        3
      ]
    }
  ],
  "theme": "color",
  "metadata": {
    "attempt": 8,
    "total_locks": 9,
    "equal_hints": 2,
    "notequal_hints": 1,
    "unique_checked": false,
    "solutions": null,
    "logic_steps": 27,
    "trace_len": 27
  }
}\n\n===== FILE 35/160: assets/data/stage1/level_40.json =====\n{
  "level": 50,
  "difficulty": "normal",
  "size": 8,
  "puzzle": [
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      }
    ]
  ],
  "solution": [
    [
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle"
    ],
    [
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle"
    ],
    [
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square"
    ],
    [
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle"
    ],
    [
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "blue_square"
    ],
    [
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle"
    ],
    [
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "blue_square"
    ],
    [
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square"
    ]
  ],
  "hints": [
    {
      "type": "equal",
      "cell1": [
        6,
        6
      ],
      "cell2": [
        6,
        7
      ]
    },
    {
      "type": "equal",
      "cell1": [
        7,
        1
      ],
      "cell2": [
        7,
        2
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        2,
        4
      ],
      "cell2": [
        2,
        5
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        3,
        1
      ],
      "cell2": [
        3,
        2
      ]
    }
  ],
  "theme": "color",
  "metadata": {
    "attempt": 104,
    "total_locks": 22,
    "equal_hints": 2,
    "notequal_hints": 2,
    "unique_checked": false,
    "solutions": null,
    "logic_steps": 42,
    "trace_len": 42
  }
}\n\n===== FILE 36/160: assets/data/stage1/level_41.json =====\n{
  "level": 21,
  "difficulty": "normal",
  "size": 10,
  "puzzle": [
    [
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ]
  ],
  "solution": [
    [
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle"
    ],
    [
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "blue_square"
    ],
    [
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square"
    ],
    [
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle"
    ],
    [
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square"
    ],
    [
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "blue_square"
    ],
    [
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle"
    ],
    [
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle"
    ],
    [
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "blue_square"
    ],
    [
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle"
    ]
  ],
  "hints": [
    {
      "type": "equal",
      "cell1": [
        7,
        6
      ],
      "cell2": [
        7,
        7
      ]
    },
    {
      "type": "equal",
      "cell1": [
        3,
        7
      ],
      "cell2": [
        4,
        7
      ]
    },
    {
      "type": "equal",
      "cell1": [
        1,
        4
      ],
      "cell2": [
        1,
        5
      ]
    },
    {
      "type": "equal",
      "cell1": [
        2,
        0
      ],
      "cell2": [
        3,
        0
      ]
    },
    {
      "type": "equal",
      "cell1": [
        6,
        1
      ],
      "cell2": [
        6,
        2
      ]
    },
    {
      "type": "equal",
      "cell1": [
        2,
        5
      ],
      "cell2": [
        2,
        6
      ]
    },
    {
      "type": "equal",
      "cell1": [
        5,
        5
      ],
      "cell2": [
        6,
        5
      ]
    },
    {
      "type": "equal",
      "cell1": [
        8,
        4
      ],
      "cell2": [
        8,
        5
      ]
    },
    {
      "type": "equal",
      "cell1": [
        6,
        9
      ],
      "cell2": [
        7,
        9
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        7,
        8
      ],
      "cell2": [
        7,
        9
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        8,
        1
      ],
      "cell2": [
        8,
        2
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        4,
        3
      ],
      "cell2": [
        5,
        3
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        5,
        0
      ],
      "cell2": [
        5,
        1
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        2,
        9
      ],
      "cell2": [
        3,
        9
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        4,
        0
      ],
      "cell2": [
        5,
        0
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        9,
        5
      ],
      "cell2": [
        9,
        6
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        5,
        5
      ],
      "cell2": [
        5,
        6
      ]
    }
  ],
  "theme": "color",
  "metadata": {
    "attempt": 75,
    "total_locks": 20,
    "equal_hints": 9,
    "notequal_hints": 8,
    "unique_checked": false,
    "solutions": null,
    "logic_steps": 80,
    "trace_len": 80
  }
}\n\n===== FILE 37/160: assets/data/stage1/level_42.json =====\n{
  "level": 22,
  "difficulty": "normal",
  "size": 10,
  "puzzle": [
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "yellow_triangle",
        "locked": true
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ]
  ],
  "solution": [
    [
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle"
    ],
    [
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "blue_square"
    ],
    [
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "blue_square"
    ],
    [
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle"
    ],
    [
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle"
    ],
    [
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square"
    ],
    [
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle"
    ],
    [
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle"
    ],
    [
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "blue_square"
    ],
    [
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square"
    ]
  ],
  "hints": [
    {
      "type": "equal",
      "cell1": [
        0,
        6
      ],
      "cell2": [
        0,
        7
      ]
    },
    {
      "type": "equal",
      "cell1": [
        4,
        7
      ],
      "cell2": [
        5,
        7
      ]
    },
    {
      "type": "equal",
      "cell1": [
        5,
        2
      ],
      "cell2": [
        6,
        2
      ]
    },
    {
      "type": "equal",
      "cell1": [
        1,
        8
      ],
      "cell2": [
        1,
        9
      ]
    },
    {
      "type": "equal",
      "cell1": [
        1,
        9
      ],
      "cell2": [
        2,
        9
      ]
    },
    {
      "type": "equal",
      "cell1": [
        0,
        0
      ],
      "cell2": [
        0,
        1
      ]
    },
    {
      "type": "equal",
      "cell1": [
        5,
        5
      ],
      "cell2": [
        5,
        6
      ]
    },
    {
      "type": "equal",
      "cell1": [
        7,
        1
      ],
      "cell2": [
        8,
        1
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        0,
        8
      ],
      "cell2": [
        0,
        9
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        3,
        6
      ],
      "cell2": [
        4,
        6
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        8,
        1
      ],
      "cell2": [
        8,
        2
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        8,
        7
      ],
      "cell2": [
        8,
        8
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        5,
        8
      ],
      "cell2": [
        5,
        9
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        2,
        1
      ],
      "cell2": [
        2,
        2
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        4,
        5
      ],
      "cell2": [
        5,
        5
      ]
    }
  ],
  "theme": "color",
  "metadata": {
    "attempt": 221,
    "total_locks": 25,
    "equal_hints": 8,
    "notequal_hints": 7,
    "unique_checked": false,
    "solutions": null,
    "logic_steps": 75,
    "trace_len": 75
  }
}\n\n===== FILE 38/160: assets/data/stage1/level_43.json =====\n{
  "level": 23,
  "difficulty": "normal",
  "size": 10,
  "puzzle": [
    [
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      }
    ],
    [
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ]
  ],
  "solution": [
    [
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle"
    ],
    [
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle"
    ],
    [
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "blue_square"
    ],
    [
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle"
    ],
    [
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle"
    ],
    [
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "blue_square"
    ],
    [
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square"
    ],
    [
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle"
    ],
    [
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square"
    ],
    [
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "blue_square"
    ]
  ],
  "hints": [
    {
      "type": "equal",
      "cell1": [
        6,
        3
      ],
      "cell2": [
        7,
        3
      ]
    },
    {
      "type": "equal",
      "cell1": [
        7,
        1
      ],
      "cell2": [
        7,
        2
      ]
    },
    {
      "type": "equal",
      "cell1": [
        0,
        6
      ],
      "cell2": [
        1,
        6
      ]
    },
    {
      "type": "equal",
      "cell1": [
        0,
        8
      ],
      "cell2": [
        0,
        9
      ]
    },
    {
      "type": "equal",
      "cell1": [
        0,
        9
      ],
      "cell2": [
        1,
        9
      ]
    },
    {
      "type": "equal",
      "cell1": [
        1,
        2
      ],
      "cell2": [
        1,
        3
      ]
    },
    {
      "type": "equal",
      "cell1": [
        4,
        2
      ],
      "cell2": [
        5,
        2
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        2,
        5
      ],
      "cell2": [
        2,
        6
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        7,
        7
      ],
      "cell2": [
        8,
        7
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        6,
        8
      ],
      "cell2": [
        7,
        8
      ]
    }
  ],
  "theme": "color",
  "metadata": {
    "attempt": 734,
    "total_locks": 30,
    "equal_hints": 7,
    "notequal_hints": 3,
    "unique_checked": false,
    "solutions": null,
    "logic_steps": 70,
    "trace_len": 70
  }
}\n\n===== FILE 39/160: assets/data/stage1/level_44.json =====\n{
  "level": 24,
  "difficulty": "normal",
  "size": 10,
  "puzzle": [
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "yellow_triangle",
        "locked": true
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ]
  ],
  "solution": [
    [
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle"
    ],
    [
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square"
    ],
    [
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "blue_square"
    ],
    [
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle"
    ],
    [
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square"
    ],
    [
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle"
    ],
    [
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle"
    ],
    [
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square"
    ],
    [
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle"
    ],
    [
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square"
    ]
  ],
  "hints": [
    {
      "type": "equal",
      "cell1": [
        5,
        7
      ],
      "cell2": [
        5,
        8
      ]
    },
    {
      "type": "equal",
      "cell1": [
        6,
        0
      ],
      "cell2": [
        6,
        1
      ]
    },
    {
      "type": "equal",
      "cell1": [
        1,
        9
      ],
      "cell2": [
        2,
        9
      ]
    },
    {
      "type": "equal",
      "cell1": [
        5,
        1
      ],
      "cell2": [
        5,
        2
      ]
    },
    {
      "type": "equal",
      "cell1": [
        5,
        8
      ],
      "cell2": [
        6,
        8
      ]
    },
    {
      "type": "equal",
      "cell1": [
        8,
        0
      ],
      "cell2": [
        9,
        0
      ]
    },
    {
      "type": "equal",
      "cell1": [
        5,
        3
      ],
      "cell2": [
        6,
        3
      ]
    },
    {
      "type": "equal",
      "cell1": [
        2,
        3
      ],
      "cell2": [
        3,
        3
      ]
    },
    {
      "type": "equal",
      "cell1": [
        0,
        3
      ],
      "cell2": [
        1,
        3
      ]
    },
    {
      "type": "equal",
      "cell1": [
        5,
        7
      ],
      "cell2": [
        6,
        7
      ]
    },
    {
      "type": "equal",
      "cell1": [
        0,
        2
      ],
      "cell2": [
        0,
        3
      ]
    },
    {
      "type": "equal",
      "cell1": [
        3,
        1
      ],
      "cell2": [
        3,
        2
      ]
    },
    {
      "type": "equal",
      "cell1": [
        6,
        2
      ],
      "cell2": [
        6,
        3
      ]
    },
    {
      "type": "equal",
      "cell1": [
        3,
        5
      ],
      "cell2": [
        4,
        5
      ]
    },
    {
      "type": "equal",
      "cell1": [
        3,
        8
      ],
      "cell2": [
        4,
        8
      ]
    },
    {
      "type": "equal",
      "cell1": [
        7,
        0
      ],
      "cell2": [
        7,
        1
      ]
    },
    {
      "type": "equal",
      "cell1": [
        2,
        1
      ],
      "cell2": [
        3,
        1
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        6,
        1
      ],
      "cell2": [
        6,
        2
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        4,
        2
      ],
      "cell2": [
        4,
        3
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        2,
        7
      ],
      "cell2": [
        2,
        8
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        8,
        7
      ],
      "cell2": [
        8,
        8
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        0,
        8
      ],
      "cell2": [
        0,
        9
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        7,
        9
      ],
      "cell2": [
        8,
        9
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        1,
        6
      ],
      "cell2": [
        2,
        6
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        4,
        8
      ],
      "cell2": [
        4,
        9
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        4,
        7
      ],
      "cell2": [
        5,
        7
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        5,
        0
      ],
      "cell2": [
        5,
        1
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        7,
        8
      ],
      "cell2": [
        7,
        9
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        6,
        5
      ],
      "cell2": [
        7,
        5
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        7,
        3
      ],
      "cell2": [
        7,
        4
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        2,
        6
      ],
      "cell2": [
        3,
        6
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        3,
        6
      ],
      "cell2": [
        3,
        7
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        8,
        9
      ],
      "cell2": [
        9,
        9
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        6,
        2
      ],
      "cell2": [
        7,
        2
      ]
    }
  ],
  "theme": "color",
  "metadata": {
    "attempt": 52,
    "total_locks": 10,
    "equal_hints": 17,
    "notequal_hints": 17,
    "unique_checked": false,
    "solutions": null,
    "logic_steps": 90,
    "trace_len": 90
  }
}\n\n===== FILE 40/160: assets/data/stage1/level_45.json =====\n{
  "level": 25,
  "difficulty": "normal",
  "size": 10,
  "puzzle": [
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ]
  ],
  "solution": [
    [
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle"
    ],
    [
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle"
    ],
    [
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "blue_square"
    ],
    [
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle"
    ],
    [
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle"
    ],
    [
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "blue_square"
    ],
    [
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square"
    ],
    [
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle"
    ],
    [
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "blue_square"
    ],
    [
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "blue_square"
    ]
  ],
  "hints": [
    {
      "type": "equal",
      "cell1": [
        5,
        2
      ],
      "cell2": [
        5,
        3
      ]
    },
    {
      "type": "equal",
      "cell1": [
        1,
        2
      ],
      "cell2": [
        1,
        3
      ]
    },
    {
      "type": "equal",
      "cell1": [
        7,
        2
      ],
      "cell2": [
        7,
        3
      ]
    },
    {
      "type": "equal",
      "cell1": [
        2,
        5
      ],
      "cell2": [
        2,
        6
      ]
    },
    {
      "type": "equal",
      "cell1": [
        9,
        2
      ],
      "cell2": [
        9,
        3
      ]
    },
    {
      "type": "equal",
      "cell1": [
        3,
        6
      ],
      "cell2": [
        3,
        7
      ]
    },
    {
      "type": "equal",
      "cell1": [
        5,
        6
      ],
      "cell2": [
        5,
        7
      ]
    },
    {
      "type": "equal",
      "cell1": [
        3,
        8
      ],
      "cell2": [
        3,
        9
      ]
    },
    {
      "type": "equal",
      "cell1": [
        0,
        3
      ],
      "cell2": [
        0,
        4
      ]
    },
    {
      "type": "equal",
      "cell1": [
        0,
        9
      ],
      "cell2": [
        1,
        9
      ]
    },
    {
      "type": "equal",
      "cell1": [
        8,
        0
      ],
      "cell2": [
        8,
        1
      ]
    },
    {
      "type": "equal",
      "cell1": [
        4,
        7
      ],
      "cell2": [
        4,
        8
      ]
    },
    {
      "type": "equal",
      "cell1": [
        8,
        8
      ],
      "cell2": [
        8,
        9
      ]
    },
    {
      "type": "equal",
      "cell1": [
        1,
        7
      ],
      "cell2": [
        2,
        7
      ]
    },
    {
      "type": "equal",
      "cell1": [
        8,
        2
      ],
      "cell2": [
        9,
        2
      ]
    },
    {
      "type": "equal",
      "cell1": [
        8,
        3
      ],
      "cell2": [
        9,
        3
      ]
    },
    {
      "type": "equal",
      "cell1": [
        1,
        6
      ],
      "cell2": [
        1,
        7
      ]
    },
    {
      "type": "equal",
      "cell1": [
        9,
        4
      ],
      "cell2": [
        9,
        5
      ]
    },
    {
      "type": "equal",
      "cell1": [
        7,
        6
      ],
      "cell2": [
        7,
        7
      ]
    },
    {
      "type": "equal",
      "cell1": [
        8,
        4
      ],
      "cell2": [
        9,
        4
      ]
    },
    {
      "type": "equal",
      "cell1": [
        1,
        3
      ],
      "cell2": [
        2,
        3
      ]
    },
    {
      "type": "equal",
      "cell1": [
        8,
        9
      ],
      "cell2": [
        9,
        9
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        6,
        6
      ],
      "cell2": [
        6,
        7
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        7,
        7
      ],
      "cell2": [
        7,
        8
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        3,
        1
      ],
      "cell2": [
        4,
        1
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        5,
        4
      ],
      "cell2": [
        6,
        4
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        2,
        7
      ],
      "cell2": [
        2,
        8
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        3,
        8
      ],
      "cell2": [
        4,
        8
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        4,
        5
      ],
      "cell2": [
        5,
        5
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        4,
        2
      ],
      "cell2": [
        4,
        3
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        3,
        5
      ],
      "cell2": [
        3,
        6
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        2,
        5
      ],
      "cell2": [
        3,
        5
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        7,
        3
      ],
      "cell2": [
        7,
        4
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        7,
        2
      ],
      "cell2": [
        8,
        2
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        7,
        3
      ],
      "cell2": [
        8,
        3
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        4,
        7
      ],
      "cell2": [
        5,
        7
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        3,
        3
      ],
      "cell2": [
        4,
        3
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        7,
        8
      ],
      "cell2": [
        8,
        8
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        8,
        6
      ],
      "cell2": [
        9,
        6
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        7,
        5
      ],
      "cell2": [
        7,
        6
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        5,
        0
      ],
      "cell2": [
        5,
        1
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        7,
        7
      ],
      "cell2": [
        8,
        7
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        0,
        1
      ],
      "cell2": [
        0,
        2
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        6,
        1
      ],
      "cell2": [
        6,
        2
      ]
    }
  ],
  "theme": "color",
  "metadata": {
    "attempt": 138,
    "total_locks": 2,
    "equal_hints": 22,
    "notequal_hints": 22,
    "unique_checked": false,
    "solutions": null,
    "logic_steps": 98,
    "trace_len": 98
  }
}\n\n===== FILE 41/160: assets/data/stage1/level_46.json =====\n{
  "level": 31,
  "difficulty": "normal",
  "size": 12,
  "puzzle": [
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "yellow_triangle",
        "locked": true
      }
    ],
    [
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "yellow_triangle",
        "locked": true
      }
    ]
  ],
  "solution": [
    [
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "blue_square"
    ],
    [
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle"
    ],
    [
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle"
    ],
    [
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square"
    ],
    [
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "blue_square"
    ],
    [
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle"
    ],
    [
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "blue_square"
    ],
    [
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "blue_square"
    ],
    [
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle"
    ],
    [
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle"
    ],
    [
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "blue_square"
    ],
    [
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle"
    ]
  ],
  "hints": [
    {
      "type": "equal",
      "cell1": [
        1,
        5
      ],
      "cell2": [
        1,
        6
      ]
    },
    {
      "type": "equal",
      "cell1": [
        7,
        2
      ],
      "cell2": [
        8,
        2
      ]
    },
    {
      "type": "equal",
      "cell1": [
        7,
        8
      ],
      "cell2": [
        7,
        9
      ]
    },
    {
      "type": "equal",
      "cell1": [
        2,
        4
      ],
      "cell2": [
        2,
        5
      ]
    },
    {
      "type": "equal",
      "cell1": [
        8,
        11
      ],
      "cell2": [
        9,
        11
      ]
    },
    {
      "type": "equal",
      "cell1": [
        2,
        9
      ],
      "cell2": [
        3,
        9
      ]
    },
    {
      "type": "equal",
      "cell1": [
        11,
        7
      ],
      "cell2": [
        11,
        8
      ]
    },
    {
      "type": "equal",
      "cell1": [
        1,
        11
      ],
      "cell2": [
        2,
        11
      ]
    },
    {
      "type": "equal",
      "cell1": [
        3,
        2
      ],
      "cell2": [
        3,
        3
      ]
    },
    {
      "type": "equal",
      "cell1": [
        4,
        5
      ],
      "cell2": [
        5,
        5
      ]
    },
    {
      "type": "equal",
      "cell1": [
        1,
        2
      ],
      "cell2": [
        2,
        2
      ]
    },
    {
      "type": "equal",
      "cell1": [
        4,
        4
      ],
      "cell2": [
        4,
        5
      ]
    },
    {
      "type": "equal",
      "cell1": [
        9,
        8
      ],
      "cell2": [
        9,
        9
      ]
    },
    {
      "type": "equal",
      "cell1": [
        5,
        6
      ],
      "cell2": [
        6,
        6
      ]
    },
    {
      "type": "equal",
      "cell1": [
        5,
        10
      ],
      "cell2": [
        5,
        11
      ]
    },
    {
      "type": "equal",
      "cell1": [
        5,
        10
      ],
      "cell2": [
        6,
        10
      ]
    },
    {
      "type": "equal",
      "cell1": [
        0,
        10
      ],
      "cell2": [
        1,
        10
      ]
    },
    {
      "type": "equal",
      "cell1": [
        7,
        10
      ],
      "cell2": [
        7,
        11
      ]
    },
    {
      "type": "equal",
      "cell1": [
        7,
        3
      ],
      "cell2": [
        8,
        3
      ]
    },
    {
      "type": "equal",
      "cell1": [
        0,
        6
      ],
      "cell2": [
        0,
        7
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        5,
        4
      ],
      "cell2": [
        5,
        5
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        11,
        2
      ],
      "cell2": [
        11,
        3
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        4,
        6
      ],
      "cell2": [
        4,
        7
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        2,
        11
      ],
      "cell2": [
        3,
        11
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        3,
        10
      ],
      "cell2": [
        4,
        10
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        2,
        1
      ],
      "cell2": [
        2,
        2
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        1,
        0
      ],
      "cell2": [
        1,
        1
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        8,
        1
      ],
      "cell2": [
        8,
        2
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        9,
        6
      ],
      "cell2": [
        10,
        6
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        1,
        4
      ],
      "cell2": [
        1,
        5
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        8,
        2
      ],
      "cell2": [
        9,
        2
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        10,
        3
      ],
      "cell2": [
        11,
        3
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        3,
        6
      ],
      "cell2": [
        4,
        6
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        8,
        9
      ],
      "cell2": [
        8,
        10
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        4,
        8
      ],
      "cell2": [
        5,
        8
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        5,
        1
      ],
      "cell2": [
        5,
        2
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        10,
        4
      ],
      "cell2": [
        11,
        4
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        1,
        0
      ],
      "cell2": [
        2,
        0
      ]
    }
  ],
  "theme": "color",
  "metadata": {
    "attempt": 7,
    "total_locks": 37,
    "equal_hints": 20,
    "notequal_hints": 18,
    "unique_checked": false,
    "solutions": null,
    "logic_steps": 107,
    "trace_len": 107
  }
}\n\n===== FILE 42/160: assets/data/stage1/level_47.json =====\n{
  "level": 32,
  "difficulty": "normal",
  "size": 12,
  "puzzle": [
    [
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ]
  ],
  "solution": [
    [
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle"
    ],
    [
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square"
    ],
    [
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "blue_square"
    ],
    [
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle"
    ],
    [
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle"
    ],
    [
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square"
    ],
    [
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle"
    ],
    [
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle"
    ],
    [
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square"
    ],
    [
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "blue_square"
    ],
    [
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle"
    ],
    [
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square"
    ]
  ],
  "hints": [
    {
      "type": "equal",
      "cell1": [
        6,
        8
      ],
      "cell2": [
        7,
        8
      ]
    },
    {
      "type": "equal",
      "cell1": [
        7,
        7
      ],
      "cell2": [
        7,
        8
      ]
    },
    {
      "type": "equal",
      "cell1": [
        11,
        2
      ],
      "cell2": [
        11,
        3
      ]
    },
    {
      "type": "equal",
      "cell1": [
        1,
        0
      ],
      "cell2": [
        1,
        1
      ]
    },
    {
      "type": "equal",
      "cell1": [
        2,
        6
      ],
      "cell2": [
        2,
        7
      ]
    },
    {
      "type": "equal",
      "cell1": [
        0,
        6
      ],
      "cell2": [
        1,
        6
      ]
    },
    {
      "type": "equal",
      "cell1": [
        6,
        3
      ],
      "cell2": [
        6,
        4
      ]
    },
    {
      "type": "equal",
      "cell1": [
        11,
        4
      ],
      "cell2": [
        11,
        5
      ]
    },
    {
      "type": "equal",
      "cell1": [
        8,
        5
      ],
      "cell2": [
        9,
        5
      ]
    },
    {
      "type": "equal",
      "cell1": [
        10,
        3
      ],
      "cell2": [
        10,
        4
      ]
    },
    {
      "type": "equal",
      "cell1": [
        10,
        5
      ],
      "cell2": [
        11,
        5
      ]
    },
    {
      "type": "equal",
      "cell1": [
        9,
        9
      ],
      "cell2": [
        10,
        9
      ]
    },
    {
      "type": "equal",
      "cell1": [
        4,
        8
      ],
      "cell2": [
        5,
        8
      ]
    },
    {
      "type": "equal",
      "cell1": [
        0,
        3
      ],
      "cell2": [
        1,
        3
      ]
    },
    {
      "type": "equal",
      "cell1": [
        8,
        11
      ],
      "cell2": [
        9,
        11
      ]
    },
    {
      "type": "equal",
      "cell1": [
        6,
        9
      ],
      "cell2": [
        7,
        9
      ]
    },
    {
      "type": "equal",
      "cell1": [
        10,
        1
      ],
      "cell2": [
        11,
        1
      ]
    },
    {
      "type": "equal",
      "cell1": [
        2,
        9
      ],
      "cell2": [
        3,
        9
      ]
    },
    {
      "type": "equal",
      "cell1": [
        8,
        10
      ],
      "cell2": [
        9,
        10
      ]
    },
    {
      "type": "equal",
      "cell1": [
        0,
        1
      ],
      "cell2": [
        0,
        2
      ]
    },
    {
      "type": "equal",
      "cell1": [
        7,
        5
      ],
      "cell2": [
        7,
        6
      ]
    },
    {
      "type": "equal",
      "cell1": [
        7,
        3
      ],
      "cell2": [
        8,
        3
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        6,
        1
      ],
      "cell2": [
        6,
        2
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        4,
        1
      ],
      "cell2": [
        4,
        2
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        3,
        5
      ],
      "cell2": [
        3,
        6
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        10,
        10
      ],
      "cell2": [
        10,
        11
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        3,
        6
      ],
      "cell2": [
        4,
        6
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        2,
        3
      ],
      "cell2": [
        2,
        4
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        5,
        10
      ],
      "cell2": [
        5,
        11
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        3,
        2
      ],
      "cell2": [
        3,
        3
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        10,
        8
      ],
      "cell2": [
        10,
        9
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        1,
        9
      ],
      "cell2": [
        1,
        10
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        9,
        3
      ],
      "cell2": [
        9,
        4
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        8,
        10
      ],
      "cell2": [
        8,
        11
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        10,
        9
      ],
      "cell2": [
        11,
        9
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        2,
        1
      ],
      "cell2": [
        3,
        1
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        1,
        3
      ],
      "cell2": [
        1,
        4
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        3,
        8
      ],
      "cell2": [
        4,
        8
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        9,
        0
      ],
      "cell2": [
        10,
        0
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        11,
        10
      ],
      "cell2": [
        11,
        11
      ]
    }
  ],
  "theme": "color",
  "metadata": {
    "attempt": 21,
    "total_locks": 34,
    "equal_hints": 22,
    "notequal_hints": 18,
    "unique_checked": false,
    "solutions": null,
    "logic_steps": 110,
    "trace_len": 110
  }
}\n\n===== FILE 43/160: assets/data/stage1/level_48.json =====\n{
  "level": 33,
  "difficulty": "normal",
  "size": 12,
  "puzzle": [
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ]
  ],
  "solution": [
    [
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle"
    ],
    [
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle"
    ],
    [
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square"
    ],
    [
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "blue_square"
    ],
    [
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle"
    ],
    [
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle"
    ],
    [
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "blue_square"
    ],
    [
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle"
    ],
    [
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "blue_square"
    ],
    [
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "blue_square"
    ],
    [
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle"
    ],
    [
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square"
    ]
  ],
  "hints": [
    {
      "type": "equal",
      "cell1": [
        9,
        1
      ],
      "cell2": [
        10,
        1
      ]
    },
    {
      "type": "equal",
      "cell1": [
        0,
        4
      ],
      "cell2": [
        0,
        5
      ]
    },
    {
      "type": "equal",
      "cell1": [
        4,
        9
      ],
      "cell2": [
        5,
        9
      ]
    },
    {
      "type": "equal",
      "cell1": [
        9,
        0
      ],
      "cell2": [
        9,
        1
      ]
    },
    {
      "type": "equal",
      "cell1": [
        4,
        8
      ],
      "cell2": [
        4,
        9
      ]
    },
    {
      "type": "equal",
      "cell1": [
        1,
        4
      ],
      "cell2": [
        1,
        5
      ]
    },
    {
      "type": "equal",
      "cell1": [
        8,
        4
      ],
      "cell2": [
        8,
        5
      ]
    },
    {
      "type": "equal",
      "cell1": [
        0,
        8
      ],
      "cell2": [
        0,
        9
      ]
    },
    {
      "type": "equal",
      "cell1": [
        9,
        10
      ],
      "cell2": [
        10,
        10
      ]
    },
    {
      "type": "equal",
      "cell1": [
        8,
        6
      ],
      "cell2": [
        8,
        7
      ]
    },
    {
      "type": "equal",
      "cell1": [
        2,
        11
      ],
      "cell2": [
        3,
        11
      ]
    },
    {
      "type": "equal",
      "cell1": [
        1,
        6
      ],
      "cell2": [
        2,
        6
      ]
    },
    {
      "type": "equal",
      "cell1": [
        1,
        9
      ],
      "cell2": [
        1,
        10
      ]
    },
    {
      "type": "equal",
      "cell1": [
        4,
        10
      ],
      "cell2": [
        4,
        11
      ]
    },
    {
      "type": "equal",
      "cell1": [
        5,
        0
      ],
      "cell2": [
        6,
        0
      ]
    },
    {
      "type": "equal",
      "cell1": [
        0,
        0
      ],
      "cell2": [
        1,
        0
      ]
    },
    {
      "type": "equal",
      "cell1": [
        4,
        10
      ],
      "cell2": [
        5,
        10
      ]
    },
    {
      "type": "equal",
      "cell1": [
        2,
        1
      ],
      "cell2": [
        3,
        1
      ]
    },
    {
      "type": "equal",
      "cell1": [
        10,
        1
      ],
      "cell2": [
        10,
        2
      ]
    },
    {
      "type": "equal",
      "cell1": [
        7,
        2
      ],
      "cell2": [
        7,
        3
      ]
    },
    {
      "type": "equal",
      "cell1": [
        6,
        3
      ],
      "cell2": [
        6,
        4
      ]
    },
    {
      "type": "equal",
      "cell1": [
        10,
        3
      ],
      "cell2": [
        11,
        3
      ]
    },
    {
      "type": "equal",
      "cell1": [
        4,
        7
      ],
      "cell2": [
        5,
        7
      ]
    },
    {
      "type": "equal",
      "cell1": [
        6,
        8
      ],
      "cell2": [
        7,
        8
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        7,
        9
      ],
      "cell2": [
        8,
        9
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        2,
        7
      ],
      "cell2": [
        3,
        7
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        1,
        10
      ],
      "cell2": [
        2,
        10
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        7,
        11
      ],
      "cell2": [
        8,
        11
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        8,
        8
      ],
      "cell2": [
        9,
        8
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        1,
        8
      ],
      "cell2": [
        1,
        9
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        7,
        3
      ],
      "cell2": [
        8,
        3
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        11,
        1
      ],
      "cell2": [
        11,
        2
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        10,
        7
      ],
      "cell2": [
        11,
        7
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        9,
        2
      ],
      "cell2": [
        9,
        3
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        2,
        8
      ],
      "cell2": [
        2,
        9
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        6,
        1
      ],
      "cell2": [
        7,
        1
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        3,
        3
      ],
      "cell2": [
        4,
        3
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        6,
        0
      ],
      "cell2": [
        6,
        1
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        3,
        8
      ],
      "cell2": [
        4,
        8
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        4,
        1
      ],
      "cell2": [
        4,
        2
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        10,
        6
      ],
      "cell2": [
        10,
        7
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        9,
        1
      ],
      "cell2": [
        9,
        2
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        2,
        0
      ],
      "cell2": [
        3,
        0
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        4,
        3
      ],
      "cell2": [
        4,
        4
      ]
    }
  ],
  "theme": "color",
  "metadata": {
    "attempt": 7,
    "total_locks": 30,
    "equal_hints": 24,
    "notequal_hints": 20,
    "unique_checked": false,
    "solutions": null,
    "logic_steps": 114,
    "trace_len": 114
  }
}\n\n===== FILE 44/160: assets/data/stage1/level_49.json =====\n{
  "level": 34,
  "difficulty": "normal",
  "size": 12,
  "puzzle": [
    [
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "blue_square",
        "locked": true
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      }
    ],
    [
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ]
  ],
  "solution": [
    [
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle"
    ],
    [
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "blue_square"
    ],
    [
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle"
    ],
    [
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle"
    ],
    [
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "blue_square"
    ],
    [
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "blue_square"
    ],
    [
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle"
    ],
    [
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "blue_square"
    ],
    [
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle"
    ],
    [
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square"
    ],
    [
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle"
    ],
    [
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "blue_square"
    ]
  ],
  "hints": [
    {
      "type": "equal",
      "cell1": [
        10,
        5
      ],
      "cell2": [
        10,
        6
      ]
    },
    {
      "type": "equal",
      "cell1": [
        7,
        3
      ],
      "cell2": [
        8,
        3
      ]
    },
    {
      "type": "equal",
      "cell1": [
        10,
        2
      ],
      "cell2": [
        11,
        2
      ]
    },
    {
      "type": "equal",
      "cell1": [
        4,
        8
      ],
      "cell2": [
        4,
        9
      ]
    },
    {
      "type": "equal",
      "cell1": [
        6,
        5
      ],
      "cell2": [
        7,
        5
      ]
    },
    {
      "type": "equal",
      "cell1": [
        8,
        10
      ],
      "cell2": [
        9,
        10
      ]
    },
    {
      "type": "equal",
      "cell1": [
        0,
        1
      ],
      "cell2": [
        1,
        1
      ]
    },
    {
      "type": "equal",
      "cell1": [
        5,
        7
      ],
      "cell2": [
        6,
        7
      ]
    },
    {
      "type": "equal",
      "cell1": [
        10,
        9
      ],
      "cell2": [
        11,
        9
      ]
    },
    {
      "type": "equal",
      "cell1": [
        9,
        1
      ],
      "cell2": [
        9,
        2
      ]
    },
    {
      "type": "equal",
      "cell1": [
        8,
        9
      ],
      "cell2": [
        9,
        9
      ]
    },
    {
      "type": "equal",
      "cell1": [
        3,
        6
      ],
      "cell2": [
        3,
        7
      ]
    },
    {
      "type": "equal",
      "cell1": [
        1,
        4
      ],
      "cell2": [
        2,
        4
      ]
    },
    {
      "type": "equal",
      "cell1": [
        4,
        10
      ],
      "cell2": [
        5,
        10
      ]
    },
    {
      "type": "equal",
      "cell1": [
        0,
        6
      ],
      "cell2": [
        0,
        7
      ]
    },
    {
      "type": "equal",
      "cell1": [
        6,
        8
      ],
      "cell2": [
        6,
        9
      ]
    },
    {
      "type": "equal",
      "cell1": [
        5,
        5
      ],
      "cell2": [
        5,
        6
      ]
    },
    {
      "type": "equal",
      "cell1": [
        4,
        0
      ],
      "cell2": [
        5,
        0
      ]
    },
    {
      "type": "equal",
      "cell1": [
        9,
        1
      ],
      "cell2": [
        10,
        1
      ]
    },
    {
      "type": "equal",
      "cell1": [
        7,
        3
      ],
      "cell2": [
        7,
        4
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        9,
        6
      ],
      "cell2": [
        10,
        6
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        0,
        10
      ],
      "cell2": [
        1,
        10
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        8,
        3
      ],
      "cell2": [
        8,
        4
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        4,
        9
      ],
      "cell2": [
        4,
        10
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        9,
        9
      ],
      "cell2": [
        10,
        9
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        7,
        7
      ],
      "cell2": [
        7,
        8
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        5,
        5
      ],
      "cell2": [
        6,
        5
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        6,
        9
      ],
      "cell2": [
        7,
        9
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        6,
        6
      ],
      "cell2": [
        6,
        7
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        6,
        3
      ],
      "cell2": [
        7,
        3
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        2,
        7
      ],
      "cell2": [
        3,
        7
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        11,
        5
      ],
      "cell2": [
        11,
        6
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        9,
        5
      ],
      "cell2": [
        9,
        6
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        9,
        3
      ],
      "cell2": [
        10,
        3
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        6,
        6
      ],
      "cell2": [
        7,
        6
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        3,
        8
      ],
      "cell2": [
        3,
        9
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        10,
        11
      ],
      "cell2": [
        11,
        11
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        2,
        3
      ],
      "cell2": [
        2,
        4
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        1,
        2
      ],
      "cell2": [
        2,
        2
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        0,
        8
      ],
      "cell2": [
        1,
        8
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        3,
        11
      ],
      "cell2": [
        4,
        11
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        10,
        7
      ],
      "cell2": [
        11,
        7
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        9,
        10
      ],
      "cell2": [
        10,
        10
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        2,
        8
      ],
      "cell2": [
        3,
        8
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        6,
        11
      ],
      "cell2": [
        7,
        11
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        0,
        11
      ],
      "cell2": [
        1,
        11
      ]
    }
  ],
  "theme": "color",
  "metadata": {
    "attempt": 13,
    "total_locks": 34,
    "equal_hints": 20,
    "notequal_hints": 26,
    "unique_checked": false,
    "solutions": null,
    "logic_steps": 110,
    "trace_len": 110
  }
}\n\n===== FILE 45/160: assets/data/stage1/level_5.json =====\n{
  "level": 5,
  "difficulty": "normal",
  "size": 6,
  "puzzle": [
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      }
    ],
    [
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      }
    ]
  ],
  "solution": [
    [
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square"
    ],
    [
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "blue_square"
    ],
    [
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle"
    ],
    [
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle"
    ],
    [
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "blue_square"
    ],
    [
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle"
    ]
  ],
  "hints": [
    {
      "type": "equal",
      "cell1": [
        3,
        4
      ],
      "cell2": [
        4,
        4
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        1,
        1
      ],
      "cell2": [
        1,
        2
      ]
    }
  ],
  "theme": "color",
  "metadata": {
    "attempt": 490,
    "total_locks": 9,
    "equal_hints": 1,
    "notequal_hints": 1,
    "unique_checked": false,
    "solutions": null,
    "logic_steps": 27,
    "trace_len": 27
  }
}\n\n===== FILE 46/160: assets/data/stage1/level_50.json =====\n{
  "level": 35,
  "difficulty": "normal",
  "size": 12,
  "puzzle": [
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      }
    ],
    [
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "blue_square",
        "locked": true
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      }
    ],
    [
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ]
  ],
  "solution": [
    [
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square"
    ],
    [
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle"
    ],
    [
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle"
    ],
    [
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "blue_square"
    ],
    [
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle"
    ],
    [
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "blue_square"
    ],
    [
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "blue_square"
    ],
    [
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle"
    ],
    [
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle"
    ],
    [
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "blue_square"
    ],
    [
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "blue_square"
    ],
    [
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle"
    ]
  ],
  "hints": [
    {
      "type": "equal",
      "cell1": [
        4,
        1
      ],
      "cell2": [
        5,
        1
      ]
    },
    {
      "type": "equal",
      "cell1": [
        1,
        1
      ],
      "cell2": [
        1,
        2
      ]
    },
    {
      "type": "equal",
      "cell1": [
        0,
        10
      ],
      "cell2": [
        1,
        10
      ]
    },
    {
      "type": "equal",
      "cell1": [
        3,
        3
      ],
      "cell2": [
        3,
        4
      ]
    },
    {
      "type": "equal",
      "cell1": [
        2,
        6
      ],
      "cell2": [
        3,
        6
      ]
    },
    {
      "type": "equal",
      "cell1": [
        8,
        7
      ],
      "cell2": [
        8,
        8
      ]
    },
    {
      "type": "equal",
      "cell1": [
        7,
        5
      ],
      "cell2": [
        7,
        6
      ]
    },
    {
      "type": "equal",
      "cell1": [
        0,
        4
      ],
      "cell2": [
        0,
        5
      ]
    },
    {
      "type": "equal",
      "cell1": [
        0,
        1
      ],
      "cell2": [
        0,
        2
      ]
    },
    {
      "type": "equal",
      "cell1": [
        5,
        8
      ],
      "cell2": [
        6,
        8
      ]
    },
    {
      "type": "equal",
      "cell1": [
        2,
        6
      ],
      "cell2": [
        2,
        7
      ]
    },
    {
      "type": "equal",
      "cell1": [
        11,
        0
      ],
      "cell2": [
        11,
        1
      ]
    },
    {
      "type": "equal",
      "cell1": [
        4,
        3
      ],
      "cell2": [
        4,
        4
      ]
    },
    {
      "type": "equal",
      "cell1": [
        5,
        0
      ],
      "cell2": [
        5,
        1
      ]
    },
    {
      "type": "equal",
      "cell1": [
        8,
        1
      ],
      "cell2": [
        9,
        1
      ]
    },
    {
      "type": "equal",
      "cell1": [
        6,
        2
      ],
      "cell2": [
        6,
        3
      ]
    },
    {
      "type": "equal",
      "cell1": [
        11,
        4
      ],
      "cell2": [
        11,
        5
      ]
    },
    {
      "type": "equal",
      "cell1": [
        7,
        8
      ],
      "cell2": [
        8,
        8
      ]
    },
    {
      "type": "equal",
      "cell1": [
        4,
        7
      ],
      "cell2": [
        5,
        7
      ]
    },
    {
      "type": "equal",
      "cell1": [
        4,
        10
      ],
      "cell2": [
        5,
        10
      ]
    },
    {
      "type": "equal",
      "cell1": [
        5,
        11
      ],
      "cell2": [
        6,
        11
      ]
    },
    {
      "type": "equal",
      "cell1": [
        0,
        4
      ],
      "cell2": [
        1,
        4
      ]
    },
    {
      "type": "equal",
      "cell1": [
        8,
        5
      ],
      "cell2": [
        8,
        6
      ]
    },
    {
      "type": "equal",
      "cell1": [
        7,
        10
      ],
      "cell2": [
        8,
        10
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        9,
        10
      ],
      "cell2": [
        9,
        11
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        10,
        2
      ],
      "cell2": [
        10,
        3
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        4,
        5
      ],
      "cell2": [
        4,
        6
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        10,
        3
      ],
      "cell2": [
        10,
        4
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        0,
        7
      ],
      "cell2": [
        0,
        8
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        3,
        11
      ],
      "cell2": [
        4,
        11
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        3,
        5
      ],
      "cell2": [
        3,
        6
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        3,
        2
      ],
      "cell2": [
        3,
        3
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        6,
        6
      ],
      "cell2": [
        6,
        7
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        10,
        0
      ],
      "cell2": [
        11,
        0
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        5,
        6
      ],
      "cell2": [
        6,
        6
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        3,
        7
      ],
      "cell2": [
        3,
        8
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        0,
        11
      ],
      "cell2": [
        1,
        11
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        0,
        2
      ],
      "cell2": [
        1,
        2
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        5,
        4
      ],
      "cell2": [
        5,
        5
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        2,
        3
      ],
      "cell2": [
        2,
        4
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        2,
        10
      ],
      "cell2": [
        3,
        10
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        7,
        9
      ],
      "cell2": [
        7,
        10
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        2,
        7
      ],
      "cell2": [
        2,
        8
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        7,
        4
      ],
      "cell2": [
        7,
        5
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        1,
        9
      ],
      "cell2": [
        2,
        9
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        5,
        7
      ],
      "cell2": [
        6,
        7
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        3,
        0
      ],
      "cell2": [
        4,
        0
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        6,
        10
      ],
      "cell2": [
        6,
        11
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        8,
        8
      ],
      "cell2": [
        8,
        9
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        5,
        10
      ],
      "cell2": [
        6,
        10
      ]
    }
  ],
  "theme": "color",
  "metadata": {
    "attempt": 33,
    "total_locks": 30,
    "equal_hints": 24,
    "notequal_hints": 26,
    "unique_checked": false,
    "solutions": null,
    "logic_steps": 114,
    "trace_len": 114
  }
}\n\n===== FILE 47/160: assets/data/stage1/level_6.json =====\n{
  "level": 6,
  "difficulty": "normal",
  "size": 6,
  "puzzle": [
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ]
  ],
  "solution": [
    [
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle"
    ],
    [
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle"
    ],
    [
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "blue_square"
    ],
    [
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square"
    ],
    [
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle"
    ],
    [
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square"
    ]
  ],
  "hints": [
    {
      "type": "equal",
      "cell1": [
        2,
        4
      ],
      "cell2": [
        2,
        5
      ]
    },
    {
      "type": "equal",
      "cell1": [
        2,
        5
      ],
      "cell2": [
        3,
        5
      ]
    },
    {
      "type": "equal",
      "cell1": [
        0,
        0
      ],
      "cell2": [
        1,
        0
      ]
    },
    {
      "type": "equal",
      "cell1": [
        1,
        2
      ],
      "cell2": [
        1,
        3
      ]
    },
    {
      "type": "equal",
      "cell1": [
        2,
        0
      ],
      "cell2": [
        3,
        0
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        4,
        2
      ],
      "cell2": [
        4,
        3
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        4,
        0
      ],
      "cell2": [
        4,
        1
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        1,
        5
      ],
      "cell2": [
        2,
        5
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        5,
        2
      ],
      "cell2": [
        5,
        3
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        1,
        4
      ],
      "cell2": [
        2,
        4
      ]
    }
  ],
  "theme": "color",
  "metadata": {
    "attempt": 28,
    "total_locks": 5,
    "equal_hints": 5,
    "notequal_hints": 5,
    "unique_checked": false,
    "solutions": null,
    "logic_steps": 31,
    "trace_len": 31
  }
}\n\n===== FILE 48/160: assets/data/stage1/level_7.json =====\n{
  "level": 7,
  "difficulty": "normal",
  "size": 6,
  "puzzle": [
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ]
  ],
  "solution": [
    [
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square"
    ],
    [
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "blue_square"
    ],
    [
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle"
    ],
    [
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle"
    ],
    [
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square"
    ],
    [
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle"
    ]
  ],
  "hints": [
    {
      "type": "equal",
      "cell1": [
        3,
        0
      ],
      "cell2": [
        3,
        1
      ]
    },
    {
      "type": "equal",
      "cell1": [
        1,
        0
      ],
      "cell2": [
        2,
        0
      ]
    },
    {
      "type": "equal",
      "cell1": [
        1,
        2
      ],
      "cell2": [
        2,
        2
      ]
    },
    {
      "type": "equal",
      "cell1": [
        3,
        0
      ],
      "cell2": [
        4,
        0
      ]
    },
    {
      "type": "equal",
      "cell1": [
        1,
        3
      ],
      "cell2": [
        2,
        3
      ]
    },
    {
      "type": "equal",
      "cell1": [
        1,
        4
      ],
      "cell2": [
        2,
        4
      ]
    },
    {
      "type": "equal",
      "cell1": [
        3,
        4
      ],
      "cell2": [
        3,
        5
      ]
    },
    {
      "type": "equal",
      "cell1": [
        3,
        4
      ],
      "cell2": [
        4,
        4
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        4,
        0
      ],
      "cell2": [
        5,
        0
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        4,
        4
      ],
      "cell2": [
        4,
        5
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        5,
        0
      ],
      "cell2": [
        5,
        1
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        0,
        0
      ],
      "cell2": [
        0,
        1
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        5,
        2
      ],
      "cell2": [
        5,
        3
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        0,
        0
      ],
      "cell2": [
        1,
        0
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        3,
        2
      ],
      "cell2": [
        4,
        2
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        2,
        0
      ],
      "cell2": [
        2,
        1
      ]
    }
  ],
  "theme": "color",
  "metadata": {
    "attempt": 39,
    "total_locks": 1,
    "equal_hints": 8,
    "notequal_hints": 8,
    "unique_checked": false,
    "solutions": null,
    "logic_steps": 35,
    "trace_len": 35
  }
}\n\n===== FILE 49/160: assets/data/stage1/level_8.json =====\n{
  "level": 8,
  "difficulty": "normal",
  "size": 6,
  "puzzle": [
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "blue_square",
        "locked": true
      }
    ],
    [
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ]
  ],
  "solution": [
    [
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "blue_square"
    ],
    [
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "blue_square"
    ],
    [
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle"
    ],
    [
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle"
    ],
    [
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square"
    ],
    [
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle"
    ]
  ],
  "hints": [
    {
      "type": "equal",
      "cell1": [
        2,
        5
      ],
      "cell2": [
        3,
        5
      ]
    },
    {
      "type": "equal",
      "cell1": [
        0,
        4
      ],
      "cell2": [
        0,
        5
      ]
    },
    {
      "type": "equal",
      "cell1": [
        1,
        2
      ],
      "cell2": [
        2,
        2
      ]
    }
  ],
  "theme": "color",
  "metadata": {
    "attempt": 109,
    "total_locks": 7,
    "equal_hints": 3,
    "notequal_hints": 0,
    "unique_checked": false,
    "solutions": null,
    "logic_steps": 29,
    "trace_len": 29
  }
}\n\n===== FILE 50/160: assets/data/stage1/level_9.json =====\n{
  "level": 9,
  "difficulty": "normal",
  "size": 6,
  "puzzle": [
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "yellow_triangle",
        "locked": true
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ]
  ],
  "solution": [
    [
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "blue_square"
    ],
    [
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle"
    ],
    [
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square"
    ],
    [
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle"
    ],
    [
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle"
    ],
    [
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "blue_square"
    ]
  ],
  "hints": [
    {
      "type": "equal",
      "cell1": [
        2,
        3
      ],
      "cell2": [
        3,
        3
      ]
    },
    {
      "type": "equal",
      "cell1": [
        3,
        1
      ],
      "cell2": [
        3,
        2
      ]
    },
    {
      "type": "equal",
      "cell1": [
        4,
        1
      ],
      "cell2": [
        5,
        1
      ]
    }
  ],
  "theme": "color",
  "metadata": {
    "attempt": 294,
    "total_locks": 6,
    "equal_hints": 3,
    "notequal_hints": 0,
    "unique_checked": false,
    "solutions": null,
    "logic_steps": 30,
    "trace_len": 30
  }
}\n\n===== FILE 51/160: assets/data/stage2/level_1.json =====\n{
  "level": 1,
  "difficulty": "normal",
  "size": 6,
  "puzzle": [
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "blue_square",
        "locked": true
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ]
  ],
  "solution": [
    [
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "blue_square"
    ],
    [
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle"
    ],
    [
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "blue_square"
    ],
    [
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square"
    ],
    [
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle"
    ],
    [
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle"
    ]
  ],
  "hints": [
    {
      "type": "equal",
      "cell1": [
        3,
        4
      ],
      "cell2": [
        4,
        4
      ]
    },
    {
      "type": "equal",
      "cell1": [
        2,
        3
      ],
      "cell2": [
        3,
        3
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        0,
        3
      ],
      "cell2": [
        1,
        3
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        1,
        1
      ],
      "cell2": [
        2,
        1
      ]
    }
  ],
  "theme": "color",
  "metadata": {
    "attempt": 16,
    "total_locks": 8,
    "equal_hints": 2,
    "notequal_hints": 2,
    "unique_checked": false,
    "solutions": null,
    "logic_steps": 28,
    "trace_len": 28
  }
}\n\n===== FILE 52/160: assets/data/stage2/level_10.json =====\n{
  "level": 10,
  "difficulty": "normal",
  "size": 6,
  "puzzle": [
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      }
    ],
    [
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ]
  ],
  "solution": [
    [
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle"
    ],
    [
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle"
    ],
    [
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "blue_square"
    ],
    [
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square"
    ],
    [
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle"
    ],
    [
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square"
    ]
  ],
  "hints": [
    {
      "type": "equal",
      "cell1": [
        1,
        4
      ],
      "cell2": [
        2,
        4
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        5,
        4
      ],
      "cell2": [
        5,
        5
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        4,
        1
      ],
      "cell2": [
        4,
        2
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        3,
        3
      ],
      "cell2": [
        3,
        4
      ]
    }
  ],
  "theme": "color",
  "metadata": {
    "attempt": 428,
    "total_locks": 7,
    "equal_hints": 1,
    "notequal_hints": 3,
    "unique_checked": false,
    "solutions": null,
    "logic_steps": 29,
    "trace_len": 29
  }
}\n\n===== FILE 53/160: assets/data/stage2/level_11.json =====\n{
  "level": 11,
  "difficulty": "normal",
  "size": 6,
  "puzzle": [
    [
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "blue_square",
        "locked": true
      }
    ],
    [
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      }
    ]
  ],
  "solution": [
    [
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle"
    ],
    [
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "blue_square"
    ],
    [
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square"
    ],
    [
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle"
    ],
    [
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square"
    ],
    [
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle"
    ]
  ],
  "hints": [],
  "theme": "color",
  "metadata": {
    "attempt": 64,
    "total_locks": 10,
    "equal_hints": 0,
    "notequal_hints": 0,
    "unique_checked": false,
    "solutions": null,
    "logic_steps": 26,
    "trace_len": 26
  }
}\n\n===== FILE 54/160: assets/data/stage2/level_12.json =====\n{
  "level": 12,
  "difficulty": "normal",
  "size": 6,
  "puzzle": [
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ]
  ],
  "solution": [
    [
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "blue_square"
    ],
    [
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle"
    ],
    [
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "blue_square"
    ],
    [
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle"
    ],
    [
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle"
    ],
    [
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square"
    ]
  ],
  "hints": [
    {
      "type": "equal",
      "cell1": [
        4,
        1
      ],
      "cell2": [
        4,
        2
      ]
    },
    {
      "type": "equal",
      "cell1": [
        2,
        0
      ],
      "cell2": [
        3,
        0
      ]
    },
    {
      "type": "equal",
      "cell1": [
        0,
        4
      ],
      "cell2": [
        0,
        5
      ]
    },
    {
      "type": "equal",
      "cell1": [
        4,
        3
      ],
      "cell2": [
        4,
        4
      ]
    },
    {
      "type": "equal",
      "cell1": [
        3,
        1
      ],
      "cell2": [
        3,
        2
      ]
    },
    {
      "type": "equal",
      "cell1": [
        0,
        1
      ],
      "cell2": [
        1,
        1
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        2,
        3
      ],
      "cell2": [
        2,
        4
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        1,
        3
      ],
      "cell2": [
        1,
        4
      ]
    }
  ],
  "theme": "color",
  "metadata": {
    "attempt": 18,
    "total_locks": 5,
    "equal_hints": 6,
    "notequal_hints": 2,
    "unique_checked": false,
    "solutions": null,
    "logic_steps": 31,
    "trace_len": 31
  }
}\n\n===== FILE 55/160: assets/data/stage2/level_13.json =====\n{
  "level": 13,
  "difficulty": "normal",
  "size": 6,
  "puzzle": [
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "yellow_triangle",
        "locked": true
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ]
  ],
  "solution": [
    [
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "blue_square"
    ],
    [
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square"
    ],
    [
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle"
    ],
    [
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "blue_square"
    ],
    [
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle"
    ],
    [
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle"
    ]
  ],
  "hints": [
    {
      "type": "equal",
      "cell1": [
        1,
        1
      ],
      "cell2": [
        1,
        2
      ]
    },
    {
      "type": "equal",
      "cell1": [
        3,
        4
      ],
      "cell2": [
        3,
        5
      ]
    },
    {
      "type": "equal",
      "cell1": [
        4,
        4
      ],
      "cell2": [
        4,
        5
      ]
    },
    {
      "type": "equal",
      "cell1": [
        1,
        2
      ],
      "cell2": [
        2,
        2
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        3,
        1
      ],
      "cell2": [
        4,
        1
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        1,
        5
      ],
      "cell2": [
        2,
        5
      ]
    }
  ],
  "theme": "color",
  "metadata": {
    "attempt": 34,
    "total_locks": 8,
    "equal_hints": 4,
    "notequal_hints": 2,
    "unique_checked": false,
    "solutions": null,
    "logic_steps": 28,
    "trace_len": 28
  }
}\n\n===== FILE 56/160: assets/data/stage2/level_14.json =====\n{
  "level": 11,
  "difficulty": "normal",
  "size": 8,
  "puzzle": [
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "yellow_triangle",
        "locked": true
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "blue_square",
        "locked": true
      }
    ],
    [
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      }
    ]
  ],
  "solution": [
    [
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "blue_square"
    ],
    [
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square"
    ],
    [
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle"
    ],
    [
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle"
    ],
    [
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square"
    ],
    [
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "blue_square"
    ],
    [
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle"
    ],
    [
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle"
    ]
  ],
  "hints": [
    {
      "type": "equal",
      "cell1": [
        2,
        1
      ],
      "cell2": [
        3,
        1
      ]
    },
    {
      "type": "equal",
      "cell1": [
        0,
        5
      ],
      "cell2": [
        1,
        5
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        3,
        6
      ],
      "cell2": [
        3,
        7
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        1,
        1
      ],
      "cell2": [
        2,
        1
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        4,
        3
      ],
      "cell2": [
        5,
        3
      ]
    }
  ],
  "theme": "color",
  "metadata": {
    "attempt": 221,
    "total_locks": 18,
    "equal_hints": 2,
    "notequal_hints": 3,
    "unique_checked": false,
    "solutions": null,
    "logic_steps": 46,
    "trace_len": 46
  }
}\n\n===== FILE 57/160: assets/data/stage2/level_15.json =====\n{
  "level": 12,
  "difficulty": "normal",
  "size": 8,
  "puzzle": [
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "blue_square",
        "locked": true
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ]
  ],
  "solution": [
    [
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle"
    ],
    [
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle"
    ],
    [
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square"
    ],
    [
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "blue_square"
    ],
    [
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle"
    ],
    [
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square"
    ],
    [
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle"
    ],
    [
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "blue_square"
    ]
  ],
  "hints": [
    {
      "type": "equal",
      "cell1": [
        2,
        1
      ],
      "cell2": [
        3,
        1
      ]
    },
    {
      "type": "equal",
      "cell1": [
        0,
        4
      ],
      "cell2": [
        0,
        5
      ]
    },
    {
      "type": "equal",
      "cell1": [
        4,
        0
      ],
      "cell2": [
        4,
        1
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        3,
        1
      ],
      "cell2": [
        3,
        2
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        2,
        4
      ],
      "cell2": [
        2,
        5
      ]
    }
  ],
  "theme": "color",
  "metadata": {
    "attempt": 253,
    "total_locks": 18,
    "equal_hints": 3,
    "notequal_hints": 2,
    "unique_checked": false,
    "solutions": null,
    "logic_steps": 46,
    "trace_len": 46
  }
}\n\n===== FILE 58/160: assets/data/stage2/level_16.json =====\n{
  "level": 13,
  "difficulty": "normal",
  "size": 8,
  "puzzle": [
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      }
    ]
  ],
  "solution": [
    [
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "blue_square"
    ],
    [
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle"
    ],
    [
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square"
    ],
    [
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle"
    ],
    [
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square"
    ],
    [
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "blue_square"
    ],
    [
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle"
    ],
    [
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle"
    ]
  ],
  "hints": [
    {
      "type": "equal",
      "cell1": [
        4,
        2
      ],
      "cell2": [
        5,
        2
      ]
    },
    {
      "type": "equal",
      "cell1": [
        0,
        5
      ],
      "cell2": [
        1,
        5
      ]
    },
    {
      "type": "equal",
      "cell1": [
        2,
        2
      ],
      "cell2": [
        3,
        2
      ]
    },
    {
      "type": "equal",
      "cell1": [
        4,
        6
      ],
      "cell2": [
        5,
        6
      ]
    },
    {
      "type": "equal",
      "cell1": [
        7,
        4
      ],
      "cell2": [
        7,
        5
      ]
    },
    {
      "type": "equal",
      "cell1": [
        2,
        3
      ],
      "cell2": [
        2,
        4
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        2,
        6
      ],
      "cell2": [
        3,
        6
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        7,
        2
      ],
      "cell2": [
        7,
        3
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        0,
        5
      ],
      "cell2": [
        0,
        6
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        6,
        6
      ],
      "cell2": [
        7,
        6
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        1,
        6
      ],
      "cell2": [
        2,
        6
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        3,
        7
      ],
      "cell2": [
        4,
        7
      ]
    }
  ],
  "theme": "color",
  "metadata": {
    "attempt": 395,
    "total_locks": 10,
    "equal_hints": 6,
    "notequal_hints": 6,
    "unique_checked": false,
    "solutions": null,
    "logic_steps": 54,
    "trace_len": 54
  }
}\n\n===== FILE 59/160: assets/data/stage2/level_17.json =====\n{
  "level": 14,
  "difficulty": "normal",
  "size": 8,
  "puzzle": [
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ]
  ],
  "solution": [
    [
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle"
    ],
    [
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle"
    ],
    [
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "blue_square"
    ],
    [
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square"
    ],
    [
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle"
    ],
    [
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square"
    ],
    [
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "blue_square"
    ],
    [
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle"
    ]
  ],
  "hints": [
    {
      "type": "equal",
      "cell1": [
        6,
        6
      ],
      "cell2": [
        7,
        6
      ]
    },
    {
      "type": "equal",
      "cell1": [
        4,
        3
      ],
      "cell2": [
        4,
        4
      ]
    },
    {
      "type": "equal",
      "cell1": [
        0,
        6
      ],
      "cell2": [
        0,
        7
      ]
    },
    {
      "type": "equal",
      "cell1": [
        5,
        0
      ],
      "cell2": [
        6,
        0
      ]
    },
    {
      "type": "equal",
      "cell1": [
        4,
        2
      ],
      "cell2": [
        5,
        2
      ]
    },
    {
      "type": "equal",
      "cell1": [
        6,
        2
      ],
      "cell2": [
        6,
        3
      ]
    },
    {
      "type": "equal",
      "cell1": [
        0,
        0
      ],
      "cell2": [
        1,
        0
      ]
    },
    {
      "type": "equal",
      "cell1": [
        2,
        5
      ],
      "cell2": [
        3,
        5
      ]
    },
    {
      "type": "equal",
      "cell1": [
        2,
        2
      ],
      "cell2": [
        2,
        3
      ]
    },
    {
      "type": "equal",
      "cell1": [
        6,
        5
      ],
      "cell2": [
        7,
        5
      ]
    },
    {
      "type": "equal",
      "cell1": [
        5,
        0
      ],
      "cell2": [
        5,
        1
      ]
    },
    {
      "type": "equal",
      "cell1": [
        0,
        2
      ],
      "cell2": [
        1,
        2
      ]
    },
    {
      "type": "equal",
      "cell1": [
        2,
        6
      ],
      "cell2": [
        2,
        7
      ]
    },
    {
      "type": "equal",
      "cell1": [
        0,
        0
      ],
      "cell2": [
        0,
        1
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        6,
        0
      ],
      "cell2": [
        6,
        1
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        0,
        2
      ],
      "cell2": [
        0,
        3
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        6,
        2
      ],
      "cell2": [
        7,
        2
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        5,
        4
      ],
      "cell2": [
        6,
        4
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        5,
        6
      ],
      "cell2": [
        6,
        6
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        5,
        1
      ],
      "cell2": [
        5,
        2
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        1,
        3
      ],
      "cell2": [
        2,
        3
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        3,
        0
      ],
      "cell2": [
        3,
        1
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        6,
        0
      ],
      "cell2": [
        7,
        0
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        2,
        1
      ],
      "cell2": [
        3,
        1
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        4,
        1
      ],
      "cell2": [
        4,
        2
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        5,
        4
      ],
      "cell2": [
        5,
        5
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        5,
        6
      ],
      "cell2": [
        5,
        7
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        5,
        3
      ],
      "cell2": [
        6,
        3
      ]
    }
  ],
  "theme": "color",
  "metadata": {
    "attempt": 52,
    "total_locks": 1,
    "equal_hints": 14,
    "notequal_hints": 14,
    "unique_checked": false,
    "solutions": null,
    "logic_steps": 63,
    "trace_len": 63
  }
}\n\n===== FILE 60/160: assets/data/stage2/level_18.json =====\n{
  "level": 15,
  "difficulty": "normal",
  "size": 8,
  "puzzle": [
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      }
    ],
    [
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ]
  ],
  "solution": [
    [
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle"
    ],
    [
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle"
    ],
    [
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "blue_square"
    ],
    [
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "blue_square"
    ],
    [
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle"
    ],
    [
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle"
    ],
    [
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square"
    ],
    [
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "blue_square"
    ]
  ],
  "hints": [
    {
      "type": "equal",
      "cell1": [
        4,
        7
      ],
      "cell2": [
        5,
        7
      ]
    },
    {
      "type": "equal",
      "cell1": [
        7,
        4
      ],
      "cell2": [
        7,
        5
      ]
    },
    {
      "type": "equal",
      "cell1": [
        5,
        5
      ],
      "cell2": [
        6,
        5
      ]
    },
    {
      "type": "equal",
      "cell1": [
        6,
        7
      ],
      "cell2": [
        7,
        7
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        7,
        1
      ],
      "cell2": [
        7,
        2
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        0,
        5
      ],
      "cell2": [
        0,
        6
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        5,
        0
      ],
      "cell2": [
        5,
        1
      ]
    }
  ],
  "theme": "color",
  "metadata": {
    "attempt": 492,
    "total_locks": 15,
    "equal_hints": 4,
    "notequal_hints": 3,
    "unique_checked": false,
    "solutions": null,
    "logic_steps": 49,
    "trace_len": 49
  }
}\n\n===== FILE 61/160: assets/data/stage2/level_19.json =====\n{
  "level": 16,
  "difficulty": "normal",
  "size": 8,
  "puzzle": [
    [
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ]
  ],
  "solution": [
    [
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle"
    ],
    [
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "blue_square"
    ],
    [
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle"
    ],
    [
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle"
    ],
    [
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square"
    ],
    [
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "blue_square"
    ],
    [
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle"
    ],
    [
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square"
    ]
  ],
  "hints": [
    {
      "type": "equal",
      "cell1": [
        3,
        2
      ],
      "cell2": [
        4,
        2
      ]
    },
    {
      "type": "equal",
      "cell1": [
        0,
        4
      ],
      "cell2": [
        1,
        4
      ]
    },
    {
      "type": "equal",
      "cell1": [
        5,
        6
      ],
      "cell2": [
        6,
        6
      ]
    },
    {
      "type": "equal",
      "cell1": [
        2,
        5
      ],
      "cell2": [
        3,
        5
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        4,
        6
      ],
      "cell2": [
        4,
        7
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        0,
        5
      ],
      "cell2": [
        0,
        6
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        6,
        7
      ],
      "cell2": [
        7,
        7
      ]
    }
  ],
  "theme": "color",
  "metadata": {
    "attempt": 728,
    "total_locks": 15,
    "equal_hints": 4,
    "notequal_hints": 3,
    "unique_checked": false,
    "solutions": null,
    "logic_steps": 49,
    "trace_len": 49
  }
}\n\n===== FILE 62/160: assets/data/stage2/level_2.json =====\n{
  "level": 2,
  "difficulty": "normal",
  "size": 6,
  "puzzle": [
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      }
    ]
  ],
  "solution": [
    [
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "blue_square"
    ],
    [
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle"
    ],
    [
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle"
    ],
    [
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square"
    ],
    [
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "blue_square"
    ],
    [
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle"
    ]
  ],
  "hints": [
    {
      "type": "equal",
      "cell1": [
        4,
        4
      ],
      "cell2": [
        4,
        5
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        2,
        3
      ],
      "cell2": [
        2,
        4
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        1,
        1
      ],
      "cell2": [
        1,
        2
      ]
    }
  ],
  "theme": "color",
  "metadata": {
    "attempt": 33,
    "total_locks": 8,
    "equal_hints": 1,
    "notequal_hints": 2,
    "unique_checked": false,
    "solutions": null,
    "logic_steps": 28,
    "trace_len": 28
  }
}\n\n===== FILE 63/160: assets/data/stage2/level_20.json =====\n{
  "level": 17,
  "difficulty": "normal",
  "size": 8,
  "puzzle": [
    [
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ]
  ],
  "solution": [
    [
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square"
    ],
    [
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "blue_square"
    ],
    [
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle"
    ],
    [
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "blue_square"
    ],
    [
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle"
    ],
    [
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle"
    ],
    [
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square"
    ],
    [
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle"
    ]
  ],
  "hints": [
    {
      "type": "equal",
      "cell1": [
        3,
        4
      ],
      "cell2": [
        4,
        4
      ]
    },
    {
      "type": "equal",
      "cell1": [
        1,
        1
      ],
      "cell2": [
        2,
        1
      ]
    },
    {
      "type": "equal",
      "cell1": [
        0,
        7
      ],
      "cell2": [
        1,
        7
      ]
    },
    {
      "type": "equal",
      "cell1": [
        4,
        1
      ],
      "cell2": [
        5,
        1
      ]
    },
    {
      "type": "equal",
      "cell1": [
        4,
        1
      ],
      "cell2": [
        4,
        2
      ]
    },
    {
      "type": "equal",
      "cell1": [
        1,
        2
      ],
      "cell2": [
        2,
        2
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        3,
        3
      ],
      "cell2": [
        3,
        4
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        6,
        5
      ],
      "cell2": [
        6,
        6
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        5,
        0
      ],
      "cell2": [
        5,
        1
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        6,
        0
      ],
      "cell2": [
        6,
        1
      ]
    }
  ],
  "theme": "color",
  "metadata": {
    "attempt": 97,
    "total_locks": 12,
    "equal_hints": 6,
    "notequal_hints": 4,
    "unique_checked": false,
    "solutions": null,
    "logic_steps": 52,
    "trace_len": 52
  }
}\n\n===== FILE 64/160: assets/data/stage2/level_21.json =====\n{
  "level": 18,
  "difficulty": "normal",
  "size": 8,
  "puzzle": [
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ]
  ],
  "solution": [
    [
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle"
    ],
    [
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle"
    ],
    [
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square"
    ],
    [
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle"
    ],
    [
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "blue_square"
    ],
    [
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle"
    ],
    [
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "blue_square"
    ],
    [
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "blue_square"
    ]
  ],
  "hints": [
    {
      "type": "equal",
      "cell1": [
        4,
        6
      ],
      "cell2": [
        4,
        7
      ]
    },
    {
      "type": "equal",
      "cell1": [
        0,
        2
      ],
      "cell2": [
        1,
        2
      ]
    },
    {
      "type": "equal",
      "cell1": [
        6,
        0
      ],
      "cell2": [
        7,
        0
      ]
    },
    {
      "type": "equal",
      "cell1": [
        6,
        1
      ],
      "cell2": [
        7,
        1
      ]
    },
    {
      "type": "equal",
      "cell1": [
        3,
        1
      ],
      "cell2": [
        3,
        2
      ]
    },
    {
      "type": "equal",
      "cell1": [
        4,
        0
      ],
      "cell2": [
        5,
        0
      ]
    },
    {
      "type": "equal",
      "cell1": [
        4,
        6
      ],
      "cell2": [
        5,
        6
      ]
    },
    {
      "type": "equal",
      "cell1": [
        5,
        3
      ],
      "cell2": [
        6,
        3
      ]
    },
    {
      "type": "equal",
      "cell1": [
        7,
        6
      ],
      "cell2": [
        7,
        7
      ]
    },
    {
      "type": "equal",
      "cell1": [
        2,
        6
      ],
      "cell2": [
        3,
        6
      ]
    },
    {
      "type": "equal",
      "cell1": [
        2,
        1
      ],
      "cell2": [
        3,
        1
      ]
    },
    {
      "type": "equal",
      "cell1": [
        2,
        5
      ],
      "cell2": [
        3,
        5
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        2,
        6
      ],
      "cell2": [
        2,
        7
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        6,
        6
      ],
      "cell2": [
        7,
        6
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        4,
        2
      ],
      "cell2": [
        4,
        3
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        2,
        4
      ],
      "cell2": [
        3,
        4
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        4,
        0
      ],
      "cell2": [
        4,
        1
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        5,
        0
      ],
      "cell2": [
        5,
        1
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        1,
        7
      ],
      "cell2": [
        2,
        7
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        1,
        3
      ],
      "cell2": [
        1,
        4
      ]
    }
  ],
  "theme": "color",
  "metadata": {
    "attempt": 215,
    "total_locks": 5,
    "equal_hints": 12,
    "notequal_hints": 8,
    "unique_checked": false,
    "solutions": null,
    "logic_steps": 59,
    "trace_len": 59
  }
}\n\n===== FILE 65/160: assets/data/stage2/level_22.json =====\n{
  "level": 19,
  "difficulty": "normal",
  "size": 8,
  "puzzle": [
    [
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "yellow_triangle",
        "locked": true
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      }
    ],
    [
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      }
    ]
  ],
  "solution": [
    [
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square"
    ],
    [
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle"
    ],
    [
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle"
    ],
    [
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square"
    ],
    [
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle"
    ],
    [
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square"
    ],
    [
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "blue_square"
    ],
    [
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle"
    ]
  ],
  "hints": [
    {
      "type": "equal",
      "cell1": [
        1,
        1
      ],
      "cell2": [
        2,
        1
      ]
    },
    {
      "type": "equal",
      "cell1": [
        3,
        3
      ],
      "cell2": [
        4,
        3
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        2,
        0
      ],
      "cell2": [
        2,
        1
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        6,
        0
      ],
      "cell2": [
        6,
        1
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        1,
        3
      ],
      "cell2": [
        2,
        3
      ]
    }
  ],
  "theme": "color",
  "metadata": {
    "attempt": 44,
    "total_locks": 19,
    "equal_hints": 2,
    "notequal_hints": 3,
    "unique_checked": false,
    "solutions": null,
    "logic_steps": 45,
    "trace_len": 45
  }
}\n\n===== FILE 66/160: assets/data/stage2/level_23.json =====\n{
  "level": 20,
  "difficulty": "normal",
  "size": 8,
  "puzzle": [
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      }
    ],
    [
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      }
    ],
    [
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ]
  ],
  "solution": [
    [
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle"
    ],
    [
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle"
    ],
    [
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "blue_square"
    ],
    [
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square"
    ],
    [
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle"
    ],
    [
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "blue_square"
    ],
    [
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "blue_square"
    ],
    [
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle"
    ]
  ],
  "hints": [
    {
      "type": "equal",
      "cell1": [
        1,
        5
      ],
      "cell2": [
        2,
        5
      ]
    },
    {
      "type": "equal",
      "cell1": [
        5,
        4
      ],
      "cell2": [
        5,
        5
      ]
    }
  ],
  "theme": "color",
  "metadata": {
    "attempt": 140,
    "total_locks": 22,
    "equal_hints": 2,
    "notequal_hints": 0,
    "unique_checked": false,
    "solutions": null,
    "logic_steps": 42,
    "trace_len": 42
  }
}\n\n===== FILE 67/160: assets/data/stage2/level_24.json =====\n{
  "level": 41,
  "difficulty": "normal",
  "size": 8,
  "puzzle": [
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ]
  ],
  "solution": [
    [
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle"
    ],
    [
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle"
    ],
    [
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square"
    ],
    [
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle"
    ],
    [
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "blue_square"
    ],
    [
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle"
    ],
    [
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square"
    ],
    [
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "blue_square"
    ]
  ],
  "hints": [
    {
      "type": "equal",
      "cell1": [
        4,
        4
      ],
      "cell2": [
        4,
        5
      ]
    },
    {
      "type": "equal",
      "cell1": [
        4,
        1
      ],
      "cell2": [
        4,
        2
      ]
    },
    {
      "type": "equal",
      "cell1": [
        0,
        6
      ],
      "cell2": [
        1,
        6
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        5,
        4
      ],
      "cell2": [
        6,
        4
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        0,
        5
      ],
      "cell2": [
        1,
        5
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        7,
        2
      ],
      "cell2": [
        7,
        3
      ]
    }
  ],
  "theme": "color",
  "metadata": {
    "attempt": 438,
    "total_locks": 16,
    "equal_hints": 3,
    "notequal_hints": 3,
    "unique_checked": false,
    "solutions": null,
    "logic_steps": 48,
    "trace_len": 48
  }
}\n\n===== FILE 68/160: assets/data/stage2/level_25.json =====\n{
  "level": 42,
  "difficulty": "normal",
  "size": 8,
  "puzzle": [
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "yellow_triangle",
        "locked": true
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ]
  ],
  "solution": [
    [
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square"
    ],
    [
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle"
    ],
    [
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle"
    ],
    [
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "blue_square"
    ],
    [
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square"
    ],
    [
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle"
    ],
    [
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "blue_square"
    ],
    [
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle"
    ]
  ],
  "hints": [
    {
      "type": "equal",
      "cell1": [
        0,
        2
      ],
      "cell2": [
        0,
        3
      ]
    },
    {
      "type": "equal",
      "cell1": [
        2,
        0
      ],
      "cell2": [
        3,
        0
      ]
    },
    {
      "type": "equal",
      "cell1": [
        4,
        5
      ],
      "cell2": [
        5,
        5
      ]
    },
    {
      "type": "equal",
      "cell1": [
        3,
        7
      ],
      "cell2": [
        4,
        7
      ]
    },
    {
      "type": "equal",
      "cell1": [
        0,
        0
      ],
      "cell2": [
        1,
        0
      ]
    },
    {
      "type": "equal",
      "cell1": [
        5,
        0
      ],
      "cell2": [
        6,
        0
      ]
    }
  ],
  "theme": "color",
  "metadata": {
    "attempt": 96,
    "total_locks": 18,
    "equal_hints": 6,
    "notequal_hints": 0,
    "unique_checked": false,
    "solutions": null,
    "logic_steps": 46,
    "trace_len": 46
  }
}\n\n===== FILE 69/160: assets/data/stage2/level_26.json =====\n{
  "level": 43,
  "difficulty": "normal",
  "size": 8,
  "puzzle": [
    [
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "yellow_triangle",
        "locked": true
      }
    ],
    [
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ]
  ],
  "solution": [
    [
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle"
    ],
    [
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "blue_square"
    ],
    [
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "blue_square"
    ],
    [
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle"
    ],
    [
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square"
    ],
    [
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "blue_square"
    ],
    [
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle"
    ],
    [
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle"
    ]
  ],
  "hints": [
    {
      "type": "equal",
      "cell1": [
        5,
        0
      ],
      "cell2": [
        6,
        0
      ]
    },
    {
      "type": "equal",
      "cell1": [
        0,
        4
      ],
      "cell2": [
        0,
        5
      ]
    },
    {
      "type": "equal",
      "cell1": [
        5,
        6
      ],
      "cell2": [
        5,
        7
      ]
    },
    {
      "type": "equal",
      "cell1": [
        4,
        3
      ],
      "cell2": [
        5,
        3
      ]
    },
    {
      "type": "equal",
      "cell1": [
        0,
        2
      ],
      "cell2": [
        1,
        2
      ]
    },
    {
      "type": "equal",
      "cell1": [
        4,
        5
      ],
      "cell2": [
        5,
        5
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        0,
        5
      ],
      "cell2": [
        1,
        5
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        4,
        1
      ],
      "cell2": [
        5,
        1
      ]
    }
  ],
  "theme": "color",
  "metadata": {
    "attempt": 315,
    "total_locks": 15,
    "equal_hints": 6,
    "notequal_hints": 2,
    "unique_checked": false,
    "solutions": null,
    "logic_steps": 49,
    "trace_len": 49
  }
}\n\n===== FILE 70/160: assets/data/stage2/level_3.json =====\n{
  "level": 3,
  "difficulty": "normal",
  "size": 6,
  "puzzle": [
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ]
  ],
  "solution": [
    [
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "blue_square"
    ],
    [
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle"
    ],
    [
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle"
    ],
    [
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square"
    ],
    [
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle"
    ],
    [
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "blue_square"
    ]
  ],
  "hints": [
    {
      "type": "equal",
      "cell1": [
        2,
        3
      ],
      "cell2": [
        3,
        3
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        0,
        4
      ],
      "cell2": [
        0,
        5
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        0,
        1
      ],
      "cell2": [
        0,
        2
      ]
    }
  ],
  "theme": "color",
  "metadata": {
    "attempt": 2,
    "total_locks": 9,
    "equal_hints": 1,
    "notequal_hints": 2,
    "unique_checked": false,
    "solutions": null,
    "logic_steps": 27,
    "trace_len": 27
  }
}\n\n===== FILE 71/160: assets/data/stage2/level_4.json =====\n{
  "level": 4,
  "difficulty": "normal",
  "size": 6,
  "puzzle": [
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ]
  ],
  "solution": [
    [
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle"
    ],
    [
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "blue_square"
    ],
    [
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle"
    ],
    [
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square"
    ],
    [
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square"
    ],
    [
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle"
    ]
  ],
  "hints": [
    {
      "type": "equal",
      "cell1": [
        1,
        4
      ],
      "cell2": [
        1,
        5
      ]
    },
    {
      "type": "equal",
      "cell1": [
        2,
        2
      ],
      "cell2": [
        2,
        3
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        3,
        3
      ],
      "cell2": [
        4,
        3
      ]
    }
  ],
  "theme": "color",
  "metadata": {
    "attempt": 8,
    "total_locks": 9,
    "equal_hints": 2,
    "notequal_hints": 1,
    "unique_checked": false,
    "solutions": null,
    "logic_steps": 27,
    "trace_len": 27
  }
}\n\n===== FILE 72/160: assets/data/stage2/level_5.json =====\n{
  "level": 5,
  "difficulty": "normal",
  "size": 6,
  "puzzle": [
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      }
    ],
    [
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      }
    ]
  ],
  "solution": [
    [
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square"
    ],
    [
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "blue_square"
    ],
    [
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle"
    ],
    [
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle"
    ],
    [
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "blue_square"
    ],
    [
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle"
    ]
  ],
  "hints": [
    {
      "type": "equal",
      "cell1": [
        3,
        4
      ],
      "cell2": [
        4,
        4
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        1,
        1
      ],
      "cell2": [
        1,
        2
      ]
    }
  ],
  "theme": "color",
  "metadata": {
    "attempt": 490,
    "total_locks": 9,
    "equal_hints": 1,
    "notequal_hints": 1,
    "unique_checked": false,
    "solutions": null,
    "logic_steps": 27,
    "trace_len": 27
  }
}\n\n===== FILE 73/160: assets/data/stage2/level_6.json =====\n{
  "level": 6,
  "difficulty": "normal",
  "size": 6,
  "puzzle": [
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ]
  ],
  "solution": [
    [
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle"
    ],
    [
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle"
    ],
    [
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "blue_square"
    ],
    [
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square"
    ],
    [
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle"
    ],
    [
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square"
    ]
  ],
  "hints": [
    {
      "type": "equal",
      "cell1": [
        2,
        4
      ],
      "cell2": [
        2,
        5
      ]
    },
    {
      "type": "equal",
      "cell1": [
        2,
        5
      ],
      "cell2": [
        3,
        5
      ]
    },
    {
      "type": "equal",
      "cell1": [
        0,
        0
      ],
      "cell2": [
        1,
        0
      ]
    },
    {
      "type": "equal",
      "cell1": [
        1,
        2
      ],
      "cell2": [
        1,
        3
      ]
    },
    {
      "type": "equal",
      "cell1": [
        2,
        0
      ],
      "cell2": [
        3,
        0
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        4,
        2
      ],
      "cell2": [
        4,
        3
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        4,
        0
      ],
      "cell2": [
        4,
        1
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        1,
        5
      ],
      "cell2": [
        2,
        5
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        5,
        2
      ],
      "cell2": [
        5,
        3
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        1,
        4
      ],
      "cell2": [
        2,
        4
      ]
    }
  ],
  "theme": "color",
  "metadata": {
    "attempt": 28,
    "total_locks": 5,
    "equal_hints": 5,
    "notequal_hints": 5,
    "unique_checked": false,
    "solutions": null,
    "logic_steps": 31,
    "trace_len": 31
  }
}\n\n===== FILE 74/160: assets/data/stage2/level_7.json =====\n{
  "level": 7,
  "difficulty": "normal",
  "size": 6,
  "puzzle": [
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ]
  ],
  "solution": [
    [
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square"
    ],
    [
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "blue_square"
    ],
    [
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle"
    ],
    [
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle"
    ],
    [
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square"
    ],
    [
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle"
    ]
  ],
  "hints": [
    {
      "type": "equal",
      "cell1": [
        3,
        0
      ],
      "cell2": [
        3,
        1
      ]
    },
    {
      "type": "equal",
      "cell1": [
        1,
        0
      ],
      "cell2": [
        2,
        0
      ]
    },
    {
      "type": "equal",
      "cell1": [
        1,
        2
      ],
      "cell2": [
        2,
        2
      ]
    },
    {
      "type": "equal",
      "cell1": [
        3,
        0
      ],
      "cell2": [
        4,
        0
      ]
    },
    {
      "type": "equal",
      "cell1": [
        1,
        3
      ],
      "cell2": [
        2,
        3
      ]
    },
    {
      "type": "equal",
      "cell1": [
        1,
        4
      ],
      "cell2": [
        2,
        4
      ]
    },
    {
      "type": "equal",
      "cell1": [
        3,
        4
      ],
      "cell2": [
        3,
        5
      ]
    },
    {
      "type": "equal",
      "cell1": [
        3,
        4
      ],
      "cell2": [
        4,
        4
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        4,
        0
      ],
      "cell2": [
        5,
        0
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        4,
        4
      ],
      "cell2": [
        4,
        5
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        5,
        0
      ],
      "cell2": [
        5,
        1
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        0,
        0
      ],
      "cell2": [
        0,
        1
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        5,
        2
      ],
      "cell2": [
        5,
        3
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        0,
        0
      ],
      "cell2": [
        1,
        0
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        3,
        2
      ],
      "cell2": [
        4,
        2
      ]
    },
    {
      "type": "not_equal",
      "cell1": [
        2,
        0
      ],
      "cell2": [
        2,
        1
      ]
    }
  ],
  "theme": "color",
  "metadata": {
    "attempt": 39,
    "total_locks": 1,
    "equal_hints": 8,
    "notequal_hints": 8,
    "unique_checked": false,
    "solutions": null,
    "logic_steps": 35,
    "trace_len": 35
  }
}\n\n===== FILE 75/160: assets/data/stage2/level_8.json =====\n{
  "level": 8,
  "difficulty": "normal",
  "size": 6,
  "puzzle": [
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "blue_square",
        "locked": true
      }
    ],
    [
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ]
  ],
  "solution": [
    [
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "blue_square"
    ],
    [
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "blue_square"
    ],
    [
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle"
    ],
    [
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle"
    ],
    [
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square"
    ],
    [
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle"
    ]
  ],
  "hints": [
    {
      "type": "equal",
      "cell1": [
        2,
        5
      ],
      "cell2": [
        3,
        5
      ]
    },
    {
      "type": "equal",
      "cell1": [
        0,
        4
      ],
      "cell2": [
        0,
        5
      ]
    },
    {
      "type": "equal",
      "cell1": [
        1,
        2
      ],
      "cell2": [
        2,
        2
      ]
    }
  ],
  "theme": "color",
  "metadata": {
    "attempt": 109,
    "total_locks": 7,
    "equal_hints": 3,
    "notequal_hints": 0,
    "unique_checked": false,
    "solutions": null,
    "logic_steps": 29,
    "trace_len": 29
  }
}\n\n===== FILE 76/160: assets/data/stage2/level_9.json =====\n{
  "level": 9,
  "difficulty": "normal",
  "size": 6,
  "puzzle": [
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "yellow_triangle",
        "locked": true
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ],
    [
      {
        "value": "blue_square",
        "locked": true
      },
      {
        "value": "yellow_triangle",
        "locked": true
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "yellow_triangle",
        "locked": true
      }
    ],
    [
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      },
      {
        "value": "",
        "locked": false
      }
    ]
  ],
  "solution": [
    [
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "blue_square"
    ],
    [
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle"
    ],
    [
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square"
    ],
    [
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "blue_square",
      "yellow_triangle"
    ],
    [
      "blue_square",
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle"
    ],
    [
      "yellow_triangle",
      "yellow_triangle",
      "blue_square",
      "blue_square",
      "yellow_triangle",
      "blue_square"
    ]
  ],
  "hints": [
    {
      "type": "equal",
      "cell1": [
        2,
        3
      ],
      "cell2": [
        3,
        3
      ]
    },
    {
      "type": "equal",
      "cell1": [
        3,
        1
      ],
      "cell2": [
        3,
        2
      ]
    },
    {
      "type": "equal",
      "cell1": [
        4,
        1
      ],
      "cell2": [
        5,
        1
      ]
    }
  ],
  "theme": "color",
  "metadata": {
    "attempt": 294,
    "total_locks": 6,
    "equal_hints": 3,
    "notequal_hints": 0,
    "unique_checked": false,
    "solutions": null,
    "logic_steps": 30,
    "trace_len": 30
  }
}\n\n===== FILE 77/160: lib/admin/admin_mode_cubit.dart =====\nimport 'package:flutter_bloc/flutter_bloc.dart';
import 'admin_mode_repository.dart';

class AdminModeCubit extends Cubit<bool> {
  final AdminModeRepository _repository;

  AdminModeCubit(this._repository) : super(false);

  Future<void> init() async {
    final isAdmin = await _repository.load();
    emit(isAdmin);
  }

  Future<void> set(bool value) async {
    await _repository.save(value);
    emit(value);
  }

  Future<void> toggle() async {
    final newValue = !state;
    await set(newValue);
  }
}
\n\n===== FILE 78/160: lib/admin/admin_mode_repository.dart =====\nimport 'package:shared_preferences/shared_preferences.dart';

class AdminModeRepository {
  static const String _key = 'admin_mode_v1';

  Future<bool> load() async {
    final prefs = await SharedPreferences.getInstance();
    return prefs.getBool(_key) ?? false;
  }

  Future<void> save(bool value) async {
    final prefs = await SharedPreferences.getInstance();
    await prefs.setBool(_key, value);
  }
}
\n\n===== FILE 79/160: lib/audio/audio_gateway.dart =====\nimport 'package:flutter/services.dart';
import 'package:audioplayers/audioplayers.dart';
import '../settings/settings_model.dart';

class AudioGateway {
  static final AudioGateway _instance = AudioGateway._internal();
  factory AudioGateway() => _instance;
  AudioGateway._internal();

  double _currentVolume = 0.7;
  bool _musicOn = true;
  bool _sfxOn = true;
  bool _hapticOn = true;
  
  // Audio players
  final AudioPlayer _musicPlayer = AudioPlayer();
  final AudioPlayer _sfxPlayer = AudioPlayer();
  int _currentMusicIndex = 0;
  final List<String> _musicFiles = [
    'audio/background_music_1.mp3',
    'audio/background_music_2.mp3',
  ];

  // Bu fonksiyon, projenin gerçek ses motoru ile entegre edilecek tek nokta
  Future<void> apply(SettingsModel m) async {
    _musicOn = m.musicOn;
    _sfxOn = m.sfxOn;
    _hapticOn = m.hapticOn;
    _currentVolume = m.volume;

    // Müzik durumunu güncelle
    if (_musicOn) {
      await startBackgroundMusic();
    } else {
      await stopBackgroundMusic();
    }
    
    // Ses seviyesini güncelle
    await _musicPlayer.setVolume(_currentVolume);
  }
  
  // Arka plan müziğini başlat
  Future<void> startBackgroundMusic() async {
    if (!_musicOn) return;
    
    try {
      await _musicPlayer.setReleaseMode(ReleaseMode.loop);
      await _playNextMusic();
    } catch (e) {
      print('Müzik başlatma hatası: $e');
    }
  }
  
  // Arka plan müziğini durdur
  Future<void> stopBackgroundMusic() async {
    try {
      await _musicPlayer.stop();
    } catch (e) {
      print('Müzik durdurma hatası: $e');
    }
  }
  
  // Sıradaki müziği çal
  Future<void> _playNextMusic() async {
    if (!_musicOn) return;
    
    try {
      final musicFile = _musicFiles[_currentMusicIndex];
      await _musicPlayer.play(AssetSource(musicFile));
      
      // Müzik bittiğinde sıradakini çal
      _musicPlayer.onPlayerComplete.listen((_) {
        _currentMusicIndex = (_currentMusicIndex + 1) % _musicFiles.length;
        _playNextMusic();
      });
    } catch (e) {
      print('Müzik çalma hatası: $e');
    }
  }

  // Hücre tıklama ses efekti
  Future<void> playCellClickSound() async {
    if (!_sfxOn) return;
    
    try {
      await _sfxPlayer.stop(); // Önceki sesi durdur
      await _sfxPlayer.play(AssetSource('audio/click-345983.mp3'));
    } catch (e) {
      print('Hücre tıklama ses efekti hatası: $e');
    }
  }

  // Örnek: UI içinden çağrılıp dokunma haptics tetiklemek için
  Future<void> lightHaptic() async {
    if (_hapticOn) {
      await HapticFeedback.lightImpact();
    }
  }

  bool get musicOn => _musicOn;
  bool get sfxOn => _sfxOn;
  double get volume => _currentVolume;
  bool get hapticOn => _hapticOn;
  
  // Dispose method
  void dispose() {
    _musicPlayer.dispose();
    _sfxPlayer.dispose();
  }
}
\n\n===== FILE 80/160: lib/bloc/game_stats_cubit.dart =====\nimport 'package:equatable/equatable.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'dart:convert';
import '../config/universe_config.dart';

class GameStatsState extends Equatable {
  final int dailyCompleted;
  final int weeklyCompleted;
  final int totalStars;
  final int fastestTime;
  final int perfectPuzzles;
  final List<int> unlockedLevels;
  final bool isLoading;
  final int currentUniverseId; // Mevcut evren ID'si

  const GameStatsState({
    required this.dailyCompleted,
    required this.weeklyCompleted,
    required this.totalStars,
    required this.fastestTime,
    required this.perfectPuzzles,
    required this.unlockedLevels,
    this.isLoading = false,
    this.currentUniverseId = 1, // Varsayılan olarak Evren 1
  });

  factory GameStatsState.initial() => const GameStatsState(
        dailyCompleted: 0,
        weeklyCompleted: 0,
        totalStars: 0,
        fastestTime: 9999,
        perfectPuzzles: 0,
        unlockedLevels: [1],
        currentUniverseId: 1,
      );

  GameStatsState copyWith({
    int? dailyCompleted,
    int? weeklyCompleted,
    int? totalStars,
    int? fastestTime,
    int? perfectPuzzles,
    List<int>? unlockedLevels,
    bool? isLoading,
    int? currentUniverseId,
  }) {
    return GameStatsState(
      dailyCompleted: dailyCompleted ?? this.dailyCompleted,
      weeklyCompleted: weeklyCompleted ?? this.weeklyCompleted,
      totalStars: totalStars ?? this.totalStars,
      fastestTime: fastestTime ?? this.fastestTime,
      perfectPuzzles: perfectPuzzles ?? this.perfectPuzzles,
      unlockedLevels: unlockedLevels ?? this.unlockedLevels,
      isLoading: isLoading ?? this.isLoading,
      currentUniverseId: currentUniverseId ?? this.currentUniverseId,
    );
  }

  @override
  List<Object?> get props => [
        dailyCompleted,
        weeklyCompleted,
        totalStars,
        fastestTime,
        perfectPuzzles,
        unlockedLevels,
        isLoading,
        currentUniverseId,
      ];
}

class GameStatsCubit extends Cubit<GameStatsState> {
  static const String _statsKey = 'game_stats';
  static const String _universeStatsKey = 'universe_stats';
  
  GameStatsCubit() : super(GameStatsState.initial()) {
    _loadStats();
  }

  Future<void> _loadStats() async {
    await _loadUniverseStats(1); // Varsayılan olarak Evren 1'i yükle
  }

  // Belirtilen evren için progress yükle
  Future<void> _loadUniverseStats(int universeId) async {
    emit(state.copyWith(isLoading: true));
    
    try {
      final prefs = await SharedPreferences.getInstance();
      final universeStatsJson = prefs.getString('${_universeStatsKey}_$universeId');
      
      if (universeStatsJson != null) {
        final Map<String, dynamic> stats = json.decode(universeStatsJson);
        
        emit(GameStatsState(
          dailyCompleted: stats['dailyCompleted'] ?? 0,
          weeklyCompleted: stats['weeklyCompleted'] ?? 0,
          totalStars: stats['totalStars'] ?? 0,
          fastestTime: stats['fastestTime'] ?? 9999,
          perfectPuzzles: stats['perfectPuzzles'] ?? 0,
          unlockedLevels: List<int>.from(stats['unlockedLevels'] ?? [1]),
          currentUniverseId: stats['currentUniverseId'] ?? universeId,
          isLoading: false,
        ));
      } else {
        // İlk kez açılıyorsa default değerler
        final initialState = GameStatsState.initial();
        await _saveUniverseStats(universeId, initialState);
        emit(initialState.copyWith(isLoading: false));
      }
      
      // Yükleme tamamlandıktan sonra toplam yıldızları güncelle
      await updateTotalStarsFromLevelProgress();
    } catch (e) {
      print('Error loading universe $universeId stats: $e');
      emit(state.copyWith(isLoading: false));
    }
  }

  Future<void> _saveStats(GameStatsState stats) async {
    await _saveUniverseStats(stats.currentUniverseId, stats); // Mevcut evreni kaydet
  }

  // Belirtilen evren için progress kaydet
  Future<void> _saveUniverseStats(int universeId, GameStatsState stats) async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final statsData = {
        'dailyCompleted': stats.dailyCompleted,
        'weeklyCompleted': stats.weeklyCompleted,
        'totalStars': stats.totalStars,
        'fastestTime': stats.fastestTime,
        'perfectPuzzles': stats.perfectPuzzles,
        'unlockedLevels': stats.unlockedLevels,
        'currentUniverseId': stats.currentUniverseId,
      };
      
      await prefs.setString('${_universeStatsKey}_$universeId', json.encode(statsData));
    } catch (e) {
      print('Error saving universe $universeId stats: $e');
    }
  }

  // Level tamamlandığında çağrılacak ana fonksiyon
  Future<void> onLevelCompleted(int level, int elapsedSeconds, {bool isDaily = false, bool isWeekly = false}) async {
    print('=== GAME STATS: Level $level completed in $elapsedSeconds seconds ===');
    
    // Yıldız hesapla
    final stars = _calculateStars(elapsedSeconds);
    print('=== GAME STATS: Calculated stars: $stars ===');
    
    // Yeni state oluştur
    var newState = state.copyWith(
      totalStars: state.totalStars + stars,
    );
    
    // En hızlı zamanı güncelle
    if (elapsedSeconds < state.fastestTime) {
      newState = newState.copyWith(fastestTime: elapsedSeconds);
    }
    
    // Mükemmel puzzle sayısını güncelle (3 yıldız)
    if (stars == 3) {
      newState = newState.copyWith(perfectPuzzles: state.perfectPuzzles + 1);
    }
    
    // Günlük/Haftalık sayaçları güncelle
    if (isDaily) {
      newState = newState.copyWith(dailyCompleted: state.dailyCompleted + 1);
    } else if (isWeekly) {
      newState = newState.copyWith(weeklyCompleted: state.weeklyCompleted + 1);
    }
    
    // Level kilidini aç
    if (!newState.unlockedLevels.contains(level + 1) && level < 50) {
      final newUnlockedLevels = List<int>.from(newState.unlockedLevels)..add(level + 1);
      newState = newState.copyWith(unlockedLevels: newUnlockedLevels);
      print('=== GAME STATS: Level ${level + 1} unlocked ===');
    }
    
    // Eğer level 50 tamamlandıysa sonraki evreni aç
    if (level == 50) {
      await _unlockNextUniverse();
    }
    
    // State'i güncelle
    emit(newState);
    
    // Kalıcı olarak kaydet
    await _saveStats(newState);
    
    print('=== GAME STATS: Stats updated and saved ===');
    print('Total Stars: ${newState.totalStars}');
    print('Unlocked Levels: ${newState.unlockedLevels}');
  }

  // Yıldız hesaplama mantığı
  int _calculateStars(int elapsedSeconds) {
    if (elapsedSeconds <= 10) return 3;
    if (elapsedSeconds <= 20) return 2;
    if (elapsedSeconds <= 30) return 1;
    return 0;
  }

  // Günlük puzzle tamamlandığında
  Future<void> onDailyCompleted(int elapsedSeconds) async {
    await onLevelCompleted(1, elapsedSeconds, isDaily: true);
  }

  // Haftalık puzzle tamamlandığında
  Future<void> onWeeklyCompleted(int elapsedSeconds) async {
    await onLevelCompleted(1, elapsedSeconds, isWeekly: true);
  }

  // Level kilidini manuel olarak aç
  Future<void> unlockLevel(int level) async {
    if (state.unlockedLevels.contains(level)) return;
    
    final newUnlockedLevels = List<int>.from(state.unlockedLevels)..add(level);
    final newState = state.copyWith(unlockedLevels: newUnlockedLevels);
    
    emit(newState);
    await _saveStats(newState);
  }

  // İstatistikleri sıfırla
  Future<void> resetStats() async {
    final initialState = GameStatsState.initial();
    emit(initialState);
    await _saveStats(initialState);
  }

  // Belirli bir level'ın açık olup olmadığını kontrol et
  bool isLevelUnlocked(int level) {
    return state.unlockedLevels.contains(level);
  }

  // Evren değiştir
  Future<void> switchUniverse(int universeId) async {
    print('=== GAME STATS: Switching to universe $universeId ===');
    
    // Evren kilidini kontrol et
    final isUnlocked = await UniverseConfig.isUniverseUnlockedFromPrefs(universeId);
    if (!isUnlocked) {
      print('=== GAME STATS: Universe $universeId is locked! ===');
      // Kilitli evrene geçiş yapma, mevcut evrende kal
      return;
    }
    
    // Mevcut evren ID'sini güncelle
    emit(state.copyWith(currentUniverseId: universeId));
    
    await _loadUniverseStats(universeId);
  }

  // Sonraki evreni aç
  Future<void> _unlockNextUniverse() async {
    // Mevcut evren ID'sini al
    final currentUniverseId = state.currentUniverseId;
    final nextUniverseId = currentUniverseId + 1;
    
    try {
      await UniverseConfig.unlockUniverse(nextUniverseId);
      print('=== GAME STATS: Universe $nextUniverseId unlocked! ===');
      
      // Otomatik olarak sonraki evrene geç
      await switchUniverse(nextUniverseId);
    } catch (e) {
      print('=== GAME STATS: Error unlocking next universe: $e ===');
    }
  }

  // Belirli bir level'ın yıldız sayısını al
  int getLevelStars(int level) {
    // Bu fonksiyon şimdilik 0 döndürüyor, çünkü level bazlı yıldızları 
    // LevelProgressCubit yönetiyor. İleride buraya da eklenebilir.
    return 0;
  }

  // LevelProgressCubit'ten tüm yıldızları oku ve toplam yıldız sayısını güncelle
  Future<void> updateTotalStarsFromLevelProgress() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      int totalStars = 0;
      
      // Tüm level'ları tara (1-10)
      for (int i = 1; i <= 10; i++) {
        final stars = prefs.getInt('level_${i}_stars') ?? 0;
        totalStars += stars;
      }
      
      // State'i güncelle
      final newState = state.copyWith(totalStars: totalStars);
      emit(newState);
      
      // Kalıcı olarak kaydet
      await _saveStats(newState);
      
      print('=== GAME STATS: Total stars updated to $totalStars ===');
    } catch (e) {
      print('Error updating total stars: $e');
    }
  }

  // İstatistikleri yeniden yükle ve toplam yıldızları güncelle
  Future<void> refreshStats() async {
    await _loadStats();
    await updateTotalStarsFromLevelProgress();
  }
}
\n\n===== FILE 81/160: lib/bloc/level_progress_cubit.dart =====\nimport 'package:flutter_bloc/flutter_bloc.dart';
import 'package:shared_preferences/shared_preferences.dart';
import '../config/universe_config.dart';

// State sınıfı
class LevelProgressState {
  final Map<int, int> levelStars;
  final Map<int, bool> levelUnlocked;
  final bool isLoading;

  LevelProgressState({
    required this.levelStars,
    required this.levelUnlocked,
    this.isLoading = false,
  });

  LevelProgressState copyWith({
    Map<int, int>? levelStars,
    Map<int, bool>? levelUnlocked,
    bool? isLoading,
  }) {
    return LevelProgressState(
      levelStars: levelStars ?? this.levelStars,
      levelUnlocked: levelUnlocked ?? this.levelUnlocked,
      isLoading: isLoading ?? this.isLoading,
    );
  }
}

// Cubit sınıfı
class LevelProgressCubit extends Cubit<LevelProgressState> {
  // GameStatsCubit'e callback fonksiyonu
  Function()? onStarsUpdated;
  int _currentUniverseId = 1;

  LevelProgressCubit({this.onStarsUpdated}) : super(LevelProgressState(
    levelStars: {},
    levelUnlocked: {},
    isLoading: true,
  )) {
    _loadProgress();
  }

  // Progress'i SharedPreferences'tan yükle
  Future<void> _loadProgress() async {
    await _loadUniverseProgress(_currentUniverseId);
  }

  // Belirtilen evren için progress yükle
  Future<void> _loadUniverseProgress(int universeId) async {
    emit(state.copyWith(isLoading: true));
    
    final prefs = await SharedPreferences.getInstance();
    final Map<int, int> stars = {};
    final Map<int, bool> unlocked = {};

    // Level 1 her zaman açık
    unlocked[1] = true;
    stars[1] = prefs.getInt('universe_${universeId}_level_1_stars') ?? 0;

    // Diğer level'ları kontrol et
    for (int i = 2; i <= 50; i++) {
      unlocked[i] = prefs.getBool('universe_${universeId}_level_${i}_unlocked') ?? false;
      stars[i] = prefs.getInt('universe_${universeId}_level_${i}_stars') ?? 0;
    }

    emit(state.copyWith(
      levelStars: stars,
      levelUnlocked: unlocked,
      isLoading: false,
    ));

    print('=== CUBIT: Universe $universeId progress loaded ===');
    for (int i = 1; i <= 50; i++) {
      print('Level $i: Unlocked=${unlocked[i]}, Stars=${stars[i]}');
    }
  }

  // Level yıldızlarını güncelle
  Future<void> updateStars(int level, int stars) async {
    final prefs = await SharedPreferences.getInstance();
    await prefs.setInt('universe_${_currentUniverseId}_level_${level}_stars', stars);

    final newStars = Map<int, int>.from(state.levelStars);
    newStars[level] = stars;

    emit(state.copyWith(levelStars: newStars));
    
    print('=== CUBIT: Universe $_currentUniverseId Level $level stars updated to $stars ===');
    
    // GameStatsCubit'e toplam yıldızları güncellemesi için bildir
    onStarsUpdated?.call();
  }

  // Level kilidini aç
  Future<void> unlockLevel(int level) async {
    if (level > 50) return;

    final prefs = await SharedPreferences.getInstance();
    await prefs.setBool('universe_${_currentUniverseId}_level_${level}_unlocked', true);

    final newUnlocked = Map<int, bool>.from(state.levelUnlocked);
    newUnlocked[level] = true;

    emit(state.copyWith(levelUnlocked: newUnlocked));
    
    print('=== CUBIT: Universe $_currentUniverseId Level $level unlocked ===');
  }

  // Level tamamlandığında çağrılacak fonksiyon
  Future<void> onLevelCompleted(int level, int elapsedSeconds) async {
    print('=== CUBIT: Level $level completed in $elapsedSeconds seconds ===');
    
    // Yıldız hesapla
    final stars = _calculateStars(elapsedSeconds);
    print('=== CUBIT: Calculated stars: $stars ===');
    
    // Yıldızları güncelle
    await updateStars(level, stars);
    
    // Bir sonraki level'ın kilidini aç
    if (level < 50) {
      await unlockLevel(level + 1);
    }
    
    print('=== CUBIT: Level completion processed ===');
  }

  // Yıldız hesaplama mantığı
  int _calculateStars(int elapsedSeconds) {
    // Yeni kural:
    // <45 sn => 3 yıldız
    // 45..70 sn (70 dahil) => 2 yıldız
    // >70 sn => 1 yıldız
    if (elapsedSeconds < 45) return 3;
    if (elapsedSeconds <= 70) return 2;
    return 1;
  }

  // Evren değiştir
  Future<void> switchUniverse(int universeId) async {
    print('=== CUBIT: Switching to universe $universeId ===');
    
    // Evren kilidini kontrol et
    final isUnlocked = await UniverseConfig.isUniverseUnlockedFromPrefs(universeId);
    if (!isUnlocked) {
      print('=== CUBIT: Universe $universeId is locked! ===');
      // Kilitli evrene geçiş yapma, mevcut evrende kal
      return;
    }
    
    _currentUniverseId = universeId;
    await _loadUniverseProgress(universeId);
  }

  // Tüm progress'i sıfırla
  Future<void> resetAllProgress() async {
    final prefs = await SharedPreferences.getInstance();
    
    // Tüm level verilerini sil
    for (int i = 1; i <= 10; i++) {
      await prefs.remove('level_${i}_stars');
      await prefs.remove('level_${i}_unlocked');
    }
    
    // Level 1'i açık yap
    await prefs.setBool('level_1_unlocked', true);
    
    // State'i sıfırla
    final Map<int, int> stars = {1: 0};
    final Map<int, bool> unlocked = {1: true};
    
    for (int i = 2; i <= 10; i++) {
      stars[i] = 0;
      unlocked[i] = false;
    }
    
    emit(state.copyWith(
      levelStars: stars,
      levelUnlocked: unlocked,
    ));
    
    print('=== CUBIT: All progress reset ===');
  }

  // Progress'i yeniden yükle
  Future<void> refreshProgress() async {
    await _loadProgress();
  }
} \n\n===== FILE 82/160: lib/bloc/profile_cubit.dart =====\nimport 'package:equatable/equatable.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:shared_preferences/shared_preferences.dart';

class ProfileState extends Equatable {
  final String selectedAvatarPath;
  final String? pendingAvatarPath; // Tıklanan ama henüz onaylanmamış avatar
  final int completedDailyCount;
  final int completedWeeklyCount;
  final int totalStars;
  final int bestTimeSeconds;
  final int flawlessCount;
  final Set<String> achievedBadges; // badge ids
  final String languageCode; // 'tr' | 'en'

  const ProfileState({
    required this.selectedAvatarPath,
    this.pendingAvatarPath,
    required this.completedDailyCount,
    required this.completedWeeklyCount,
    required this.totalStars,
    required this.bestTimeSeconds,
    required this.flawlessCount,
    required this.achievedBadges,
    required this.languageCode,
  });

  factory ProfileState.initial() => ProfileState(
        selectedAvatarPath: 'assets/avatar/avatar1.png',
        pendingAvatarPath: null,
        completedDailyCount: 0,
        completedWeeklyCount: 0,
        totalStars: 0,
        bestTimeSeconds: 9999,
        flawlessCount: 0,
        achievedBadges: <String>{}.toSet(),
        languageCode: 'tr',
      );

  ProfileState copyWith({
    String? selectedAvatarPath,
    String? pendingAvatarPath,
    int? completedDailyCount,
    int? completedWeeklyCount,
    int? totalStars,
    int? bestTimeSeconds,
    int? flawlessCount,
    Set<String>? achievedBadges,
    String? languageCode,
  }) {
    return ProfileState(
      selectedAvatarPath: selectedAvatarPath ?? this.selectedAvatarPath,
      pendingAvatarPath: pendingAvatarPath ?? this.pendingAvatarPath,
      completedDailyCount: completedDailyCount ?? this.completedDailyCount,
      completedWeeklyCount: completedWeeklyCount ?? this.completedWeeklyCount,
      totalStars: totalStars ?? this.totalStars,
      bestTimeSeconds: bestTimeSeconds ?? this.bestTimeSeconds,
      flawlessCount: flawlessCount ?? this.flawlessCount,
      achievedBadges: achievedBadges ?? this.achievedBadges,
      languageCode: languageCode ?? this.languageCode,
    );
  }

  @override
  List<Object?> get props => [
        selectedAvatarPath,
        pendingAvatarPath,
        completedDailyCount,
        completedWeeklyCount,
        totalStars,
        bestTimeSeconds,
        flawlessCount,
        achievedBadges,
        languageCode,
      ];
}

class ProfileCubit extends Cubit<ProfileState> {
  static const String _avatarPathKey = 'profile.avatarPath';
  
  ProfileCubit() : super(ProfileState.initial()) {
    _loadAvatarPath();
  }

  Future<void> _loadAvatarPath() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final savedPath = prefs.getString(_avatarPathKey);
      if (savedPath != null) {
        emit(state.copyWith(selectedAvatarPath: savedPath));
      }
    } catch (e) {
      // Hata durumunda default avatar kullan
    }
  }

  // Avatar tıklama - pending state'e geçici olarak kaydet
  void setPendingAvatar(String avatarPath) {
    emit(state.copyWith(pendingAvatarPath: avatarPath));
  }

  // Pending avatar'ı temizle (iptal durumu)
  void clearPendingAvatar() {
    emit(state.copyWith(pendingAvatarPath: null));
  }

  // Avatar seçimini onayla ve kalıcı olarak kaydet
  Future<void> confirmAvatarSelection() async {
    if (state.pendingAvatarPath == null) return;

    try {
      final prefs = await SharedPreferences.getInstance();
      await prefs.setString(_avatarPathKey, state.pendingAvatarPath!);
      emit(state.copyWith(
        selectedAvatarPath: state.pendingAvatarPath!,
        pendingAvatarPath: null,
      ));
    } catch (e) {
      // Hata durumunda sadece state'i güncelle
      emit(state.copyWith(
        selectedAvatarPath: state.pendingAvatarPath!,
        pendingAvatarPath: null,
      ));
    }
  }

  // GameStatsCubit'ten istatistikleri güncelle
  void updateStatsFromGameStats({
    required int dailyCompleted,
    required int weeklyCompleted,
    required int totalStars,
    required int bestTimeSeconds,
    required int flawlessCount,
  }) {
    emit(state.copyWith(
      completedDailyCount: dailyCompleted,
      completedWeeklyCount: weeklyCompleted,
      totalStars: totalStars,
      bestTimeSeconds: bestTimeSeconds,
      flawlessCount: flawlessCount,
    ));
  }

  void setLanguage(String code) {
    emit(state.copyWith(languageCode: code));
  }

  // Mock istatistik güncellemeleri (artık kullanılmıyor, GameStatsCubit kullanılıyor)
  void incrementDaily() {
    emit(state.copyWith(completedDailyCount: state.completedDailyCount + 1));
  }

  void incrementWeekly() {
    emit(state.copyWith(completedWeeklyCount: state.completedWeeklyCount + 1));
  }

  void addStars(int stars) {
    emit(state.copyWith(totalStars: state.totalStars + stars));
  }

  void updateBestTime(int seconds) {
    if (seconds < state.bestTimeSeconds) {
      emit(state.copyWith(bestTimeSeconds: seconds));
    }
  }

  void incrementFlawless() {
    emit(state.copyWith(flawlessCount: state.flawlessCount + 1));
  }

  void achieveBadge(String id) {
    final updated = Set<String>.from(state.achievedBadges)..add(id);
    emit(state.copyWith(achievedBadges: updated));
  }
}


\n\n===== FILE 83/160: lib/bloc/puzzle_bloc.dart =====\nimport 'dart:math';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'puzzle_events.dart';
import 'puzzle_states.dart';
import '../utils/puzzle_validation_utils.dart';
import '../audio/audio_gateway.dart';



// Bloc
class PuzzleBloc extends Bloc<PuzzleEvent, PuzzleState> {
  PuzzleBloc() : super(PuzzleInitial()) {
    on<PuzzleLoad>(_onPuzzleLoad);
    on<PuzzleCellTapped>(_onCellTapped);
    on<PuzzleUndo>(_onUndo);
    on<PuzzleRedo>(_onRedo);
    on<PuzzleHint>(_onHint);
    on<PuzzleReset>(_onReset);
    on<PuzzleCheck>(_onCheck);
    on<PuzzleClearErrors>(_onClearErrors);
    on<PuzzleCheckMistakes>(_onCheckMistakes);
    on<PuzzleRevealMistakes>(_onRevealMistakes);
    on<PuzzleStopRevealMistakes>(_onStopRevealMistakes);
  }

  void _onPuzzleLoad(PuzzleLoad event, Emitter<PuzzleState> emit) {
    emit(PuzzleLoading());
    
    // Grid durumunu başlat
    List<List<int>> initialGrid = List.generate(
      event.gridSize, 
      (i) => List.generate(event.gridSize, (j) => 0)
    );
    
    // Pre-filled hücreleri doldur
    for (List<int> position in event.prefilled) {
      int row = position[0];
      int col = position[1];
      initialGrid[row][col] = event.solution[row][col];
    }
    
    // İlk durumu geçmişe ekle
    List<List<List<int>>> moveHistory = [
      List.generate(event.gridSize, (i) => 
        List.generate(event.gridSize, (j) => initialGrid[i][j]))
    ];
    
    emit(PuzzleLoaded(
      stage: event.stage,
      level: event.level,
      gridSize: event.gridSize,
      gridState: initialGrid,
      solution: event.solution,
      horizontalSymbols: event.horizontalSymbols,
      verticalSymbols: event.verticalSymbols,
      prefilled: event.prefilled,
      moveHistory: moveHistory,
      currentHistoryIndex: 0,
      isSolved: false,
      errors: [],
      elapsedSeconds: 0,
      isTimerRunning: false,
      errorCells: [],
      isChecking: false,
      checkMessage: '',
      checkTimestamp: null,
    ));
  }

  void _onCellTapped(PuzzleCellTapped event, Emitter<PuzzleState> emit) {
    if (state is PuzzleLoaded) {
      final currentState = state as PuzzleLoaded;
      
      // Pre-filled cell kontrolü
      bool isPrefilled = currentState.prefilled.any(
        (position) => position[0] == event.row && position[1] == event.col
      );
      
      if (isPrefilled) {
        emit(PuzzleError('Bu hücre sabit! Değiştirilemez.'));
        return;
      }
      
      // Grid durumunu güncelle
      List<List<int>> newGridState = List.generate(
        currentState.gridSize,
        (i) => List.generate(currentState.gridSize, (j) => currentState.gridState[i][j])
      );
      
      // Hücre rengini değiştir (0 -> 1 -> 2 -> 0)
      newGridState[event.row][event.col] = (newGridState[event.row][event.col] + 1) % 3;
      
      // Hücre tıklama ses efekti çal
      AudioGateway().playCellClickSound();
      
      // Geçmişe kaydet
      List<List<List<int>>> newHistory = List.from(currentState.moveHistory);
      newHistory.add(List.generate(
        currentState.gridSize,
        (i) => List.generate(currentState.gridSize, (j) => newGridState[i][j])
      ));
      
      // Çözüm kontrolü
      bool isSolved = PuzzleValidationUtils.isPuzzleSolved(newGridState, currentState.solution);
      
      // Hata kontrolü
      List<String> errors = PuzzleValidationUtils.validateGrid(newGridState, currentState);
      
      // Tıklanan hücreyi hata listesinden çıkar (eğer varsa)
      List<List<int>> updatedErrorCells = List.from(currentState.errorCells);
      updatedErrorCells.removeWhere((cell) => cell[0] == event.row && cell[1] == event.col);
      
      emit(currentState.copyWith(
        gridState: newGridState,
        moveHistory: newHistory,
        currentHistoryIndex: newHistory.length - 1,
        isSolved: isSolved,
        errors: errors,
        errorCells: updatedErrorCells, // Tıklanan hücreyi hata listesinden çıkar
      ));
    }
  }

  void _onUndo(PuzzleUndo event, Emitter<PuzzleState> emit) {
    if (state is PuzzleLoaded) {
      final currentState = state as PuzzleLoaded;
      
      if (currentState.currentHistoryIndex > 0) {
        int newIndex = currentState.currentHistoryIndex - 1;
        List<List<int>> previousGrid = List.generate(
          currentState.gridSize,
          (i) => List.generate(currentState.gridSize, (j) => currentState.moveHistory[newIndex][i][j])
        );
        
        // Pre-filled hücreleri koru
        for (int row = 0; row < currentState.gridSize; row++) {
          for (int col = 0; col < currentState.gridSize; col++) {
            bool isPrefilled = currentState.prefilled.any(
              (position) => position[0] == row && position[1] == col
            );
            if (isPrefilled) {
              previousGrid[row][col] = currentState.solution[row][col];
            }
          }
        }
        
        bool isSolved = PuzzleValidationUtils.isPuzzleSolved(previousGrid, currentState.solution);
        List<String> errors = PuzzleValidationUtils.validateGrid(previousGrid, currentState);
        
        emit(currentState.copyWith(
          gridState: previousGrid,
          currentHistoryIndex: newIndex,
          isSolved: isSolved,
          errors: errors,
          errorCells: [], // Hata hücrelerini temizle
          isChecking: false,
          checkMessage: '',
          checkTimestamp: null,
        ));
      }
    }
  }

  void _onRedo(PuzzleRedo event, Emitter<PuzzleState> emit) {
    if (state is PuzzleLoaded) {
      final currentState = state as PuzzleLoaded;
      
      if (currentState.currentHistoryIndex < currentState.moveHistory.length - 1) {
        int newIndex = currentState.currentHistoryIndex + 1;
        List<List<int>> nextGrid = List.generate(
          currentState.gridSize,
          (i) => List.generate(currentState.gridSize, (j) => currentState.moveHistory[newIndex][i][j])
        );
        
        // Pre-filled hücreleri koru
        for (int row = 0; row < currentState.gridSize; row++) {
          for (int col = 0; col < currentState.gridSize; col++) {
            bool isPrefilled = currentState.prefilled.any(
              (position) => position[0] == row && position[1] == col
            );
            if (isPrefilled) {
              nextGrid[row][col] = currentState.solution[row][col];
            }
          }
        }
        
        bool isSolved = PuzzleValidationUtils.isPuzzleSolved(nextGrid, currentState.solution);
        List<String> errors = PuzzleValidationUtils.validateGrid(nextGrid, currentState);
        
        emit(currentState.copyWith(
          gridState: nextGrid,
          currentHistoryIndex: newIndex,
          isSolved: isSolved,
          errors: errors,
          errorCells: [], // Hata hücrelerini temizle
          isChecking: false,
          checkMessage: '',
          checkTimestamp: null,
        ));
      }
    }
  }

  void _onHint(PuzzleHint event, Emitter<PuzzleState> emit) {
    if (state is PuzzleLoaded) {
      final currentState = state as PuzzleLoaded;
      
      // Boş hücreleri bul
      List<List<int>> emptyCells = [];
      for (int row = 0; row < currentState.gridSize; row++) {
        for (int col = 0; col < currentState.gridSize; col++) {
          if (currentState.gridState[row][col] == 0) {
            emptyCells.add([row, col]);
          }
        }
      }
      
      if (emptyCells.isNotEmpty) {
        Random random = Random();
        var randomCell = emptyCells[random.nextInt(emptyCells.length)];
        int row = randomCell[0];
        int col = randomCell[1];
        
        // Doğru rengi al
        int correctColor = currentState.solution[row][col];
        
        // Grid durumunu güncelle
        List<List<int>> newGridState = List.generate(
          currentState.gridSize,
          (i) => List.generate(currentState.gridSize, (j) => currentState.gridState[i][j])
        );
        newGridState[row][col] = correctColor;
        
        // Geçmişe kaydet
        List<List<List<int>>> newHistory = List.from(currentState.moveHistory);
        newHistory.add(List.generate(
          currentState.gridSize,
          (i) => List.generate(currentState.gridSize, (j) => newGridState[i][j])
        ));
        
        bool isSolved = PuzzleValidationUtils.isPuzzleSolved(newGridState, currentState.solution);
        List<String> errors = PuzzleValidationUtils.validateGrid(newGridState, currentState);
        
        emit(currentState.copyWith(
          gridState: newGridState,
          moveHistory: newHistory,
          currentHistoryIndex: newHistory.length - 1,
          isSolved: isSolved,
          errors: errors,
          errorCells: [], // Hata hücrelerini temizle
          isChecking: false,
          checkMessage: '',
          checkTimestamp: null,
        ));
      }
    }
  }

  void _onReset(PuzzleReset event, Emitter<PuzzleState> emit) {
    if (state is PuzzleLoaded) {
      final currentState = state as PuzzleLoaded;
      
      // Mevcut grid'i kopyala
      List<List<int>> resetGrid = List.generate(
        currentState.gridSize,
        (i) => List.generate(currentState.gridSize, (j) => currentState.gridState[i][j])
      );
      
      // Sadece kullanıcının doldurduğu hücreleri sıfırla (pre-filled olmayan)
      for (int row = 0; row < currentState.gridSize; row++) {
        for (int col = 0; col < currentState.gridSize; col++) {
          bool isPrefilled = currentState.prefilled.any(
            (position) => position[0] == row && position[1] == col
          );
          if (!isPrefilled) {
            resetGrid[row][col] = 0; // Sadece kullanıcının doldurduğu hücreleri sıfırla
          }
        }
      }
      
      // Geçmişe kaydet
      List<List<List<int>>> newHistory = List.from(currentState.moveHistory);
      newHistory.add(List.generate(
        currentState.gridSize,
        (i) => List.generate(currentState.gridSize, (j) => resetGrid[i][j])
      ));
      
      // Çözüm kontrolü
      bool isSolved = PuzzleValidationUtils.isPuzzleSolved(resetGrid, currentState.solution);
      List<String> errors = PuzzleValidationUtils.validateGrid(resetGrid, currentState);
      
      emit(currentState.copyWith(
        gridState: resetGrid,
        moveHistory: newHistory,
        currentHistoryIndex: newHistory.length - 1,
        isSolved: isSolved,
        errors: errors,
        errorCells: [], // Hata hücrelerini temizle
        isChecking: false,
        checkMessage: '',
        checkTimestamp: null,
      ));
    }
  }

  void _onCheck(PuzzleCheck event, Emitter<PuzzleState> emit) async {
    if (state is PuzzleLoaded) {
      final currentState = state as PuzzleLoaded;
      
      // Hata tespit sistemi
      List<List<int>> errorCells = [];
      int errorCount = 0;
      
      // Grid'i karşılaştır ve hatalı hücreleri bul
      for (int row = 0; row < currentState.gridSize; row++) {
        for (int col = 0; col < currentState.gridSize; col++) {
          // Boş hücreleri atla (henüz doldurulmamış)
          if (currentState.gridState[row][col] == 0) continue;
          
          // Çözümle karşılaştır
          if (currentState.gridState[row][col] != currentState.solution[row][col]) {
            errorCells.add([row, col]);
            errorCount++;
          }
        }
      }
      
      // Check mesajını oluştur
      String checkMessage;
      if (errorCount == 0) {
        checkMessage = 'Congratulations! All cells are correct.';
      } else {
        checkMessage = 'Errors found in $errorCount cells.';
      }
      
      // State'i güncelle - artık otomatik kaybolma yok
      emit(currentState.copyWith(
        errorCells: errorCells,
        isChecking: true,
        checkMessage: checkMessage,
        checkTimestamp: DateTime.now(),
      ));
    }
  }

  void _onClearErrors(PuzzleClearErrors event, Emitter<PuzzleState> emit) {
    if (state is PuzzleLoaded) {
      final currentState = state as PuzzleLoaded;
      emit(currentState.copyWith(
        errorCells: [],
        isChecking: false,
        checkMessage: '',
        checkTimestamp: null,
      ));
    }
  }

  // Yeni event handler'lar - sadece hata sayısını hesaplar, hücreleri vurgulamaz
  void _onCheckMistakes(PuzzleCheckMistakes event, Emitter<PuzzleState> emit) {
    if (state is PuzzleLoaded) {
      final currentState = state as PuzzleLoaded;
      
      // Bu işlem hiçbir şey yapmaz, sadece placeholder
      // Hata sayısı hesaplama logic'i dialog widget'ında olacak
    }
  }

  // Reklam izlendikten sonra hataları göster
  void _onRevealMistakes(PuzzleRevealMistakes event, Emitter<PuzzleState> emit) {
    if (state is PuzzleLoaded) {
      final currentState = state as PuzzleLoaded;
      
      // Hata tespit sistemi
      List<List<int>> errorCells = [];
      
      // Grid'i karşılaştır ve hatalı hücreleri bul
      for (int row = 0; row < currentState.gridSize; row++) {
        for (int col = 0; col < currentState.gridSize; col++) {
          // Boş hücreleri atla (henüz doldurulmamış)
          if (currentState.gridState[row][col] == 0) continue;
          
          // Çözümle karşılaştır
          if (currentState.gridState[row][col] != currentState.solution[row][col]) {
            errorCells.add([row, col]);
          }
        }
      }
      
      // State'i güncelle - hataları göster ve canRevealMistakes'ı true yap
      // Artık otomatik kaybolma yok, sadece manuel olarak durdurulabilir
      emit(currentState.copyWith(
        errorCells: errorCells,
        canRevealMistakes: true,
        isChecking: true,
        checkTimestamp: DateTime.now(),
      ));
    }
  }

  // Animasyonu manuel olarak durdur
  void _onStopRevealMistakes(PuzzleStopRevealMistakes event, Emitter<PuzzleState> emit) {
    if (state is PuzzleLoaded) {
      final currentState = state as PuzzleLoaded;
      emit(currentState.copyWith(
        canRevealMistakes: false,
        isChecking: false,
        checkTimestamp: null,
      ));
    }
  }

  // Hata sayısını hesaplayan utility fonksiyon
  static int calculateMistakeCount(PuzzleLoaded state) {
    int mistakeCount = 0;
    
    // Grid'i karşılaştır ve hatalı hücreleri say
    for (int row = 0; row < state.gridSize; row++) {
      for (int col = 0; col < state.gridSize; col++) {
        // Boş hücreleri atla (henüz doldurulmamış)
        if (state.gridState[row][col] == 0) continue;
        
        // Çözümle karşılaştır
        if (state.gridState[row][col] != state.solution[row][col]) {
          mistakeCount++;
        }
      }
    }
    
    return mistakeCount;
  }


}\n\n===== FILE 84/160: lib/bloc/puzzle_events.dart =====\nimport 'package:equatable/equatable.dart';

// Events
abstract class PuzzleEvent extends Equatable {
  const PuzzleEvent();

  @override
  List<Object?> get props => [];
}

class PuzzleCellTapped extends PuzzleEvent {
  final int row;
  final int col;

  const PuzzleCellTapped(this.row, this.col);

  @override
  List<Object?> get props => [row, col];
}

class PuzzleUndo extends PuzzleEvent {}

class PuzzleRedo extends PuzzleEvent {}

class PuzzleHint extends PuzzleEvent {}

class PuzzleReset extends PuzzleEvent {}

class PuzzleCheck extends PuzzleEvent {}

class PuzzleClearErrors extends PuzzleEvent {}

class PuzzleCheckMistakes extends PuzzleEvent {}

class PuzzleRevealMistakes extends PuzzleEvent {}

class PuzzleStopRevealMistakes extends PuzzleEvent {}

class PuzzleLoad extends PuzzleEvent {
  final int stage;
  final int level;
  final List<List<int>> solution;
  final List<List<String?>> horizontalSymbols;
  final List<List<String?>> verticalSymbols;
  final List<List<int>> prefilled;
  final int gridSize;

  const PuzzleLoad({
    required this.stage,
    required this.level,
    required this.solution,
    required this.horizontalSymbols,
    required this.verticalSymbols,
    required this.prefilled,
    required this.gridSize,
  });

  @override
  List<Object?> get props => [stage, level, solution, horizontalSymbols, verticalSymbols, prefilled, gridSize];
} \n\n===== FILE 85/160: lib/bloc/puzzle_states.dart =====\nimport 'package:equatable/equatable.dart';

// States
abstract class PuzzleState extends Equatable {
  const PuzzleState();

  @override
  List<Object?> get props => [];
}

class PuzzleInitial extends PuzzleState {}

class PuzzleLoading extends PuzzleState {}

class PuzzleLoaded extends PuzzleState {
  final int stage;
  final int level;
  final int gridSize;
  final List<List<int>> gridState;
  final List<List<int>> solution;
  final List<List<String?>> horizontalSymbols;
  final List<List<String?>> verticalSymbols;
  final List<List<int>> prefilled;
  final List<List<List<int>>> moveHistory;
  final int currentHistoryIndex;
  final bool isSolved;
  final List<String> errors;
  final int elapsedSeconds;
  final bool isTimerRunning;
  // Hata tespit sistemi için yeni alanlar
  final List<List<int>> errorCells; // Hatalı hücrelerin koordinatları
  final bool isChecking; // Check işlemi devam ediyor mu
  final String checkMessage; // Check sonucu mesajı
  final DateTime? checkTimestamp; // Check zamanı (animasyon için)
  final bool canRevealMistakes; // Reklam izlendikten sonra hataları gösterebilir mi

  const PuzzleLoaded({
    required this.stage,
    required this.level,
    required this.gridSize,
    required this.gridState,
    required this.solution,
    required this.horizontalSymbols,
    required this.verticalSymbols,
    required this.prefilled,
    required this.moveHistory,
    required this.currentHistoryIndex,
    required this.isSolved,
    required this.errors,
    required this.elapsedSeconds,
    required this.isTimerRunning,
    this.errorCells = const [],
    this.isChecking = false,
    this.checkMessage = '',
    this.checkTimestamp,
    this.canRevealMistakes = false,
  });

  PuzzleLoaded copyWith({
    int? stage,
    int? level,
    int? gridSize,
    List<List<int>>? gridState,
    List<List<int>>? solution,
    List<List<String?>>? horizontalSymbols,
    List<List<String?>>? verticalSymbols,
    List<List<int>>? prefilled,
    List<List<List<int>>>? moveHistory,
    int? currentHistoryIndex,
    bool? isSolved,
    List<String>? errors,
    int? elapsedSeconds,
    bool? isTimerRunning,
    List<List<int>>? errorCells,
    bool? isChecking,
    String? checkMessage,
    DateTime? checkTimestamp,
    bool? canRevealMistakes,
  }) {
    return PuzzleLoaded(
      stage: stage ?? this.stage,
      level: level ?? this.level,
      gridSize: gridSize ?? this.gridSize,
      gridState: gridState ?? this.gridState,
      solution: solution ?? this.solution,
      horizontalSymbols: horizontalSymbols ?? this.horizontalSymbols,
      verticalSymbols: verticalSymbols ?? this.verticalSymbols,
      prefilled: prefilled ?? this.prefilled,
      moveHistory: moveHistory ?? this.moveHistory,
      currentHistoryIndex: currentHistoryIndex ?? this.currentHistoryIndex,
      isSolved: isSolved ?? this.isSolved,
      errors: errors ?? this.errors,
      elapsedSeconds: elapsedSeconds ?? this.elapsedSeconds,
      isTimerRunning: isTimerRunning ?? this.isTimerRunning,
      errorCells: errorCells ?? this.errorCells,
      isChecking: isChecking ?? this.isChecking,
      checkMessage: checkMessage ?? this.checkMessage,
      checkTimestamp: checkTimestamp ?? this.checkTimestamp,
      canRevealMistakes: canRevealMistakes ?? this.canRevealMistakes,
    );
  }

  @override
  List<Object?> get props => [
    stage, level, gridSize, gridState, solution, horizontalSymbols, 
    verticalSymbols, prefilled, moveHistory, currentHistoryIndex, 
    isSolved, errors, elapsedSeconds, isTimerRunning, errorCells,
    isChecking, checkMessage, checkTimestamp, canRevealMistakes
  ];
}

class PuzzleError extends PuzzleState {
  final String message;

  const PuzzleError(this.message);

  @override
  List<Object?> get props => [message];
} \n\n===== FILE 86/160: lib/bloc/theme_cubit.dart =====\nimport 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';

import '../services/shared_pref_helper.dart';
import 'theme_state.dart';

class ThemeCubit extends Cubit<ThemeState> {
  ThemeCubit(ThemeMode initialMode)
      : super(ThemeState(themeMode: initialMode));

  Future<void> toggleTheme() async {
    final nextMode = state.themeMode == ThemeMode.dark
        ? ThemeMode.light
        : ThemeMode.dark;
    emit(ThemeState(themeMode: nextMode));
    await SharedPrefHelper.saveThemeMode(nextMode);
  }

  Future<void> setTheme(ThemeMode mode) async {
    emit(ThemeState(themeMode: mode));
    await SharedPrefHelper.saveThemeMode(mode);
  }
}
\n\n===== FILE 87/160: lib/bloc/theme_state.dart =====\nimport 'package:equatable/equatable.dart';
import 'package:flutter/material.dart';

class ThemeState extends Equatable {
  final ThemeMode themeMode;

  const ThemeState({required this.themeMode});

  ThemeState copyWith({ThemeMode? themeMode}) {
    return ThemeState(themeMode: themeMode ?? this.themeMode);
  }

  @override
  List<Object?> get props => [themeMode];

  static const ThemeState light = ThemeState(themeMode: ThemeMode.light);
  static const ThemeState dark = ThemeState(themeMode: ThemeMode.dark);
}
\n\n===== FILE 88/160: lib/config/github_puzzle_config.dart =====\nclass GitHubPuzzleConfig {
  // Public repo (değiştirilebilir)
  static const owner = String.fromEnvironment('GH_OWNER', defaultValue: 'burakturk152');
  static const repo = String.fromEnvironment('GH_REPO', defaultValue: 'sikoku_puzzles');
  static const branch = String.fromEnvironment('GH_BRANCH', defaultValue: 'main');

  // Yol kökleri
  static const dailyDir = 'puzzles/daily';
  static const weeklyDir = 'puzzles/weekly';

  // Zaman aşımı ve TTL'ler
  static const connectTimeoutSec = 12;
  static const readTimeoutSec = 15;
  static const dailyTtlHours = 24; // cache kullanım süresi (hard stop değil; ETag varsa daha iyi)
  static const weeklyTtlDays = 7;

  // Rate limit notu: Public isteklerde 60 req/saat. Biz açılışta en fazla 2–3 istek yapacağız.
}
\n\n===== FILE 89/160: lib/config/puzzle_remote_config.dart =====\nclass PuzzleRemoteConfig {
  // Buraya benim repo baz yolumu koy:
  // Örn: https://burakturk152.github.io/sikoku_puzzles/puzzles
  static const baseUrl = String.fromEnvironment(
    'PUZZLE_CDN_BASE',
    defaultValue: 'https://burakturk152.github.io/sikoku_puzzles/puzzles',
  );

  static const dailyPath = 'daily';
  static const weeklyPath = 'weekly';
  static const connectTimeout = Duration(seconds: 12);
  static const readTimeout = Duration(seconds: 15);
  static const dailyTtl = Duration(hours: 24);
  static const weeklyTtl = Duration(days: 7);
}
\n\n===== FILE 90/160: lib/config/universe_config.dart =====\nimport 'package:shared_preferences/shared_preferences.dart';
import 'package:flutter/material.dart';
import '../l10n/app_localizations.dart';

class UniverseData {
  final String backgroundImage;
  final String name;
  final String theme;
  final int maxLevels;
  final bool isUnlocked;
  final String description;
  final String cellImage1; // state == 1 için görsel
  final String cellImage2; // state == 2 için görsel

  const UniverseData({
    required this.backgroundImage,
    required this.name,
    required this.theme,
    required this.maxLevels,
    required this.isUnlocked,
    required this.description,
    required this.cellImage1,
    required this.cellImage2,
  });
}

class UniverseConfig {
  static Map<int, UniverseData> getUniverses(BuildContext context) {
    final l10n = AppLocalizations.of(context)!;
    return {
      1: UniverseData(
        backgroundImage: 'assets/images/background-stage1.png',
        name: l10n.spaceUniverse,
        theme: 'space',
        maxLevels: 50,
        isUnlocked: true, // İlk evren her zaman açık
        description: l10n.spaceUniverseDescription,
        cellImage1: 'assets/images/earth.png', // Mavi hücreler için
        cellImage2: 'assets/images/sunny.png', // Sarı hücreler için
      ),
      2: UniverseData(
        backgroundImage: 'assets/images/background-stage2.png',
        name: l10n.forestUniverse,
        theme: 'forest',
        maxLevels: 50,
        isUnlocked: false, // Evren 1 tamamlandığında açılacak
        description: l10n.forestUniverseDescription,
        cellImage1: 'assets/images/blueberry.png', // Mavi hücreler için
        cellImage2: 'assets/images/banana.png', // Sarı hücreler için
      ),
    };
  }

  // Mevcut evreni getir
  static UniverseData getUniverse(int universeId, BuildContext context) {
    final universes = getUniverses(context);
    return universes[universeId] ?? universes[1]!;
  }

  // Tüm evrenleri getir
  static List<UniverseData> getAllUniverses(BuildContext context) {
    return getUniverses(context).values.toList();
  }

  // Evren kilidini kontrol et
  static bool isUniverseUnlocked(int universeId, BuildContext context) {
    final universes = getUniverses(context);
    return universes[universeId]?.isUnlocked ?? false;
  }

  // Evren kilidini aç
  static Future<void> unlockUniverse(int universeId) async {
    // SharedPreferences ile evren kilidini aç
    final prefs = await SharedPreferences.getInstance();
    await prefs.setBool('universe_${universeId}_unlocked', true);
  }

  // Evren kilidini kapat
  static Future<void> lockUniverse(int universeId) async {
    // SharedPreferences ile evren kilidini kapat
    final prefs = await SharedPreferences.getInstance();
    await prefs.setBool('universe_${universeId}_unlocked', false);
  }

  // Evren kilidini kontrol et (SharedPreferences'tan)
  static Future<bool> isUniverseUnlockedFromPrefs(int universeId) async {
    if (universeId == 1) return true; // İlk evren her zaman açık
    
    final prefs = await SharedPreferences.getInstance();
    return prefs.getBool('universe_${universeId}_unlocked') ?? false;
  }

  // Evren sayısını getir
  static int getUniverseCount() {
    return 2; // Sabit sayı
  }
}
\n\n===== FILE 91/160: lib/core/notification_service.dart =====\nimport 'dart:io';
import 'package:flutter_local_notifications/flutter_local_notifications.dart';
import 'package:timezone/timezone.dart' as tz;
import 'package:timezone/data/latest.dart' as tz;

import 'package:flutter/material.dart';

class NotificationService {
  static final NotificationService _instance = NotificationService._internal();
  factory NotificationService() => _instance;
  NotificationService._internal();

  final FlutterLocalNotificationsPlugin _plugin = FlutterLocalNotificationsPlugin();
  bool _isSupportedPlatform = Platform.isAndroid || Platform.isIOS;

  // Notification IDs
  static const int _dailyId = 1;
  static const int _weeklyId = 2;

  // Notification times
  static const int DAILY_HOUR = 9;
  static const int DAILY_MINUTE = 0;
  static const int WEEKLY_WEEKDAY = DateTime.monday;
  static const int WEEKLY_HOUR = 10;
  static const int WEEKLY_MINUTE = 0;

  Future<void> initialize() async {
    if (!_isSupportedPlatform) return;

    tz.initializeTimeZones();

    const AndroidInitializationSettings androidInit = AndroidInitializationSettings('@mipmap/ic_launcher');
    const DarwinInitializationSettings iosInit = DarwinInitializationSettings(
      requestAlertPermission: true,
      requestBadgePermission: true,
      requestSoundPermission: true,
    );
    const initSettings = InitializationSettings(android: androidInit, iOS: iosInit);
    await _plugin.initialize(initSettings);

    const AndroidNotificationChannel channel = AndroidNotificationChannel(
      'sikkoku_channel',
      'Sikkoku Notifications',
      description: 'Sikkoku reminder notification channel',
      importance: Importance.high,
    );
    await _plugin
        .resolvePlatformSpecificImplementation<AndroidFlutterLocalNotificationsPlugin>()
        ?.createNotificationChannel(channel);
  }

  Future<bool> requestPermission() async {
    if (!_isSupportedPlatform) return true; // Desktop/Web: izin gereksiz, no-op
    if (Platform.isIOS) {
      final result = await _plugin
          .resolvePlatformSpecificImplementation<IOSFlutterLocalNotificationsPlugin>()
          ?.requestPermissions(alert: true, badge: true, sound: true);
      return result ?? false;
    }
    if (Platform.isAndroid) {
      final android = _plugin
          .resolvePlatformSpecificImplementation<AndroidFlutterLocalNotificationsPlugin>();
      try {
        final dyn = android as dynamic;
        final granted = await dyn.requestPermission?.call();
        if (granted is bool) return granted;
      } catch (_) {}
      final enabled = await android?.areNotificationsEnabled();
      return enabled ?? true;
    }
    return true;
  }

  Future<void> scheduleDaily(BuildContext context) async {
    if (!_isSupportedPlatform) return;
    await cancelDaily();
    final tz.TZDateTime scheduled = _nextInstanceOfFixedTime(DAILY_HOUR, DAILY_MINUTE);

    await _plugin.zonedSchedule(
      _dailyId,
      'Daily Puzzle',
      'Don\'t forget to solve today\'s puzzle!',
      scheduled,
      NotificationDetails(
        android: AndroidNotificationDetails(
          'sikkoku_channel',
          'Sikkoku Notifications',
          channelDescription: 'Sikkoku reminder notification channel',
          importance: Importance.high,
          priority: Priority.high,
          icon: '@mipmap/ic_stat_sikkoku',
        ),
        iOS: const DarwinNotificationDetails(),
      ),
      androidScheduleMode: AndroidScheduleMode.exactAllowWhileIdle,
      uiLocalNotificationDateInterpretation: UILocalNotificationDateInterpretation.wallClockTime,
      matchDateTimeComponents: DateTimeComponents.time,
    );
  }

  Future<void> cancelDaily() async {
    if (!_isSupportedPlatform) return;
    await _plugin.cancel(_dailyId);
  }

  Future<void> scheduleWeekly(BuildContext context) async {
    if (!_isSupportedPlatform) return;
    await cancelWeekly();
    final tz.TZDateTime scheduled = _nextInstanceOfFixedWeekday(WEEKLY_WEEKDAY, WEEKLY_HOUR, WEEKLY_MINUTE);

    await _plugin.zonedSchedule(
      _weeklyId,
      'Weekly Puzzle',
      'Don\'t miss the weekly puzzle!',
      scheduled,
      NotificationDetails(
        android: AndroidNotificationDetails(
          'sikkoku_channel',
          'Sikkoku Notifications',
          channelDescription: 'Sikkoku reminder notification channel',
          importance: Importance.high,
          priority: Priority.high,
          icon: '@mipmap/ic_stat_sikkoku',
        ),
        iOS: const DarwinNotificationDetails(),
      ),
      androidScheduleMode: AndroidScheduleMode.exactAllowWhileIdle,
      uiLocalNotificationDateInterpretation: UILocalNotificationDateInterpretation.wallClockTime,
      matchDateTimeComponents: DateTimeComponents.dayOfWeekAndTime,
    );
  }

  Future<void> cancelWeekly() async {
    if (!_isSupportedPlatform) return;
    await _plugin.cancel(_weeklyId);
  }

  tz.TZDateTime _nextInstanceOfFixedTime(int hour, int minute) {
    final tz.TZDateTime now = tz.TZDateTime.now(tz.local);
    tz.TZDateTime scheduledDate = tz.TZDateTime(tz.local, now.year, now.month, now.day, hour, minute);
    if (scheduledDate.isBefore(now)) {
      scheduledDate = scheduledDate.add(const Duration(days: 1));
    }
    return scheduledDate;
  }

  tz.TZDateTime _nextInstanceOfFixedWeekday(int weekday, int hour, int minute) {
    final tz.TZDateTime now = tz.TZDateTime.now(tz.local);
    tz.TZDateTime scheduledDate = tz.TZDateTime(tz.local, now.year, now.month, now.day, hour, minute);
    
    while (scheduledDate.weekday != weekday) {
      scheduledDate = scheduledDate.add(const Duration(days: 1));
    }
    
    if (scheduledDate.isBefore(now)) {
      scheduledDate = scheduledDate.add(const Duration(days: 7));
    }
    
    return scheduledDate;
  }
}
\n\n===== FILE 92/160: lib/i18n/locale_cubit.dart =====\nimport 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'locale_repository.dart';
import 'locale_state.dart';

class LocaleCubit extends Cubit<LocaleState> {
  final LocaleRepository _repository;

  LocaleCubit(this._repository) : super(LocaleState.initial());

  Future<void> init() async {
    final savedLocale = await _repository.load();
    final locale = savedLocale ?? const Locale('tr', 'TR');
    
    emit(LocaleState(
      activeLocale: locale,
      pendingLocale: locale,
    ));
  }

  void setPending(Locale locale) {
    emit(state.copyWith(pendingLocale: locale));
  }

  Future<void> apply() async {
    await _repository.save(state.pendingLocale);
    emit(state.copyWith(activeLocale: state.pendingLocale));
  }
}
\n\n===== FILE 93/160: lib/i18n/locale_repository.dart =====\nimport 'package:flutter/material.dart';
import 'package:shared_preferences/shared_preferences.dart';

class LocaleRepository {
  static const String _key = 'app_locale_v1';

  Future<Locale?> load() async {
    final prefs = await SharedPreferences.getInstance();
    final localeString = prefs.getString(_key);
    
    if (localeString == null) return null;
    
    // "tr_TR" -> Locale('tr', 'TR')
    final parts = localeString.split('_');
    if (parts.length == 2) {
      return Locale(parts[0], parts[1]);
    }
    
    return null;
  }

  Future<void> save(Locale locale) async {
    final prefs = await SharedPreferences.getInstance();
    final localeString = '${locale.languageCode}_${locale.countryCode}';
    await prefs.setString(_key, localeString);
  }
}
\n\n===== FILE 94/160: lib/i18n/locale_state.dart =====\nimport 'package:flutter/material.dart';

class LocaleState {
  final Locale activeLocale;
  final Locale pendingLocale;

  const LocaleState({
    required this.activeLocale,
    required this.pendingLocale,
  });

  factory LocaleState.initial() {
    const defaultLocale = Locale('tr', 'TR');
    return LocaleState(
      activeLocale: defaultLocale,
      pendingLocale: defaultLocale,
    );
  }

  LocaleState copyWith({
    Locale? activeLocale,
    Locale? pendingLocale,
  }) {
    return LocaleState(
      activeLocale: activeLocale ?? this.activeLocale,
      pendingLocale: pendingLocale ?? this.pendingLocale,
    );
  }

  bool get hasPendingChanges => activeLocale != pendingLocale;
}
\n\n===== FILE 95/160: lib/inventory/inventory_cubit.dart =====\nimport 'package:flutter_bloc/flutter_bloc.dart';
import 'inventory_model.dart';
import 'inventory_repository.dart';
import 'inventory_state.dart';

class InventoryCubit extends Cubit<InventoryState> {
  final InventoryRepository _repository;

  InventoryCubit(this._repository) : super(InventoryState.initial());

  Future<void> init() async {
    emit(state.copyWith(status: InventoryStatus.loading));
    
    try {
      final model = await _repository.load();
      emit(state.copyWith(
        model: model,
        status: InventoryStatus.idle,
      ));
    } catch (e) {
      emit(state.copyWith(
        status: InventoryStatus.error,
        errorMessage: 'Envanter yüklenemedi: $e',
      ));
    }
  }

  Future<bool> useHint() async {
    if (state.model.hintCount <= 0) {
      emit(state.copyWith(
        status: InventoryStatus.error,
        errorMessage: 'Yetersiz Hint',
      ));
      return false;
    }

    try {
      emit(state.copyWith(status: InventoryStatus.saving));
      
      final newModel = state.model.copyWith(
        hintCount: state.model.hintCount - 1,
      );
      
      await _repository.save(newModel);
      
      emit(state.copyWith(
        model: newModel,
        status: InventoryStatus.idle,
      ));
      
      return true;
    } catch (e) {
      emit(state.copyWith(
        status: InventoryStatus.error,
        errorMessage: 'Hint kullanılamadı: $e',
      ));
      return false;
    }
  }

  Future<bool> useUndo() async {
    if (state.model.undoCount <= 0) {
      emit(state.copyWith(
        status: InventoryStatus.error,
        errorMessage: 'Yetersiz Undo',
      ));
      return false;
    }

    try {
      emit(state.copyWith(status: InventoryStatus.saving));
      
      final newModel = state.model.copyWith(
        undoCount: state.model.undoCount - 1,
      );
      
      await _repository.save(newModel);
      
      emit(state.copyWith(
        model: newModel,
        status: InventoryStatus.idle,
      ));
      
      return true;
    } catch (e) {
      emit(state.copyWith(
        status: InventoryStatus.error,
        errorMessage: 'Undo kullanılamadı: $e',
      ));
      return false;
    }
  }

  Future<bool> useCheck() async {
    if (state.model.checkCount <= 0) {
      emit(state.copyWith(
        status: InventoryStatus.error,
        errorMessage: 'Yetersiz Check',
      ));
      return false;
    }

    try {
      emit(state.copyWith(status: InventoryStatus.saving));
      
      final newModel = state.model.copyWith(
        checkCount: state.model.checkCount - 1,
      );
      
      await _repository.save(newModel);
      
      emit(state.copyWith(
        model: newModel,
        status: InventoryStatus.idle,
      ));
      
      return true;
    } catch (e) {
      emit(state.copyWith(
        status: InventoryStatus.error,
        errorMessage: 'Check kullanılamadı: $e',
      ));
      return false;
    }
  }

  Future<void> addItems({
    int hint = 0,
    int undo = 0,
    int check = 0,
  }) async {
    try {
      emit(state.copyWith(status: InventoryStatus.saving));
      
      final newModel = state.model.copyWith(
        hintCount: state.model.hintCount + hint,
        undoCount: state.model.undoCount + undo,
        checkCount: state.model.checkCount + check,
      );
      
      await _repository.save(newModel);
      
      emit(state.copyWith(
        model: newModel,
        status: InventoryStatus.idle,
      ));
    } catch (e) {
      emit(state.copyWith(
        status: InventoryStatus.error,
        errorMessage: 'Envanter güncellenemedi: $e',
      ));
    }
  }

  Future<void> addHints(int count) async {
    await addItems(hint: count);
  }

  Future<void> addUndos(int count) async {
    await addItems(undo: count);
  }

  Future<void> addChecks(int count) async {
    await addItems(check: count);
  }

  Future<void> reset() async {
    try {
      emit(state.copyWith(status: InventoryStatus.saving));
      
      await _repository.reset();
      final defaults = InventoryModel.defaults();
      await _repository.save(defaults);
      
      emit(state.copyWith(
        model: defaults,
        status: InventoryStatus.idle,
      ));
    } catch (e) {
      emit(state.copyWith(
        status: InventoryStatus.error,
        errorMessage: 'Envanter sıfırlanamadı: $e',
      ));
    }
  }
}
\n\n===== FILE 96/160: lib/inventory/inventory_model.dart =====\nclass InventoryModel {
  final int hintCount;
  final int undoCount;
  final int checkCount;

  const InventoryModel({
    required this.hintCount,
    required this.undoCount,
    required this.checkCount,
  });

  factory InventoryModel.defaults() => const InventoryModel(
    hintCount: 1,
    undoCount: 1,
    checkCount: 1,
  );

  Map<String, dynamic> toJson() {
    return {
      'hintCount': hintCount,
      'undoCount': undoCount,
      'checkCount': checkCount,
    };
  }

  factory InventoryModel.fromJson(Map<String, dynamic> json) {
    return InventoryModel(
      hintCount: json['hintCount'] ?? 1,
      undoCount: json['undoCount'] ?? 1,
      checkCount: json['checkCount'] ?? 1,
    );
  }

  InventoryModel copyWith({
    int? hintCount,
    int? undoCount,
    int? checkCount,
  }) {
    return InventoryModel(
      hintCount: hintCount ?? this.hintCount,
      undoCount: undoCount ?? this.undoCount,
      checkCount: checkCount ?? this.checkCount,
    );
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) return true;
    return other is InventoryModel &&
        other.hintCount == hintCount &&
        other.undoCount == undoCount &&
        other.checkCount == checkCount;
  }

  @override
  int get hashCode => hintCount.hashCode ^ undoCount.hashCode ^ checkCount.hashCode;
}
\n\n===== FILE 97/160: lib/inventory/inventory_repository.dart =====\nimport 'package:shared_preferences/shared_preferences.dart';
import 'dart:convert';
import 'inventory_model.dart';

class InventoryRepository {
  static const String _key = 'inventory_v1';

  Future<InventoryModel> load() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final jsonString = prefs.getString(_key);
      
      if (jsonString != null) {
        try {
          final json = jsonDecode(jsonString) as Map<String, dynamic>;
          return InventoryModel.fromJson(json);
        } catch (parseError) {
          print('Error parsing inventory JSON: $parseError');
          // Eski veri formatı varsa sil ve defaults döndür
          await prefs.remove(_key);
          return InventoryModel.defaults();
        }
      }
      
      // İlk kez yükleniyorsa defaults kaydet
      final defaults = InventoryModel.defaults();
      await save(defaults);
      return defaults;
    } catch (e) {
      print('Error loading inventory: $e');
      return InventoryModel.defaults();
    }
  }

  Future<void> save(InventoryModel model) async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final jsonString = jsonEncode(model.toJson());
      await prefs.setString(_key, jsonString);
    } catch (e) {
      print('Error saving inventory: $e');
    }
  }

  Future<void> reset() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      await prefs.remove(_key);
    } catch (e) {
      print('Error resetting inventory: $e');
    }
  }
}
\n\n===== FILE 98/160: lib/inventory/inventory_state.dart =====\nimport 'package:equatable/equatable.dart';
import 'inventory_model.dart';

enum InventoryStatus { idle, loading, saving, error }

class InventoryState extends Equatable {
  final InventoryModel model;
  final InventoryStatus status;
  final String? errorMessage;

  const InventoryState({
    required this.model,
    this.status = InventoryStatus.idle,
    this.errorMessage,
  });

  factory InventoryState.initial() {
    return InventoryState(
      model: InventoryModel.defaults(),
      status: InventoryStatus.idle,
    );
  }

  InventoryState copyWith({
    InventoryModel? model,
    InventoryStatus? status,
    String? errorMessage,
  }) {
    return InventoryState(
      model: model ?? this.model,
      status: status ?? this.status,
      errorMessage: errorMessage,
    );
  }

  // UI için kolay erişim metodları
  bool get hasHint => model.hintCount > 0;
  bool get hasUndo => model.undoCount > 0;
  bool get hasCheck => model.checkCount > 0;

  @override
  List<Object?> get props => [model, status, errorMessage];
}
\n\n===== FILE 99/160: lib/l10n/app_localizations.dart =====\nimport 'dart:async';

import 'package:flutter/foundation.dart';
import 'package:flutter/widgets.dart';
import 'package:flutter_localizations/flutter_localizations.dart';
import 'package:intl/intl.dart' as intl;

import 'app_localizations_en.dart';
import 'app_localizations_tr.dart';

// ignore_for_file: type=lint

/// Callers can lookup localized strings with an instance of AppLocalizations
/// returned by `AppLocalizations.of(context)`.
///
/// Applications need to include `AppLocalizations.delegate()` in their app's
/// `localizationDelegates` list, and the locales they support in the app's
/// `supportedLocales` list. For example:
///
/// ```dart
/// import 'l10n/app_localizations.dart';
///
/// return MaterialApp(
///   localizationsDelegates: AppLocalizations.localizationsDelegates,
///   supportedLocales: AppLocalizations.supportedLocales,
///   home: MyApplicationHome(),
/// );
/// ```
///
/// ## Update pubspec.yaml
///
/// Please make sure to update your pubspec.yaml to include the following
/// packages:
///
/// ```yaml
/// dependencies:
///   # Internationalization support.
///   flutter_localizations:
///     sdk: flutter
///   intl: any # Use the pinned version from flutter_localizations
///
///   # Rest of dependencies
/// ```
///
/// ## iOS Applications
///
/// iOS applications define key application metadata, including supported
/// locales, in an Info.plist file that is built into the application bundle.
/// To configure the locales supported by your app, you’ll need to edit this
/// file.
///
/// First, open your project’s ios/Runner.xcworkspace Xcode workspace file.
/// Then, in the Project Navigator, open the Info.plist file under the Runner
/// project’s Runner folder.
///
/// Next, select the Information Property List item, select Add Item from the
/// Editor menu, then select Localizations from the pop-up menu.
///
/// Select and expand the newly-created Localizations item then, for each
/// locale your application supports, add a new item and select the locale
/// you wish to add from the pop-up menu in the Value field. This list should
/// be consistent with the languages listed in the AppLocalizations.supportedLocales
/// property.
abstract class AppLocalizations {
  AppLocalizations(String locale) : localeName = intl.Intl.canonicalizedLocale(locale.toString());

  final String localeName;

  static AppLocalizations? of(BuildContext context) {
    return Localizations.of<AppLocalizations>(context, AppLocalizations);
  }

  static const LocalizationsDelegate<AppLocalizations> delegate = _AppLocalizationsDelegate();

  /// A list of this localizations delegate along with the default localizations
  /// delegates.
  ///
  /// Returns a list of localizations delegates containing this delegate along with
  /// GlobalMaterialLocalizations.delegate, GlobalCupertinoLocalizations.delegate,
  /// and GlobalWidgetsLocalizations.delegate.
  ///
  /// Additional delegates can be added by appending to this list in
  /// MaterialApp. This list does not have to be used at all if a custom list
  /// of delegates is preferred or required.
  static const List<LocalizationsDelegate<dynamic>> localizationsDelegates = <LocalizationsDelegate<dynamic>>[
    delegate,
    GlobalMaterialLocalizations.delegate,
    GlobalCupertinoLocalizations.delegate,
    GlobalWidgetsLocalizations.delegate,
  ];

  /// A list of this localizations delegate's supported locales.
  static const List<Locale> supportedLocales = <Locale>[
    Locale('en'),
    Locale('tr')
  ];

  /// No description provided for @appTitle.
  ///
  /// In en, this message translates to:
  /// **'Sikoku'**
  String get appTitle;

  /// No description provided for @player.
  ///
  /// In en, this message translates to:
  /// **'Player'**
  String get player;

  /// No description provided for @settings.
  ///
  /// In en, this message translates to:
  /// **'Settings'**
  String get settings;

  /// No description provided for @vibration.
  ///
  /// In en, this message translates to:
  /// **'Vibration'**
  String get vibration;

  /// No description provided for @music.
  ///
  /// In en, this message translates to:
  /// **'Music'**
  String get music;

  /// No description provided for @soundEffects.
  ///
  /// In en, this message translates to:
  /// **'Sound Effects'**
  String get soundEffects;

  /// No description provided for @soundVolume.
  ///
  /// In en, this message translates to:
  /// **'Sound Volume'**
  String get soundVolume;

  /// No description provided for @notifications.
  ///
  /// In en, this message translates to:
  /// **'Notifications'**
  String get notifications;

  /// No description provided for @remindDailyPuzzle.
  ///
  /// In en, this message translates to:
  /// **'Remind daily puzzle'**
  String get remindDailyPuzzle;

  /// No description provided for @remindWeeklyPuzzle.
  ///
  /// In en, this message translates to:
  /// **'Remind weekly puzzle'**
  String get remindWeeklyPuzzle;

  /// No description provided for @control.
  ///
  /// In en, this message translates to:
  /// **'Check'**
  String get control;

  /// No description provided for @hint.
  ///
  /// In en, this message translates to:
  /// **'Hint'**
  String get hint;

  /// No description provided for @undo.
  ///
  /// In en, this message translates to:
  /// **'Undo'**
  String get undo;

  /// No description provided for @redo.
  ///
  /// In en, this message translates to:
  /// **'Redo'**
  String get redo;

  /// No description provided for @delete.
  ///
  /// In en, this message translates to:
  /// **'Delete'**
  String get delete;

  /// No description provided for @market.
  ///
  /// In en, this message translates to:
  /// **'Shop'**
  String get market;

  /// No description provided for @profile.
  ///
  /// In en, this message translates to:
  /// **'Profile'**
  String get profile;

  /// No description provided for @winsCongratsTitle.
  ///
  /// In en, this message translates to:
  /// **'Congratulations!'**
  String get winsCongratsTitle;

  /// No description provided for @winsCongratsBody.
  ///
  /// In en, this message translates to:
  /// **'You won the level.'**
  String get winsCongratsBody;

  /// No description provided for @errorsFound.
  ///
  /// In en, this message translates to:
  /// **'Total mistakes: {count}'**
  String errorsFound(int count);

  /// No description provided for @noErrors.
  ///
  /// In en, this message translates to:
  /// **'No mistakes. Great!'**
  String get noErrors;

  /// No description provided for @daily.
  ///
  /// In en, this message translates to:
  /// **'Daily'**
  String get daily;

  /// No description provided for @weekly.
  ///
  /// In en, this message translates to:
  /// **'Weekly'**
  String get weekly;

  /// No description provided for @chooseAvatar.
  ///
  /// In en, this message translates to:
  /// **'Choose Avatar'**
  String get chooseAvatar;

  /// No description provided for @statistics.
  ///
  /// In en, this message translates to:
  /// **'Statistics'**
  String get statistics;

  /// No description provided for @totalStars.
  ///
  /// In en, this message translates to:
  /// **'Total Stars'**
  String get totalStars;

  /// No description provided for @fastest.
  ///
  /// In en, this message translates to:
  /// **'Fastest'**
  String get fastest;

  /// No description provided for @noMistakes.
  ///
  /// In en, this message translates to:
  /// **'No mistakes'**
  String get noMistakes;

  /// No description provided for @achievements.
  ///
  /// In en, this message translates to:
  /// **'Achievements'**
  String get achievements;

  /// No description provided for @firstDailyPuzzle.
  ///
  /// In en, this message translates to:
  /// **'First Daily Puzzle'**
  String get firstDailyPuzzle;

  /// No description provided for @sevenDaysInARow.
  ///
  /// In en, this message translates to:
  /// **'7 Days in a Row'**
  String get sevenDaysInARow;

  /// No description provided for @hundredPuzzles.
  ///
  /// In en, this message translates to:
  /// **'100 Puzzles'**
  String get hundredPuzzles;

  /// No description provided for @accountConnections.
  ///
  /// In en, this message translates to:
  /// **'Account Connections'**
  String get accountConnections;

  /// No description provided for @google.
  ///
  /// In en, this message translates to:
  /// **'Google'**
  String get google;

  /// No description provided for @apple.
  ///
  /// In en, this message translates to:
  /// **'Apple'**
  String get apple;

  /// No description provided for @facebook.
  ///
  /// In en, this message translates to:
  /// **'Facebook'**
  String get facebook;

  /// No description provided for @soundMusic.
  ///
  /// In en, this message translates to:
  /// **'Sound / Music'**
  String get soundMusic;

  /// No description provided for @adminModeTitle.
  ///
  /// In en, this message translates to:
  /// **'Admin Mode (Unlimited Hint/Undo/Check)'**
  String get adminModeTitle;

  /// No description provided for @adminModeDesc.
  ///
  /// In en, this message translates to:
  /// **'For testing. Normal limits apply when disabled.'**
  String get adminModeDesc;

  /// No description provided for @language.
  ///
  /// In en, this message translates to:
  /// **'Language'**
  String get language;

  /// No description provided for @apply.
  ///
  /// In en, this message translates to:
  /// **'Apply'**
  String get apply;

  /// No description provided for @resetProgress.
  ///
  /// In en, this message translates to:
  /// **'Reset Progress'**
  String get resetProgress;

  /// No description provided for @controlDialogTitle.
  ///
  /// In en, this message translates to:
  /// **'Check'**
  String get controlDialogTitle;

  /// No description provided for @watchAdToSeeMistakes.
  ///
  /// In en, this message translates to:
  /// **'Watch ad to see mistakes'**
  String get watchAdToSeeMistakes;

  /// No description provided for @close.
  ///
  /// In en, this message translates to:
  /// **'Close'**
  String get close;

  /// No description provided for @back.
  ///
  /// In en, this message translates to:
  /// **'Back'**
  String get back;

  /// No description provided for @highlight.
  ///
  /// In en, this message translates to:
  /// **'Highlight'**
  String get highlight;

  /// No description provided for @check.
  ///
  /// In en, this message translates to:
  /// **'Check'**
  String get check;

  /// No description provided for @dailyReward.
  ///
  /// In en, this message translates to:
  /// **'Daily Reward'**
  String get dailyReward;

  /// No description provided for @watchAdForReward.
  ///
  /// In en, this message translates to:
  /// **'Watch Ad for Reward'**
  String get watchAdForReward;

  /// No description provided for @inventory.
  ///
  /// In en, this message translates to:
  /// **'Inventory'**
  String get inventory;

  /// No description provided for @packages.
  ///
  /// In en, this message translates to:
  /// **'Packages'**
  String get packages;

  /// No description provided for @individualItems.
  ///
  /// In en, this message translates to:
  /// **'Individual Items'**
  String get individualItems;

  /// No description provided for @buy.
  ///
  /// In en, this message translates to:
  /// **'Buy'**
  String get buy;

  /// No description provided for @purchased.
  ///
  /// In en, this message translates to:
  /// **'Purchased'**
  String get purchased;

  /// No description provided for @rewardClaimed.
  ///
  /// In en, this message translates to:
  /// **'Reward Claimed'**
  String get rewardClaimed;

  /// No description provided for @watchAd.
  ///
  /// In en, this message translates to:
  /// **'Watch Ad'**
  String get watchAd;

  /// No description provided for @package.
  ///
  /// In en, this message translates to:
  /// **'Package'**
  String get package;

  /// No description provided for @items.
  ///
  /// In en, this message translates to:
  /// **'items'**
  String get items;

  /// No description provided for @selectUniverse.
  ///
  /// In en, this message translates to:
  /// **'Select Universe'**
  String get selectUniverse;

  /// No description provided for @dailyPuzzle.
  ///
  /// In en, this message translates to:
  /// **'Daily Puzzle'**
  String get dailyPuzzle;

  /// No description provided for @weeklyPuzzle.
  ///
  /// In en, this message translates to:
  /// **'Weekly Puzzle'**
  String get weeklyPuzzle;

  /// No description provided for @puzzleCompletedIn.
  ///
  /// In en, this message translates to:
  /// **'You completed the puzzle in {time}!'**
  String puzzleCompletedIn(String time);

  /// No description provided for @perfect3Stars.
  ///
  /// In en, this message translates to:
  /// **'Perfect! You earned 3 stars!'**
  String get perfect3Stars;

  /// No description provided for @great2Stars.
  ///
  /// In en, this message translates to:
  /// **'Great! You earned 2 stars!'**
  String get great2Stars;

  /// No description provided for @good1Star.
  ///
  /// In en, this message translates to:
  /// **'Good! You earned 1 star!'**
  String get good1Star;

  /// No description provided for @puzzleCompleted.
  ///
  /// In en, this message translates to:
  /// **'Puzzle completed!'**
  String get puzzleCompleted;

  /// No description provided for @rewardEarned.
  ///
  /// In en, this message translates to:
  /// **'Reward Earned: {reward}'**
  String rewardEarned(String reward);

  /// No description provided for @congratulationsReward.
  ///
  /// In en, this message translates to:
  /// **'Congratulations! You earned {reward} reward!'**
  String congratulationsReward(String reward);

  /// No description provided for @dailyRewardTitle.
  ///
  /// In en, this message translates to:
  /// **'Daily Reward'**
  String get dailyRewardTitle;

  /// No description provided for @weeklyRewardTitle.
  ///
  /// In en, this message translates to:
  /// **'Weekly Reward'**
  String get weeklyRewardTitle;

  /// No description provided for @alreadyCompletedDaily.
  ///
  /// In en, this message translates to:
  /// **'You have already completed this daily puzzle.\nYou have already claimed your reward!'**
  String get alreadyCompletedDaily;

  /// No description provided for @alreadyCompletedWeekly.
  ///
  /// In en, this message translates to:
  /// **'You have already completed this weekly puzzle.\nYou have already claimed your reward!'**
  String get alreadyCompletedWeekly;

  /// No description provided for @claimReward.
  ///
  /// In en, this message translates to:
  /// **'Claim Reward'**
  String get claimReward;

  /// No description provided for @continueButton.
  ///
  /// In en, this message translates to:
  /// **'Continue'**
  String get continueButton;

  /// No description provided for @levelsCompletedSuccessfully.
  ///
  /// In en, this message translates to:
  /// **'49 levels completed successfully!'**
  String get levelsCompletedSuccessfully;

  /// No description provided for @vibrationTestCompleted.
  ///
  /// In en, this message translates to:
  /// **'Vibration test completed!'**
  String get vibrationTestCompleted;

  /// No description provided for @vibrationTest.
  ///
  /// In en, this message translates to:
  /// **'Vibration Test'**
  String get vibrationTest;

  /// No description provided for @insufficientHints.
  ///
  /// In en, this message translates to:
  /// **'Insufficient Hints'**
  String get insufficientHints;

  /// No description provided for @vibrationTriggered.
  ///
  /// In en, this message translates to:
  /// **'Vibration triggered: {event}'**
  String vibrationTriggered(String event);

  /// No description provided for @levelCompleted.
  ///
  /// In en, this message translates to:
  /// **'level completed'**
  String get levelCompleted;

  /// No description provided for @dontForgetDaily.
  ///
  /// In en, this message translates to:
  /// **'Don\'t forget to solve today\'s puzzle!'**
  String get dontForgetDaily;

  /// No description provided for @dontMissWeekly.
  ///
  /// In en, this message translates to:
  /// **'Don\'t miss the weekly puzzle!'**
  String get dontMissWeekly;

  /// No description provided for @sikkokuNotifications.
  ///
  /// In en, this message translates to:
  /// **'Sikkoku Notifications'**
  String get sikkokuNotifications;

  /// No description provided for @sikkokuChannelDescription.
  ///
  /// In en, this message translates to:
  /// **'Sikkoku reminder notification channel'**
  String get sikkokuChannelDescription;

  /// No description provided for @spaceUniverse.
  ///
  /// In en, this message translates to:
  /// **'Space Universe'**
  String get spaceUniverse;

  /// No description provided for @spaceUniverseDescription.
  ///
  /// In en, this message translates to:
  /// **'Ready for an interstellar journey?'**
  String get spaceUniverseDescription;

  /// No description provided for @forestUniverse.
  ///
  /// In en, this message translates to:
  /// **'Forest Universe'**
  String get forestUniverse;

  /// No description provided for @forestUniverseDescription.
  ///
  /// In en, this message translates to:
  /// **'Time to explore the depths of green forests!'**
  String get forestUniverseDescription;
}

class _AppLocalizationsDelegate extends LocalizationsDelegate<AppLocalizations> {
  const _AppLocalizationsDelegate();

  @override
  Future<AppLocalizations> load(Locale locale) {
    return SynchronousFuture<AppLocalizations>(lookupAppLocalizations(locale));
  }

  @override
  bool isSupported(Locale locale) => <String>['en', 'tr'].contains(locale.languageCode);

  @override
  bool shouldReload(_AppLocalizationsDelegate old) => false;
}

AppLocalizations lookupAppLocalizations(Locale locale) {


  // Lookup logic when only language code is specified.
  switch (locale.languageCode) {
    case 'en': return AppLocalizationsEn();
    case 'tr': return AppLocalizationsTr();
  }

  throw FlutterError(
    'AppLocalizations.delegate failed to load unsupported locale "$locale". This is likely '
    'an issue with the localizations generation tool. Please file an issue '
    'on GitHub with a reproducible sample app and the gen-l10n configuration '
    'that was used.'
  );
}
\n\n===== FILE 100/160: lib/l10n/app_localizations_en.dart =====\n// ignore: unused_import
import 'package:intl/intl.dart' as intl;
import 'app_localizations.dart';

// ignore_for_file: type=lint

/// The translations for English (`en`).
class AppLocalizationsEn extends AppLocalizations {
  AppLocalizationsEn([String locale = 'en']) : super(locale);

  @override
  String get appTitle => 'Sikoku';

  @override
  String get player => 'Player';

  @override
  String get settings => 'Settings';

  @override
  String get vibration => 'Vibration';

  @override
  String get music => 'Music';

  @override
  String get soundEffects => 'Sound Effects';

  @override
  String get soundVolume => 'Sound Volume';

  @override
  String get notifications => 'Notifications';

  @override
  String get remindDailyPuzzle => 'Remind daily puzzle';

  @override
  String get remindWeeklyPuzzle => 'Remind weekly puzzle';

  @override
  String get control => 'Check';

  @override
  String get hint => 'Hint';

  @override
  String get undo => 'Undo';

  @override
  String get redo => 'Redo';

  @override
  String get delete => 'Delete';

  @override
  String get market => 'Shop';

  @override
  String get profile => 'Profile';

  @override
  String get winsCongratsTitle => 'Congratulations!';

  @override
  String get winsCongratsBody => 'You won the level.';

  @override
  String errorsFound(int count) {
    return 'Total mistakes: $count';
  }

  @override
  String get noErrors => 'No mistakes. Great!';

  @override
  String get daily => 'Daily';

  @override
  String get weekly => 'Weekly';

  @override
  String get chooseAvatar => 'Choose Avatar';

  @override
  String get statistics => 'Statistics';

  @override
  String get totalStars => 'Total Stars';

  @override
  String get fastest => 'Fastest';

  @override
  String get noMistakes => 'No mistakes';

  @override
  String get achievements => 'Achievements';

  @override
  String get firstDailyPuzzle => 'First Daily Puzzle';

  @override
  String get sevenDaysInARow => '7 Days in a Row';

  @override
  String get hundredPuzzles => '100 Puzzles';

  @override
  String get accountConnections => 'Account Connections';

  @override
  String get google => 'Google';

  @override
  String get apple => 'Apple';

  @override
  String get facebook => 'Facebook';

  @override
  String get soundMusic => 'Sound / Music';

  @override
  String get adminModeTitle => 'Admin Mode (Unlimited Hint/Undo/Check)';

  @override
  String get adminModeDesc => 'For testing. Normal limits apply when disabled.';

  @override
  String get language => 'Language';

  @override
  String get apply => 'Apply';

  @override
  String get resetProgress => 'Reset Progress';

  @override
  String get controlDialogTitle => 'Check';

  @override
  String get watchAdToSeeMistakes => 'Watch ad to see mistakes';

  @override
  String get close => 'Close';

  @override
  String get back => 'Back';

  @override
  String get highlight => 'Highlight';

  @override
  String get check => 'Check';

  @override
  String get dailyReward => 'Daily Reward';

  @override
  String get watchAdForReward => 'Watch Ad for Reward';

  @override
  String get inventory => 'Inventory';

  @override
  String get packages => 'Packages';

  @override
  String get individualItems => 'Individual Items';

  @override
  String get buy => 'Buy';

  @override
  String get purchased => 'Purchased';

  @override
  String get rewardClaimed => 'Reward Claimed';

  @override
  String get watchAd => 'Watch Ad';

  @override
  String get package => 'Package';

  @override
  String get items => 'items';

  @override
  String get selectUniverse => 'Select Universe';

  @override
  String get dailyPuzzle => 'Daily Puzzle';

  @override
  String get weeklyPuzzle => 'Weekly Puzzle';

  @override
  String puzzleCompletedIn(String time) {
    return 'You completed the puzzle in $time!';
  }

  @override
  String get perfect3Stars => 'Perfect! You earned 3 stars!';

  @override
  String get great2Stars => 'Great! You earned 2 stars!';

  @override
  String get good1Star => 'Good! You earned 1 star!';

  @override
  String get puzzleCompleted => 'Puzzle completed!';

  @override
  String rewardEarned(String reward) {
    return 'Reward Earned: $reward';
  }

  @override
  String congratulationsReward(String reward) {
    return 'Congratulations! You earned $reward reward!';
  }

  @override
  String get dailyRewardTitle => 'Daily Reward';

  @override
  String get weeklyRewardTitle => 'Weekly Reward';

  @override
  String get alreadyCompletedDaily => 'You have already completed this daily puzzle.\nYou have already claimed your reward!';

  @override
  String get alreadyCompletedWeekly => 'You have already completed this weekly puzzle.\nYou have already claimed your reward!';

  @override
  String get claimReward => 'Claim Reward';

  @override
  String get continueButton => 'Continue';

  @override
  String get levelsCompletedSuccessfully => '49 levels completed successfully!';

  @override
  String get vibrationTestCompleted => 'Vibration test completed!';

  @override
  String get vibrationTest => 'Vibration Test';

  @override
  String get insufficientHints => 'Insufficient Hints';

  @override
  String vibrationTriggered(String event) {
    return 'Vibration triggered: $event';
  }

  @override
  String get levelCompleted => 'level completed';

  @override
  String get dontForgetDaily => 'Don\'t forget to solve today\'s puzzle!';

  @override
  String get dontMissWeekly => 'Don\'t miss the weekly puzzle!';

  @override
  String get sikkokuNotifications => 'Sikkoku Notifications';

  @override
  String get sikkokuChannelDescription => 'Sikkoku reminder notification channel';

  @override
  String get spaceUniverse => 'Space Universe';

  @override
  String get spaceUniverseDescription => 'Ready for an interstellar journey?';

  @override
  String get forestUniverse => 'Forest Universe';

  @override
  String get forestUniverseDescription => 'Time to explore the depths of green forests!';
}
\n\n===== FILE 101/160: lib/l10n/app_localizations_tr.dart =====\n// ignore: unused_import
import 'package:intl/intl.dart' as intl;
import 'app_localizations.dart';

// ignore_for_file: type=lint

/// The translations for Turkish (`tr`).
class AppLocalizationsTr extends AppLocalizations {
  AppLocalizationsTr([String locale = 'tr']) : super(locale);

  @override
  String get appTitle => 'Sikoku';

  @override
  String get player => 'Oyuncu';

  @override
  String get settings => 'Ayarlar';

  @override
  String get vibration => 'Titreşim';

  @override
  String get music => 'Müzik';

  @override
  String get soundEffects => 'Ses Efektleri';

  @override
  String get soundVolume => 'Ses Seviyesi';

  @override
  String get notifications => 'Bildirimler';

  @override
  String get remindDailyPuzzle => 'Günlük bulmacayı hatırlat';

  @override
  String get remindWeeklyPuzzle => 'Haftalık bulmacayı hatırlat';

  @override
  String get control => 'Kontrol';

  @override
  String get hint => 'İpucu';

  @override
  String get undo => 'Geri Al';

  @override
  String get redo => 'İleri Al';

  @override
  String get delete => 'Sil';

  @override
  String get market => 'Market';

  @override
  String get profile => 'Profil';

  @override
  String get winsCongratsTitle => 'Tebrikler!';

  @override
  String get winsCongratsBody => 'Seviyeyi kazandınız.';

  @override
  String errorsFound(int count) {
    return 'Toplam hata: $count';
  }

  @override
  String get noErrors => 'Hata yok. Harika!';

  @override
  String get daily => 'Günlük';

  @override
  String get weekly => 'Haftalık';

  @override
  String get chooseAvatar => 'Avatar Seç';

  @override
  String get statistics => 'İstatistikler';

  @override
  String get totalStars => 'Toplam Yıldız';

  @override
  String get fastest => 'En Hızlı';

  @override
  String get noMistakes => 'Hatasız';

  @override
  String get achievements => 'Başarımlar';

  @override
  String get firstDailyPuzzle => 'İlk Günlük Bulmaca';

  @override
  String get sevenDaysInARow => 'Art arda 7 Gün';

  @override
  String get hundredPuzzles => '100 Bulmaca';

  @override
  String get accountConnections => 'Hesap Bağlantıları';

  @override
  String get google => 'Google';

  @override
  String get apple => 'Apple';

  @override
  String get facebook => 'Facebook';

  @override
  String get soundMusic => 'Ses / Müzik';

  @override
  String get adminModeTitle => 'Admin Modu (sınırsız Hint/Undo/Check)';

  @override
  String get adminModeDesc => 'Test amaçlı. Kapalıyken normal hak sistemi geçerli.';

  @override
  String get language => 'Dil';

  @override
  String get apply => 'Uygula';

  @override
  String get resetProgress => 'İlerlemeni Sıfırla';

  @override
  String get controlDialogTitle => 'Kontrol';

  @override
  String get watchAdToSeeMistakes => 'Hataları görmek için reklam izle';

  @override
  String get close => 'Kapat';

  @override
  String get back => 'Geri';

  @override
  String get highlight => 'Vurgula';

  @override
  String get check => 'Kontrol Et';

  @override
  String get dailyReward => 'Günlük Ödül';

  @override
  String get watchAdForReward => 'Ödül İçin Reklam İzle';

  @override
  String get inventory => 'Envanter';

  @override
  String get packages => 'Paketler';

  @override
  String get individualItems => 'Tekil Ürünler';

  @override
  String get buy => 'Satın Al';

  @override
  String get purchased => 'Satın Alındı';

  @override
  String get rewardClaimed => 'Ödül Alındı';

  @override
  String get watchAd => 'Reklam İzle';

  @override
  String get package => 'Paket';

  @override
  String get items => 'ürün';

  @override
  String get selectUniverse => 'Evren Seç';

  @override
  String get dailyPuzzle => 'Günlük Bulmaca';

  @override
  String get weeklyPuzzle => 'Haftalık Bulmaca';

  @override
  String puzzleCompletedIn(String time) {
    return 'Bulmacayı $time sürede tamamladınız!';
  }

  @override
  String get perfect3Stars => 'Mükemmel! 3 yıldız kazandınız!';

  @override
  String get great2Stars => 'Harika! 2 yıldız kazandınız!';

  @override
  String get good1Star => 'İyi! 1 yıldız kazandınız!';

  @override
  String get puzzleCompleted => 'Bulmacayı tamamladınız!';

  @override
  String rewardEarned(String reward) {
    return 'Kazanılan Ödül: $reward';
  }

  @override
  String congratulationsReward(String reward) {
    return 'Tebrikler! $reward ödülü kazandınız!';
  }

  @override
  String get dailyRewardTitle => 'Günlük Ödül';

  @override
  String get weeklyRewardTitle => 'Haftalık Ödül';

  @override
  String get alreadyCompletedDaily => 'Bu günlük bulmacayı daha önce tamamladınız.\nÖdülünüzü zaten aldınız!';

  @override
  String get alreadyCompletedWeekly => 'Bu haftalık bulmacayı daha önce tamamladınız.\nÖdülünüzü zaten aldınız!';

  @override
  String get claimReward => 'Ödülü Al';

  @override
  String get continueButton => 'Devam';

  @override
  String get levelsCompletedSuccessfully => '49 bölüm başarıyla tamamlandı!';

  @override
  String get vibrationTestCompleted => 'Titreşim testi tamamlandı!';

  @override
  String get vibrationTest => 'Titreşim Testi';

  @override
  String get insufficientHints => 'Yetersiz İpucu';

  @override
  String vibrationTriggered(String event) {
    return 'Titreşim tetiklendi: $event';
  }

  @override
  String get levelCompleted => 'seviye kazanıldı';

  @override
  String get dontForgetDaily => 'Bugünkü bulmacayı çözmeyi unutma!';

  @override
  String get dontMissWeekly => 'Haftalık bulmacayı kaçırma!';

  @override
  String get sikkokuNotifications => 'Sikkoku Bildirimleri';

  @override
  String get sikkokuChannelDescription => 'Sikkoku hatırlatıcı bildirim kanalı';

  @override
  String get spaceUniverse => 'Uzay Evreni';

  @override
  String get spaceUniverseDescription => 'Yıldızlar arası yolculuğa hazır mısın?';

  @override
  String get forestUniverse => 'Orman Evreni';

  @override
  String get forestUniverseDescription => 'Yeşil ormanların derinliklerinde keşif zamanı!';
}
\n\n===== FILE 102/160: lib/main.dart =====\nimport 'package:flutter/material.dart';
import 'package:flutter_easyloading/flutter_easyloading.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:flutter_localizations/flutter_localizations.dart';
import 'package:intl/date_symbol_data_local.dart';
import 'package:window_manager/window_manager.dart';
import 'dart:io';
import 'routes/app_router.dart';
import 'bloc/level_progress_cubit.dart';
import 'bloc/theme_cubit.dart';
import 'bloc/game_stats_cubit.dart';
import 'services/shared_pref_helper.dart';
import 'widgets/theme_toggle_button.dart';
import 'bloc/profile_cubit.dart';
import 'theme/app_themes.dart';
import 'inventory/inventory_cubit.dart';
import 'inventory/inventory_repository.dart';
import 'admin/admin_mode_cubit.dart';
import 'admin/admin_mode_repository.dart';
import 'settings/settings_cubit.dart';
import 'store/store_cubit.dart';
import 'core/notification_service.dart';
import 'audio/audio_gateway.dart';
import 'l10n/app_localizations.dart';
import 'services/puzzle_prefetch_service.dart';
import 'services/github_puzzle_provider.dart';
import 'services/remote_puzzle_provider.dart';
import 'services/puzzle_loader_service.dart';

void main() async {
  WidgetsFlutterBinding.ensureInitialized();
  
  // Windows için pencere boyutunu telefon boyutuna ayarla
  if (Platform.isWindows) {
    await windowManager.ensureInitialized();
    
    // Tipik telefon boyutu: 375x667 (iPhone 6/7/8 boyutu)
    // Alternatif: 360x640 (Android standart boyutu)
    const phoneWidth = 375.0;
    const phoneHeight = 667.0;
    
    // Pencere boyutunu ve pozisyonunu ayarla
    await windowManager.setSize(Size(phoneWidth, phoneHeight));
    await windowManager.setMinimumSize(Size(phoneWidth, phoneHeight));
    await windowManager.setMaximumSize(Size(phoneWidth, phoneHeight));
    
    // Pencereyi ekranın ortasına konumlandır
    await windowManager.center();
    
    // Pencere başlığını ayarla
    await windowManager.setTitle('SIKOKU - Telefon Modu');
  }
  
  await initializeDateFormatting('tr_TR');
  await NotificationService().initialize();
  configureEasyLoading();
  final initialThemeMode = await SharedPrefHelper.getSavedThemeMode();
  
  // AudioGateway'i başlat
  final audioGateway = AudioGateway();
  await audioGateway.startBackgroundMusic();
  
  // Puzzle prefetch'i başlat (arka planda)
  _startPuzzlePrefetch();
  
  runApp(MyApp(initialThemeMode: initialThemeMode));
}

// Puzzle prefetch fonksiyonu
void _startPuzzlePrefetch() async {
  try {
    final prefetchService = PuzzlePrefetchService(
      github: GitHubPuzzleProvider(),
      remote: RemotePuzzleProvider(),
      source: PuzzleSource.hybrid,
    );
    
    // Arka planda prefetch yap
    await prefetchService.prefetchTodayAndThisWeek();
  } catch (e) {
    debugPrint('Puzzle prefetch failed: $e');
  }
}

class MyApp extends StatelessWidget {
  final ThemeMode initialThemeMode;

  MyApp({Key? key, required this.initialThemeMode}) : super(key: key);

  final _appRouter = AppRouter();

  @override
  Widget build(BuildContext context) {
    return MultiBlocProvider(
      providers: [
        BlocProvider<GameStatsCubit>(
          create: (context) => GameStatsCubit(),
        ),
        BlocProvider<LevelProgressCubit>(
          create: (context) => LevelProgressCubit(
            onStarsUpdated: () {
              context.read<GameStatsCubit>().updateTotalStarsFromLevelProgress();
            },
          ),
        ),
        BlocProvider<ThemeCubit>(
          create: (context) => ThemeCubit(initialThemeMode),
        ),
        BlocProvider<ProfileCubit>(
          create: (context) => ProfileCubit(),
        ),
        BlocProvider<InventoryCubit>(
          create: (context) => InventoryCubit(InventoryRepository())..init(),
        ),
        BlocProvider<AdminModeCubit>(
          create: (context) => AdminModeCubit(AdminModeRepository())..init(),
        ),
        BlocProvider<SettingsCubit>(
          create: (context) => SettingsCubit()..init(),
        ),
        BlocProvider<StoreCubit>(
          create: (context) => StoreCubit(),
        ),
      ],
      child: Builder(
        builder: (context) {
          final themeMode = context.select((ThemeCubit c) => c.state.themeMode);
          final locale = context.select((SettingsCubit c) => c.currentLocale);
          
          return MaterialApp.router(
            title: 'SIKOKU',
            theme: AppThemes.lightTheme,
            darkTheme: AppThemes.darkTheme,
            themeMode: themeMode,
            locale: locale,
            supportedLocales: const [
              Locale('tr'),
              Locale('en'),
            ],
            localizationsDelegates: const [
              AppLocalizations.delegate,
              GlobalMaterialLocalizations.delegate,
              GlobalWidgetsLocalizations.delegate,
              GlobalCupertinoLocalizations.delegate,
            ],
            localeResolutionCallback: (locale, supportedLocales) {
              // Bilinmeyen dilde İngilizce'ye düş
              for (var supportedLocale in supportedLocales) {
                if (supportedLocale.languageCode == locale?.languageCode) {
                  return supportedLocale;
                }
              }
              return const Locale('en');
            },
            routerConfig: _appRouter.config(),
            builder: EasyLoading.init(
              builder: (context, child) {
                final size = MediaQuery.sizeOf(context);
                final double topPadding = size.height * 0.02;
                final double rightPadding = size.width * 0.02;
                return child ?? const SizedBox.shrink();
              },
            ),
          );
        },
      ),
    );
  }
}

void configureEasyLoading() {
  EasyLoading.instance
    ..displayDuration = const Duration(milliseconds: 2000)
    ..indicatorType = EasyLoadingIndicatorType.fadingCircle
    ..loadingStyle = EasyLoadingStyle.dark
    ..indicatorSize = 45.0
    ..radius = 10.0
    ..progressColor = Colors.purple
    ..backgroundColor = Colors.black.withOpacity(0.8)
    ..indicatorColor = Colors.purple
    ..textColor = Colors.white
    ..maskColor = Colors.black.withOpacity(0.5)
    ..userInteractions = true
    ..dismissOnTap = false;
} \n\n===== FILE 103/160: lib/models/puzzle_data.dart =====\nclass PuzzleData {
  final int stage;
  final int level;
  final int gridSize; // Grid boyutu eklendi
  final List<List<int>> solution;
  final Map<String, List<List<String?>>> symbols;
  final int difficulty;
  final List<List<int>> prefilled;
  final String? hint;
  final List<String>? hints;
  final List<List<int>>? hintData; // Yeni alan: List<List<int>> formatında hint'ler
  final int? maxTimeSeconds;

  PuzzleData({
    required this.stage,
    required this.level,
    required this.gridSize, // Grid boyutu eklendi
    required this.solution,
    required this.symbols,
    required this.difficulty,
    required this.prefilled,
    this.hint,
    this.hints,
    this.hintData, // Yeni alan
    this.maxTimeSeconds,
  });

  String get id => '${stage}_$level';

  factory PuzzleData.fromJson(Map<String, dynamic> json) {
    // Grid boyutunu al (varsayılan 6)
    int gridSize = json['grid_size'] ?? 6;
    
    // Solution'ı düzgün parse et
    List<List<int>> solution = [];
    for (var row in json['solution']) {
      List<int> intRow = [];
      for (var cell in row) {
        intRow.add(cell as int);
      }
      solution.add(intRow);
    }

    // Symbols'ı düzgün parse et
    Map<String, List<List<String?>>> symbols = {};
    List<List<String?>> horizontalSymbols = [];
    for (var row in json['symbols']['horizontal']) {
      List<String?> stringRow = [];
      for (var cell in row) {
        stringRow.add(cell as String?);
      }
      horizontalSymbols.add(stringRow);
    }
    
    List<List<String?>> verticalSymbols = [];
    for (var row in json['symbols']['vertical']) {
      List<String?> stringRow = [];
      for (var cell in row) {
        stringRow.add(cell as String?);
      }
      verticalSymbols.add(stringRow);
    }
    
    symbols['horizontal'] = horizontalSymbols;
    symbols['vertical'] = verticalSymbols;

    // Prefilled'ı düzgün parse et
    List<List<int>> prefilled = [];
    for (var position in json['prefilled']) {
      List<int> intPosition = [];
      for (var coord in position) {
        intPosition.add(coord as int);
      }
      prefilled.add(intPosition);
    }

    // Hints'leri parse et
    List<String>? hints;
    if (json['hints'] != null) {
      hints = List<String>.from(json['hints']);
    }
    
    // HintData'yı parse et (yeni)
    List<List<int>>? hintData;
    if (json['hintData'] != null) {
      hintData = (json['hintData'] as List<dynamic>)
          .map((e) => (e as List<dynamic>).cast<int>())
          .toList();
    }

    return PuzzleData(
      stage: json['stage'],
      level: json['level'],
      gridSize: gridSize, // Grid boyutu eklendi
      solution: solution,
      symbols: symbols,
      difficulty: json['difficulty'],
      prefilled: prefilled,
      hint: json['hint'],
      hints: hints,
      hintData: hintData, // Yeni alan
      maxTimeSeconds: json['max_time_seconds'],
    );
  }

  Map<String, dynamic> toJson() {
    return {
      'stage': stage,
      'level': level,
      'grid_size': gridSize, // Grid boyutu eklendi
      'solution': solution,
      'symbols': symbols,
      'difficulty': difficulty,
      'prefilled': prefilled,
      'hint': hint,
      'hints': hints,
      'hintData': hintData, // List<List<int>> formatında
      'max_time_seconds': maxTimeSeconds,
    };
  }
}

// Yeni JSON formatı için PuzzleModel sınıfı
class PuzzleModel {
  final int level;
  final String difficulty;
  final int size;
  final List<List<PuzzleCell>> puzzle;
  final List<List<String>> solution;
  final List<PuzzleHintData> hints;
  final String theme;

  PuzzleModel({
    required this.level,
    required this.difficulty,
    required this.size,
    required this.puzzle,
    required this.solution,
    required this.hints,
    required this.theme,
  });

  factory PuzzleModel.fromJson(Map<String, dynamic> json) {
    // Puzzle grid'ini parse et
    List<List<PuzzleCell>> puzzle = [];
    for (var row in json['puzzle']) {
      List<PuzzleCell> puzzleRow = [];
      for (var cell in row) {
        puzzleRow.add(PuzzleCell.fromJson(cell));
      }
      puzzle.add(puzzleRow);
    }

    // Solution'ı parse et
    List<List<String>> solution = [];
    for (var row in json['solution']) {
      List<String> solutionRow = [];
      for (var cell in row) {
        solutionRow.add(cell as String);
      }
      solution.add(solutionRow);
    }

    // Hints'leri parse et
    List<PuzzleHintData> hints = [];
    for (var hint in json['hints']) {
      hints.add(PuzzleHintData.fromJson(hint));
    }

    return PuzzleModel(
      level: json['level'],
      difficulty: json['difficulty'],
      size: json['size'],
      puzzle: puzzle,
      solution: solution,
      hints: hints,
      theme: json['theme'],
    );
  }

  Map<String, dynamic> toJson() {
    return {
      'level': level,
      'difficulty': difficulty,
      'size': size,
      'puzzle': puzzle.map((row) => row.map((cell) => cell.toJson()).toList()).toList(),
      'solution': solution,
      'hints': hints.map((hint) => hint.toJson()).toList(),
      'theme': theme,
    };
  }
}

// Puzzle hücresi sınıfı
class PuzzleCell {
  final String value;
  final bool locked;

  PuzzleCell({
    required this.value,
    required this.locked,
  });

  factory PuzzleCell.fromJson(Map<String, dynamic> json) {
    return PuzzleCell(
      value: json['value'] ?? '',
      locked: json['locked'] ?? false,
    );
  }

  Map<String, dynamic> toJson() {
    return {
      'value': value,
      'locked': locked,
    };
  }
}

// Puzzle ipucu sınıfı (PuzzleHint ile çakışmayı önlemek için PuzzleHintData olarak adlandırıldı)
class PuzzleHintData {
  final String type;
  final List<int> cell1;
  final List<int> cell2;

  PuzzleHintData({
    required this.type,
    required this.cell1,
    required this.cell2,
  });

  factory PuzzleHintData.fromJson(Map<String, dynamic> json) {
    return PuzzleHintData(
      type: json['type'],
      cell1: List<int>.from(json['cell1']),
      cell2: List<int>.from(json['cell2']),
    );
  }

  Map<String, dynamic> toJson() {
    return {
      'type': type,
      'cell1': cell1,
      'cell2': cell2,
    };
  }
} \n\n===== FILE 104/160: lib/routes/app_router.dart =====\nimport 'package:auto_route/auto_route.dart';
import 'package:flutter/material.dart';
import '../screens/splash_screen.dart';
import '../screens/map_screen.dart';
import '../screens/game_screen.dart';
import '../screens/profile_screen.dart';
import '../screens/settings_screen.dart';
import '../screens/store_screen.dart';
// import '../screens/test_grid_layout.dart'; // Artık route olarak eklenmiyor

part 'app_router.gr.dart';

@AutoRouterConfig()
class AppRouter extends _$AppRouter {
  @override
  List<AutoRoute> get routes => [
        AutoRoute(
          path: '/',
          page: SplashRoute.page,
          initial: true,
        ),
        AutoRoute(
          path: '/map',
          page: MapRoute.page,
        ),
        AutoRoute(
          path: '/game/:stage/:level',
          page: GameRoute.page,
        ),
        AutoRoute(
          path: '/profile',
          page: ProfileRoute.page,
        ),
        AutoRoute(
          path: '/settings',
          page: SettingsRoute.page,
        ),
        AutoRoute(
          path: '/store',
          page: StoreRoute.page,
        ),
        // TestGridLayout route'u kaldırıldı
      ];
}\n\n===== FILE 105/160: lib/routes/app_router.gr.dart =====\n// GENERATED CODE - DO NOT MODIFY BY HAND

// **************************************************************************
// AutoRouterGenerator
// **************************************************************************

// ignore_for_file: type=lint
// coverage:ignore-file

part of 'app_router.dart';

abstract class _$AppRouter extends RootStackRouter {
  // ignore: unused_element
  _$AppRouter({super.navigatorKey});

  @override
  final Map<String, PageFactory> pagesMap = {
    GameRoute.name: (routeData) {
      final args = routeData.argsAs<GameRouteArgs>();
      return AutoRoutePage<dynamic>(
        routeData: routeData,
        child: GameScreen(
          key: args.key,
          stage: args.stage,
          level: args.level,
          dailyDate: args.dailyDate,
          weeklyMonday: args.weeklyMonday,
        ),
      );
    },
    MapRoute.name: (routeData) {
      final args =
          routeData.argsAs<MapRouteArgs>(orElse: () => const MapRouteArgs());
      return AutoRoutePage<dynamic>(
        routeData: routeData,
        child: MapScreen(
          key: args.key,
          stage: args.stage,
        ),
      );
    },
    ProfileRoute.name: (routeData) {
      return AutoRoutePage<dynamic>(
        routeData: routeData,
        child: const ProfileScreen(),
      );
    },
    SettingsRoute.name: (routeData) {
      return AutoRoutePage<dynamic>(
        routeData: routeData,
        child: const SettingsScreen(),
      );
    },
    SplashRoute.name: (routeData) {
      return AutoRoutePage<dynamic>(
        routeData: routeData,
        child: const SplashScreen(),
      );
    },
    StoreRoute.name: (routeData) {
      return AutoRoutePage<dynamic>(
        routeData: routeData,
        child: const StoreScreen(),
      );
    },
  };
}

/// generated route for
/// [GameScreen]
class GameRoute extends PageRouteInfo<GameRouteArgs> {
  GameRoute({
    Key? key,
    required int stage,
    required int level,
    DateTime? dailyDate,
    DateTime? weeklyMonday,
    List<PageRouteInfo>? children,
  }) : super(
          GameRoute.name,
          args: GameRouteArgs(
            key: key,
            stage: stage,
            level: level,
            dailyDate: dailyDate,
            weeklyMonday: weeklyMonday,
          ),
          initialChildren: children,
        );

  static const String name = 'GameRoute';

  static const PageInfo<GameRouteArgs> page = PageInfo<GameRouteArgs>(name);
}

class GameRouteArgs {
  const GameRouteArgs({
    this.key,
    required this.stage,
    required this.level,
    this.dailyDate,
    this.weeklyMonday,
  });

  final Key? key;

  final int stage;

  final int level;

  final DateTime? dailyDate;

  final DateTime? weeklyMonday;

  @override
  String toString() {
    return 'GameRouteArgs{key: $key, stage: $stage, level: $level, dailyDate: $dailyDate, weeklyMonday: $weeklyMonday}';
  }
}

/// generated route for
/// [MapScreen]
class MapRoute extends PageRouteInfo<MapRouteArgs> {
  MapRoute({
    Key? key,
    int stage = 1,
    List<PageRouteInfo>? children,
  }) : super(
          MapRoute.name,
          args: MapRouteArgs(
            key: key,
            stage: stage,
          ),
          initialChildren: children,
        );

  static const String name = 'MapRoute';

  static const PageInfo<MapRouteArgs> page = PageInfo<MapRouteArgs>(name);
}

class MapRouteArgs {
  const MapRouteArgs({
    this.key,
    this.stage = 1,
  });

  final Key? key;

  final int stage;

  @override
  String toString() {
    return 'MapRouteArgs{key: $key, stage: $stage}';
  }
}

/// generated route for
/// [ProfileScreen]
class ProfileRoute extends PageRouteInfo<void> {
  const ProfileRoute({List<PageRouteInfo>? children})
      : super(
          ProfileRoute.name,
          initialChildren: children,
        );

  static const String name = 'ProfileRoute';

  static const PageInfo<void> page = PageInfo<void>(name);
}

/// generated route for
/// [SettingsScreen]
class SettingsRoute extends PageRouteInfo<void> {
  const SettingsRoute({List<PageRouteInfo>? children})
      : super(
          SettingsRoute.name,
          initialChildren: children,
        );

  static const String name = 'SettingsRoute';

  static const PageInfo<void> page = PageInfo<void>(name);
}

/// generated route for
/// [SplashScreen]
class SplashRoute extends PageRouteInfo<void> {
  const SplashRoute({List<PageRouteInfo>? children})
      : super(
          SplashRoute.name,
          initialChildren: children,
        );

  static const String name = 'SplashRoute';

  static const PageInfo<void> page = PageInfo<void>(name);
}

/// generated route for
/// [StoreScreen]
class StoreRoute extends PageRouteInfo<void> {
  const StoreRoute({List<PageRouteInfo>? children})
      : super(
          StoreRoute.name,
          initialChildren: children,
        );

  static const String name = 'StoreRoute';

  static const PageInfo<void> page = PageInfo<void>(name);
}
\n\n===== FILE 106/160: lib/screens/game_screen.dart =====\nimport 'dart:async';
import 'dart:ui';
import 'package:flutter/material.dart';
import 'dart:math' as math;
import 'dart:math';
import 'package:flutter/rendering.dart';
import 'package:flutter/services.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/gestures.dart';
import 'package:flutter/rendering.dart';
import 'package:vector_math/vector_math_64.dart' show Vector3;
import 'package:auto_route/auto_route.dart';
import 'package:stop_watch_timer/stop_watch_timer.dart';
import 'package:flutter_bloc/flutter_bloc.dart';

import '../services/puzzle_service.dart';
import '../services/puzzle_loader_service.dart';
import '../models/puzzle_data.dart';
import '../services/user_progress_service.dart';
import '../services/progress_service.dart';
import '../widgets/star_indicator.dart';
import '../widgets/sound_control.dart';
import '../widgets/painters.dart';
import '../widgets/counters.dart';
import '../widgets/grid_widget.dart';
import '../widgets/game_timer_widget.dart';
import '../widgets/success_dialog_widget.dart';
import '../widgets/game_loading_widget.dart';
import '../widgets/game_ui_builder.dart';
import '../widgets/game_error_handler.dart';
import '../services/game_timer_service.dart';
import '../services/puzzle_loading_service.dart';
import '../services/daily_puzzle_selection.dart';
import '../services/weekly_puzzle_selection.dart';
import '../utils/puzzle_debug_utils.dart';
import '../routes/app_router.dart';
import '../bloc/puzzle_bloc.dart';
import '../bloc/puzzle_states.dart';
import '../bloc/puzzle_events.dart';
import '../theme/app_themes.dart';
import '../theme/cell_icons.dart';

@RoutePage()
class GameScreen extends StatefulWidget {
  final int stage;
  final int level;
  final DateTime? dailyDate; // Günlük mod için opsiyonel tarih
  final DateTime? weeklyMonday; // Haftalık mod için opsiyonel pazartesi
  
  const GameScreen({Key? key, required this.stage, required this.level, this.dailyDate, this.weeklyMonday}) : super(key: key);

  UniverseKind get universe =>
      (stage == 2) ? UniverseKind.forest : UniverseKind.space;

  @override
  State<GameScreen> createState() => _GameScreenState();
}

class _GameScreenState extends State<GameScreen> with TickerProviderStateMixin {
  bool isLoading = true;
  int maxTimeSeconds = 60;
  List<List<int>>? currentHints;
  bool isPuzzleCompleted = false;
  bool _isDailyMode = false;
  bool _isWeeklyMode = false;
  final TransformationController _transformationController = TransformationController();
  late GameTimerService _timerService;

  @override
  void initState() {
    super.initState();
    _timerService = GameTimerService(
      onTimeUpdate: (seconds) {
        if (mounted) {
          setState(() {});
        }
      },
    );
    _precacheImages();
  }

  // İkonları önceden yükle (performans için)
  void _precacheImages() {
    WidgetsBinding.instance.addPostFrameCallback((_) {
      if (mounted) {
        precacheImage(const AssetImage('assets/images/earth.png'), context);
        precacheImage(const AssetImage('assets/images/sunny.png'), context);
        precacheImage(const AssetImage('assets/images/blueberry.png'), context);
        precacheImage(const AssetImage('assets/images/banana.png'), context);
      }
    });
  }

  @override
  void dispose() {
    _timerService.dispose();
    super.dispose();
  }

  void _startTimer() {
    _timerService.startTimer();
  }

  void _stopTimer() {
    _timerService.stopTimer();
  }

  Future<void> _loadPuzzle(BuildContext context) async {
    final selectedDaily = widget.dailyDate ?? DailyPuzzleSelection.consume();
    final selectedWeekly = widget.weeklyMonday ?? WeeklyPuzzleSelection.consume();
    if (selectedDaily != null) _isDailyMode = true;
    if (selectedWeekly != null) _isWeeklyMode = true;
    await PuzzleLoadingService.loadPuzzle(
      context: context,
      level: widget.level,
      stage: widget.stage,
      setLoading: (loading) => setState(() => isLoading = loading),
      setHints: (hints) => currentHints = hints,
      setMaxTime: (time) => maxTimeSeconds = time,
      startTimer: _startTimer,
      printSolution: _printSolution,
      dailyDate: selectedDaily,
      weeklyMonday: selectedWeekly,
    );
  }

  void _printSolution(PuzzleData puzzle) {
    PuzzleDebugUtils.printSolution(puzzle);
  }

  void _showSuccessDialog() async {
    _stopTimer();
    
    SuccessDialogWidget.show(
      context: context,
      level: widget.level,
      elapsedSeconds: _timerService.currentTime,
      stage: widget.stage,
      isDaily: _isDailyMode,
      isWeekly: _isWeeklyMode,
      onBackToMenu: () => context.router.pop(),
    );
  }

  @override
  Widget build(BuildContext context) {
    final pal = Theme.of(context).extension<AppPalette>()!;

    
    return BlocProvider(
      create: (context) => PuzzleBloc(),
      child: Builder(
        builder: (context) => BlocListener<PuzzleBloc, PuzzleState>(
          listener: (context, state) {
            if (state is PuzzleError) {
              GameErrorHandler.handlePuzzleError(context, state);
            } else if (state is PuzzleLoaded && state.isSolved) {
              GameErrorHandler.handlePuzzleSolved(
                context: context,
                timerService: _timerService,
                stopTimer: _stopTimer,
                setPuzzleCompleted: () => setState(() => isPuzzleCompleted = true),
                showSuccessDialog: _showSuccessDialog,
                isDaily: _isDailyMode,
              );
            }
          },
          child: BlocBuilder<PuzzleBloc, PuzzleState>(
            builder: (context, state) {
              final screenWidth = MediaQuery.of(context).size.width;
              final screenHeight = MediaQuery.of(context).size.height;
              
              if (isLoading || state is PuzzleLoading) {
                if (isLoading) {
                  WidgetsBinding.instance.addPostFrameCallback((_) {
                    _loadPuzzle(context);
                  });
                }
                
                return GameLoadingWidget(
                  screenWidth: screenWidth,
                  screenHeight: screenHeight,
                );
              }
              
              if (state is PuzzleLoaded) {
                // Timer'ı başlat (eğer henüz başlamamışsa)
                if (!_timerService.isRunning && !isPuzzleCompleted) {
                  _startTimer();
                }
                
                return GameUIBuilder(
                  state: state,
                  screenWidth: screenWidth,
                  screenHeight: screenHeight,
                  currentHints: currentHints,
                  transformationController: _transformationController,
                  timerService: _timerService,
                  actualLevel: widget.level,
                  iconSet: iconsForUniverse(widget.universe), // Yeni parametre
                  isDailyMode: _isDailyMode, // Günlük mod bilgisi
                  isWeeklyMode: _isWeeklyMode, // Haftalık mod bilgisi
                );
              }
              
              return Scaffold(
                backgroundColor: pal.puzzleBackground,
                body: Center(
                  child: Text(
                    'Bir hata oluştu',
                    style: TextStyle(color: Colors.white),
                  ),
                ),
              );
            },
          ),
        ),
      ),
    );
  }
} \n\n===== FILE 107/160: lib/screens/main_menu_screen.dart =====\nimport 'dart:ui';
import 'package:flutter/material.dart';
import 'package:google_fonts/google_fonts.dart';
import 'package:auto_route/auto_route.dart';
import 'package:animated_text_kit/animated_text_kit.dart';
import '../routes/app_router.dart';

class MainMenuScreen extends StatefulWidget {
  const MainMenuScreen({Key? key}) : super(key: key);

  @override
  _MainMenuScreenState createState() => _MainMenuScreenState();
}

class _MainMenuScreenState extends State<MainMenuScreen> {
  bool isSoundOn = true;
  bool _animationCompleted = false;

  @override
  Widget build(BuildContext context) {
    final screenHeight = MediaQuery.of(context).size.height;
    final screenWidth = MediaQuery.of(context).size.width;
    final darkBlue = const Color(0xFF1A2233);
    return Scaffold(
      backgroundColor: Colors.black,
      body: Stack(
        children: [
          // Arka planda büyük, silik logo
          Center(
            child: Opacity(
              opacity: 0.10,
              child: Image.asset(
                'assets/images/logo2.png',
                width: screenWidth * 0.85,
                height: screenHeight * 0.85,
                fit: BoxFit.contain,
              ),
            ),
          ),
          SafeArea(
            child: Column(
              children: [
                SizedBox(height: screenHeight * 0.06),
                // Neon başlık - AnimatedTextKit ile
                SizedBox(
                  height: screenHeight * 0.12,
                  child: _animationCompleted
                      ? Text(
                          'SIKOKU',
                          style: GoogleFonts.orbitron(
                            color: Colors.cyanAccent.shade100,
                            fontSize: screenWidth * 0.06,
                            fontWeight: FontWeight.bold,
                            letterSpacing: 6,
                            shadows: [
                              Shadow(color: Colors.cyanAccent.withOpacity(0.7), blurRadius: 18, offset: const Offset(0, 0)),
                              Shadow(color: Colors.cyanAccent.withOpacity(0.4), blurRadius: 40, offset: const Offset(0, 0)),
                            ],
                          ),
                        )
                      : TextLiquidFill(
                          text: 'SIKOKU',
                          textStyle: GoogleFonts.orbitron(
                            fontSize: screenWidth * 0.06,
                            fontWeight: FontWeight.bold,
                            letterSpacing: 6,
                          ),
                          boxBackgroundColor: Colors.black,
                          boxHeight: screenHeight * 0.12,
                          loadDuration: const Duration(seconds: 3),
                          loadUntil: 1.0,
                          waveDuration: const Duration(seconds: 2),
                        ),
                ),
                const Spacer(),
                // Menü butonları
                Column(
                  mainAxisSize: MainAxisSize.min,
                  children: [
                    _MenuButton(
                      text: 'Oyna',
                      icon: Icons.play_arrow_rounded,
                      iconColor: Colors.lightBlueAccent,
                      backgroundColor: darkBlue,
                      onTap: () {
                        context.router.push(const MapRoute());
                      },
                      width: screenWidth * 0.6,
                      height: screenHeight * 0.07,
                    ),
                    SizedBox(height: screenHeight * 0.018),
                    _MenuButton(
                      text: 'Ayarlar',
                      icon: Icons.settings_rounded,
                      iconColor: Colors.amber,
                      backgroundColor: darkBlue,
                      onTap: () {
                        context.router.push(const SettingsRoute());
                      },
                      width: screenWidth * 0.6,
                      height: screenHeight * 0.07,
                    ),
                    SizedBox(height: screenHeight * 0.018),
                    _MenuButton(
                      text: 'Rehber',
                      icon: Icons.menu_book_rounded,
                      iconColor: Colors.orangeAccent,
                      backgroundColor: darkBlue,
                      onTap: () {
                        context.router.push(const GuideRoute());
                      },
                      width: screenWidth * 0.6,
                      height: screenHeight * 0.07,
                    ),
                    SizedBox(height: screenHeight * 0.018),
                    _MenuButton(
                      text: 'Test Grid',
                      icon: Icons.grid_on_rounded,
                      iconColor: Colors.greenAccent,
                      backgroundColor: darkBlue,
                      onTap: () {
                        context.router.push(const TestGridLayout());
                      },
                      width: screenWidth * 0.6,
                      height: screenHeight * 0.07,
                    ),
                  ],
                ),
                const Spacer(flex: 2),
                // Alt ikonlar
                Padding(
                  padding: EdgeInsets.only(bottom: screenHeight * 0.04, left: 8, right: 8),
                  child: Row(
                    mainAxisAlignment: MainAxisAlignment.spaceBetween,
                    children: [
                      Row(
                        children: [
                          Icon(Icons.extension_rounded, color: Colors.white.withOpacity(0.7), size: screenHeight * 0.03),
                          SizedBox(width: screenWidth * 0.006),
                          Text(
                            'Başarılar',
                            style: GoogleFonts.montserrat(
                              color: Colors.white.withOpacity(0.7),
                              fontSize: screenHeight * 0.018,
                              fontWeight: FontWeight.w500,
                            ),
                          ),
                        ],
                      ),
                      IconButton(
                        icon: Icon(
                          isSoundOn ? Icons.volume_up_rounded : Icons.volume_off_rounded,
                          color: Colors.white.withOpacity(0.7),
                          size: screenHeight * 0.035,
                        ),
                        onPressed: () => setState(() => isSoundOn = !isSoundOn),
                      ),
                    ],
                  ),
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }
}

class _MenuButton extends StatelessWidget {
  final String text;
  final IconData icon;
  final Color iconColor;
  final Color backgroundColor;
  final VoidCallback onTap;
  final double width;
  final double height;

  const _MenuButton({
    required this.text,
    required this.icon,
    required this.iconColor,
    required this.backgroundColor,
    required this.onTap,
    required this.width,
    required this.height,
  });

  @override
  Widget build(BuildContext context) {
    final screenWidth = MediaQuery.of(context).size.width;
    return GestureDetector(
      onTap: onTap,
      child: Container(
        width: width,
        height: height,
        decoration: BoxDecoration(
          color: backgroundColor.withOpacity(0.92),
          borderRadius: BorderRadius.circular(18),
          boxShadow: [
            BoxShadow(
              color: Colors.black.withOpacity(0.18),
              blurRadius: 12,
              offset: const Offset(0, 4),
            ),
          ],
        ),
        child: Row(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Icon(icon, color: iconColor, size: height * 0.55),
            SizedBox(width: screenWidth * 0.01),
            Text(
              text,
              style: GoogleFonts.montserrat(
                color: Colors.white,
                fontSize: height * 0.38,
                fontWeight: FontWeight.bold,
                letterSpacing: 1.2,
              ),
            ),
          ],
        ),
      ),
    );
  }
} \n\n===== FILE 108/160: lib/screens/map_screen.dart =====\nimport 'package:flutter/material.dart';
import 'package:google_fonts/google_fonts.dart';
import 'package:auto_route/auto_route.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:table_calendar/table_calendar.dart';

import '../routes/app_router.dart';
import '../widgets/level_path_layout.dart';
import '../widgets/bottom_nav_bar.dart';
import '../widgets/bottom_nav_item.dart';
import 'package:flutter_easyloading/flutter_easyloading.dart';
import 'package:intl/intl.dart';
import '../services/weekly_puzzle_selection.dart';
import 'package:flutter/services.dart';
import '../bloc/level_progress_cubit.dart';
import '../bloc/game_stats_cubit.dart';
import '../services/daily_puzzle_selection.dart';
import '../inventory/inventory_cubit.dart';
import '../inventory/inventory_state.dart';
import '../admin/admin_mode_cubit.dart';
import '../bloc/profile_cubit.dart';
import '../l10n/app_localizations.dart';
import '../config/universe_config.dart';
import '../widgets/universe_selector.dart';

@RoutePage()
class MapScreen extends StatefulWidget {
  final int stage;
  const MapScreen({Key? key, this.stage = 1}) : super(key: key);

  @override
  State<MapScreen> createState() => _MapScreenState();
}

class _MapScreenState extends State<MapScreen> {
  final int totalLevels = 50;
  bool _isRefreshing = false;
  int _refreshKey = 0;
  late ScrollController scrollController; // Scroll controller
  // _currentUniverseId artık GameStatsCubit'ten alınıyor

  // Illustrator SVG bilgileri - tek doğruluk kaynağı
  static const Size _viewBox = Size(750, 1334);
  static const String _polylinePoints = '''
447.25 1331.27 451.79 1318.42 454.44 1298.77 454.44 1279.87 450.85 1264.37 441.59 1246.61 432.52 1235.65 418.54 1222.80 407.96 1214.86 389.44 1204.66 365.25 1192.94 349.00 1185.38 316.50 1171.77 290.80 1158.54 272.28 1148.34 256.78 1137.76 241.28 1123.78 224.65 1106.77 217.47 1096.19 214.82 1086.00 212.93 1068.61 215.20 1053.49 217.47 1044.80 222.76 1032.71 231.07 1018.73 243.92 1005.50 260.17 994.16 286.25 980.18 309.68 970.73 339.92 958.64 360.33 948.44 376.58 939.37 390.19 927.28 399.26 914.43 405.31 898.56 404.55 880.80 402.66 867.19 392.46 845.65 384.52 827.89 373.94 810.88 364.11 791.60 352.02 768.17 347.86 748.52 345.97 727.73 347.86 706.19 355.80 683.13 364.49 663.48 380.74 644.20 396.24 625.68 412.87 608.67 443.11 581.84 480.91 548.96 511.90 522.13 536.09 499.45 551.21 482.44 562.55 466.57 568.60 449.18 571.62 431.79 567.46 412.14 561.41 397.40 554.61 385.31 540.63 368.68 529.29 356.21 508.12 330.13 496.78 312.74 487.71 291.95 484.69 279.86 486.96 262.10 501.32 230.35 515.68 207.67 527.77 181.21 537.60 154.38 538.73 127.17 534.19 110.54 528.90 93.91 512.65 76.15 497.15 62.17 471.07 41.38 453.31 27.40 445.00 16.06 444.24 0.09
''';

  @override
  void initState() {
    super.initState();
    _initializeAndLoadProgress();
    
    // Scroll controller'ı initState'de oluştur
    scrollController = ScrollController();
  }

  @override
  void dispose() {
    scrollController.dispose();
    super.dispose();
  }

  Future<void> _initializeAndLoadProgress() async {
    // Oyun başladığında progress'i yükle
    final gameStatsCubit = context.read<GameStatsCubit>();
    final currentStats = gameStatsCubit.state;
    
    // Universe 2 kilidi artık test amaçlı kapatılmıyor
    // Universe 2 kilidi level 50 tamamlandığında otomatik açılacak
    
    // Eğer hiç veri yoksa sadece Level 1'i aç
    if (currentStats.unlockedLevels.isEmpty) {
      print('=== INITIALIZING PROGRESS - ONLY LEVEL 1 UNLOCKED ===');
      await gameStatsCubit.resetStats(); // Sadece Level 1 açık
      print('=== PROGRESS INITIALIZED ===');
    } else {
      print('=== LOADING EXISTING PROGRESS ===');
      print('Unlocked Levels: ${currentStats.unlockedLevels}');
      print('Total Stars: ${currentStats.totalStars}');
    }
  }

  @override
  Widget build(BuildContext context) {
    final l10n = AppLocalizations.of(context)!;
    final screenHeight = MediaQuery.of(context).size.height;
    final screenWidth = MediaQuery.of(context).size.width;
    
    // İlk kez build edildiğinde scroll pozisyonunu ayarla
    WidgetsBinding.instance.addPostFrameCallback((_) {
      if (scrollController.hasClients && scrollController.offset == 0) {
        scrollController.jumpTo(4 * screenHeight); // En alttaki resim görünsün
      }
    });
    
    return BlocBuilder<GameStatsCubit, GameStatsState>(
      builder: (context, gameStatsState) {
        return BlocBuilder<LevelProgressCubit, LevelProgressState>(
          builder: (context, levelProgressState) {
            return Scaffold(
              body: GestureDetector(
                onPanUpdate: (details) {
                  // Manuel scroll kontrolü
                  final delta = details.delta.dy;
                  final currentOffset = scrollController.offset;
                  final newOffset = (currentOffset - delta).clamp(0.0, screenHeight * 4);
                  scrollController.jumpTo(newOffset);
                },
                child: Stack(
                  children: [
                    // 1. Scroll edilebilir arka plan resimleri
                    SingleChildScrollView(
                      controller: scrollController, // Controller eklendi
                      physics: const NeverScrollableScrollPhysics(), // Otomatik scroll'u kapat
                      child: SizedBox(
                        height: screenHeight * 5, // 5 kez yükseklik
                        child: Stack(
                          children: [
                            // Arka plan resimleri - Evren sistemine göre
                            BlocBuilder<GameStatsCubit, GameStatsState>(
                              builder: (context, gameStatsState) {
                                final currentUniverse = UniverseConfig.getUniverse(gameStatsState.currentUniverseId, context);
                                return Stack(
                                  children: List.generate(5, (i) {
                                    return Positioned(
                                      top: (4 - i) * screenHeight, // En alttaki resim 0, yukarı doğru 1,2,3,4
                                      left: 0,
                                      right: 0,
                                      height: screenHeight,
                                      child: Image.asset(
                                        currentUniverse.backgroundImage,
                                        fit: BoxFit.cover,
                                      ),
                                    );
                                  }),
                                );
                              },
                            ),
                            
                            // Level butonları - Tüm segmentlerde (50 level)
                            
                            // Segment 0 (en altta) - Boşluk var
                            Positioned(
                              top: 4 * screenHeight,
                              left: 0,
                              right: 0,
                              height: screenHeight,
                              child: _PathBasedLevelLayout(
                                polylinePoints: _polylinePoints,
                                viewBoxSize: _viewBox,
                                screenSize: Size(screenWidth, screenHeight),
                                levelCount: 10, // Her segmentte 10 level
                                startOffsetRatio: 0.15, // Boşluk var
                                endOffsetRatio: 0.0,
                                buttonSize: 35,
                                debugShowPath: false,
                                debugShowCoverArea: false,
                                unlockedLevels: gameStatsState.unlockedLevels,
                                levelStars: levelProgressState.levelStars,
                                onLevelTap: _startLevel,
                                levelStart: 1, // Level 1-10
                              ),
                            ),
                            
                            // Segment 1 - Boşluk yok
                            Positioned(
                              top: 3 * screenHeight,
                              left: 0,
                              right: 0,
                              height: screenHeight,
                              child: _PathBasedLevelLayout(
                                polylinePoints: _polylinePoints,
                                viewBoxSize: _viewBox,
                                screenSize: Size(screenWidth, screenHeight),
                                levelCount: 10,
                                startOffsetRatio: 0.0, // Boşluk yok
                                endOffsetRatio: 0.0,
                                buttonSize: 35,
                                debugShowPath: false,
                                debugShowCoverArea: false,
                                unlockedLevels: gameStatsState.unlockedLevels,
                                levelStars: levelProgressState.levelStars,
                                onLevelTap: _startLevel,
                                levelStart: 11, // Level 11-20
                              ),
                            ),
                            
                            // Segment 2 - Boşluk yok
                            Positioned(
                              top: 2 * screenHeight,
                              left: 0,
                              right: 0,
                              height: screenHeight,
                              child: _PathBasedLevelLayout(
                                polylinePoints: _polylinePoints,
                                viewBoxSize: _viewBox,
                                screenSize: Size(screenWidth, screenHeight),
                                levelCount: 10,
                                startOffsetRatio: 0.0, // Boşluk yok
                                endOffsetRatio: 0.0,
                                buttonSize: 35,
                                debugShowPath: false,
                                debugShowCoverArea: false,
                                unlockedLevels: gameStatsState.unlockedLevels,
                                levelStars: levelProgressState.levelStars,
                                onLevelTap: _startLevel,
                                levelStart: 21, // Level 21-30
                              ),
                            ),
                            
                            // Segment 3 - Boşluk yok
                            Positioned(
                              top: 1 * screenHeight,
                              left: 0,
                              right: 0,
                              height: screenHeight,
                              child: _PathBasedLevelLayout(
                                polylinePoints: _polylinePoints,
                                viewBoxSize: _viewBox,
                                screenSize: Size(screenWidth, screenHeight),
                                levelCount: 10,
                                startOffsetRatio: 0.0, // Boşluk yok
                                endOffsetRatio: 0.0,
                                buttonSize: 35,
                                debugShowPath: false,
                                debugShowCoverArea: false,
                                unlockedLevels: gameStatsState.unlockedLevels,
                                levelStars: levelProgressState.levelStars,
                                onLevelTap: _startLevel,
                                levelStart: 31, // Level 31-40
                              ),
                            ),
                            
                            // Segment 4 (en üstte) - Boşluk var
                            Positioned(
                              top: 0 * screenHeight,
                              left: 0,
                              right: 0,
                              height: screenHeight,
                              child: _PathBasedLevelLayout(
                                polylinePoints: _polylinePoints,
                                viewBoxSize: _viewBox,
                                screenSize: Size(screenWidth, screenHeight),
                                levelCount: 10,
                                startOffsetRatio: 0.0, // Boşluk yok
                                endOffsetRatio: 0.12, // %12 boşluk
                                buttonSize: 35,
                                debugShowPath: false,
                                debugShowCoverArea: false,
                                unlockedLevels: gameStatsState.unlockedLevels,
                                levelStars: levelProgressState.levelStars,
                                onLevelTap: _startLevel,
                                levelStart: 41, // Level 41-50
                              ),
                            ),
                          ],
                        ),
                      ),
                    ),


                  // 3. Üst başlık - Envanter bilgileri (sabit pozisyonda)
                  Positioned(
                    top: screenHeight * 0.02, // Ekranın üstünde sabit
                    left: screenWidth * 0.04,
                    child: Container(
                      decoration: BoxDecoration(
                        color: Colors.black.withOpacity(0.3),
                        borderRadius: BorderRadius.circular(16),
                        boxShadow: [
                          BoxShadow(
                            color: Colors.black.withOpacity(0.2),
                            blurRadius: 8,
                            spreadRadius: 1,
                          ),
                        ],
                      ),
                      padding: EdgeInsets.symmetric(horizontal: 16, vertical: 12),
                      child: Column(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          Text(
                            'Oyuncu',
                            style: GoogleFonts.poppins(
                              fontSize: 16,
                              fontWeight: FontWeight.w600,
                              color: Colors.white,
                            ),
                          ),
                          const SizedBox(height: 4),
                          BlocBuilder<InventoryCubit, InventoryState>(
                            builder: (context, inventoryState) {
                              final model = inventoryState.model;
                              final isAdmin = context.watch<AdminModeCubit>().state;
                              
                              return Row(
                                children: [
                                  _StatChip(
                                    icon: Icons.lightbulb,
                                    label: l10n.hint,
                                    value: isAdmin ? '∞' : '${model.hintCount}',
                                  ),
                                  const SizedBox(width: 8),
                                  _StatChip(
                                    icon: Icons.undo,
                                    label: l10n.undo,
                                    value: isAdmin ? '∞' : '${model.undoCount}',
                                  ),
                                  const SizedBox(width: 8),
                                  _StatChip(
                                    icon: Icons.check,
                                    label: l10n.control,
                                    value: isAdmin ? '∞' : '${model.checkCount}',
                                  ),
                                ],
                              );
                            },
                          ),
                        ],
                      ),
                    ),
                  ),

                  // 4. Evren seçici buton - Sağ üst köşe
                  Positioned(
                    top: screenHeight * 0.02,
                    right: screenWidth * 0.04,
                    child: _UniverseSelectorButton(
                      currentUniverseId: context.read<GameStatsCubit>().state.currentUniverseId,
                      onTap: _openUniverseSelector,
                    ),
                  ),

                  // 5. Otomatik tamamlama butonu - Sadece Evren 1'de, yukarıdan ortalı sola yaslı
                  if (context.read<GameStatsCubit>().state.currentUniverseId == 1)
                    Positioned(
                      top: screenHeight * 0.02,
                      left: screenWidth * 0.04,
                      child: _AutoCompleteButton(
                        onTap: _autoCompleteLevels,
                      ),
                    ),

                  // 6. Alt navigasyon barı - Sabit pozisyonda
                  Positioned(
                    left: 0,
                    right: 0,
                    bottom: 0, // Ekranın altında sabit
                    child: MapBottomBar(
                      onTapDaily: () => _openDailyCalendar(),
                      onTapWeekly: () => _openWeekly(),
                      onTapProfile: () => context.router.push(const ProfileRoute()),
                      onTapSettings: () => context.router.push(const SettingsRoute()),
                      onTapMarket: () => context.router.push(const StoreRoute()),
                    ),
                  ),
                  ],
                ),
              ),
            );
          },
        );
      },
    );
  }

  void _startLevel(int level) {
    // Mevcut evren ID'sini GameStatsCubit'ten al
    final gameStatsCubit = context.read<GameStatsCubit>();
    final currentUniverseId = gameStatsCubit.state.currentUniverseId;
    print('=== START LEVEL DEBUG ===');
    print('Current Universe ID: $currentUniverseId');
    print('Level: $level');
    print('Stage parameter: $currentUniverseId');
    print('=== END DEBUG ===');
    context.router.push(GameRoute(stage: currentUniverseId, level: level));
  }

  void _openUniverseSelector() {
    showDialog(
      context: context,
      barrierDismissible: true,
      barrierColor: Colors.black.withOpacity(0.5),
      builder: (context) => UniverseSelector(
        currentUniverseId: context.read<GameStatsCubit>().state.currentUniverseId,
        onUniverseSelected: (universeId) async {
          final currentUniverseId = context.read<GameStatsCubit>().state.currentUniverseId;
          if (universeId != currentUniverseId) {
            // Evren değiştirildi, progress'i güncelle
            final gameStatsCubit = context.read<GameStatsCubit>();
            final levelProgressCubit = context.read<LevelProgressCubit>();
            
            await gameStatsCubit.switchUniverse(universeId);
            await levelProgressCubit.switchUniverse(universeId);
            
            setState(() {
              // _currentUniverseId artık GameStatsCubit'te yönetiliyor
            });
          }
        },
      ),
    );
  }

  void _autoCompleteLevels() async {
    // Onay dialogu göster
    final confirmed = await showDialog<bool>(
      context: context,
      barrierDismissible: true,
      barrierColor: Colors.black.withOpacity(0.5),
      builder: (context) => AlertDialog(
        backgroundColor: Colors.black.withOpacity(0.9),
        shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(16)),
        title: Text(
          'Otomatik Tamamlama',
          style: GoogleFonts.poppins(
            color: Colors.white,
            fontWeight: FontWeight.w600,
          ),
        ),
        content: Text(
          'İlk 49 bölümü 3 yıldızla otomatik tamamlamak istediğinizden emin misiniz?',
          style: GoogleFonts.poppins(
            color: Colors.white70,
            fontSize: 14,
          ),
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.of(context).pop(false),
            child: Text(
              'İptal',
              style: GoogleFonts.poppins(color: Colors.grey),
            ),
          ),
          TextButton(
            onPressed: () => Navigator.of(context).pop(true),
            child: Text(
              'Tamamla',
              style: GoogleFonts.poppins(color: Colors.blue),
            ),
          ),
        ],
      ),
    );

    if (confirmed == true) {
      // Loading göster
      EasyLoading.show(status: 'Bölümler tamamlanıyor...');
      
      try {
        final gameStatsCubit = context.read<GameStatsCubit>();
        final levelProgressCubit = context.read<LevelProgressCubit>();
        
        // İlk 49 bölümü 3 yıldızla tamamla (50. bölümü dahil etme)
        for (int level = 1; level <= 49; level++) {
          // Level'i aç
          await levelProgressCubit.unlockLevel(level);
          // 3 yıldız ver
          await levelProgressCubit.updateStars(level, 3);
          // Level'i tamamla (0 saniye)
          await gameStatsCubit.onLevelCompleted(level, 0);
        }
        
        // 50. bölümü sadece aç (yıldız verme, tamamlama)
        await levelProgressCubit.unlockLevel(50);
        
        EasyLoading.dismiss();
        
        // Başarı mesajı
        if (context.mounted) {
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(
              content: Text(AppLocalizations.of(context)!.levelsCompletedSuccessfully),
              backgroundColor: Colors.green,
              duration: Duration(seconds: 2),
            ),
          );
        }
      } catch (e) {
        EasyLoading.dismiss();
        if (context.mounted) {
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(
              content: Text('Hata: $e'),
              backgroundColor: Colors.red,
            ),
          );
        }
      }
    }
  }
}

class _UniverseSelectorButton extends StatelessWidget {
  final int currentUniverseId;
  final VoidCallback onTap;

  const _UniverseSelectorButton({
    required this.currentUniverseId,
    required this.onTap,
  });

  @override
  Widget build(BuildContext context) {
    final currentUniverse = UniverseConfig.getUniverse(currentUniverseId, context);
    
    return GestureDetector(
      onTap: onTap,
      child: Container(
        padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 12),
        decoration: BoxDecoration(
          color: Colors.black.withOpacity(0.3),
          borderRadius: BorderRadius.circular(16),
          boxShadow: [
            BoxShadow(
              color: Colors.black.withOpacity(0.2),
              blurRadius: 8,
              spreadRadius: 1,
            ),
          ],
        ),
        child: Row(
          mainAxisSize: MainAxisSize.min,
          children: [
            Icon(
              Icons.public,
              color: Colors.white,
              size: 20,
            ),
            const SizedBox(width: 8),
            Text(
              currentUniverse.name,
              style: GoogleFonts.poppins(
                fontSize: 14,
                fontWeight: FontWeight.w600,
                color: Colors.white,
              ),
            ),
            const SizedBox(width: 4),
            Icon(
              Icons.keyboard_arrow_down,
              color: Colors.white,
              size: 16,
            ),
          ],
        ),
      ),
    );
  }
}

class _AutoCompleteButton extends StatelessWidget {
  final VoidCallback onTap;

  const _AutoCompleteButton({
    required this.onTap,
  });

  @override
  Widget build(BuildContext context) {
    return GestureDetector(
      onTap: onTap,
      child: Container(
        padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 12),
        decoration: BoxDecoration(
          color: Colors.orange.withOpacity(0.8),
          borderRadius: BorderRadius.circular(16),
          boxShadow: [
            BoxShadow(
              color: Colors.orange.withOpacity(0.3),
              blurRadius: 8,
              spreadRadius: 1,
            ),
          ],
        ),
        child: Row(
          mainAxisSize: MainAxisSize.min,
          children: [
            Icon(
              Icons.auto_awesome,
              color: Colors.white,
              size: 20,
            ),
            const SizedBox(width: 8),
            Text(
              'Hızlı Tamamla',
              style: GoogleFonts.poppins(
                fontSize: 14,
                fontWeight: FontWeight.w600,
                color: Colors.white,
              ),
            ),
          ],
        ),
      ),
    );
  }
}

class _StatChip extends StatelessWidget {
  final IconData icon;
  final String label;
  final String value;

  const _StatChip({
    required this.icon,
    required this.label,
    required this.value,
  });

  @override
  Widget build(BuildContext context) {
    return Container(
      padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 4),
      decoration: BoxDecoration(
        color: Colors.white.withOpacity(0.2),
        borderRadius: BorderRadius.circular(12),
      ),
      child: Row(
        mainAxisSize: MainAxisSize.min,
        children: [
          Icon(
            icon,
            size: 14,
            color: Colors.white,
          ),
          const SizedBox(width: 4),
          Text(
            '$label: $value',
            style: GoogleFonts.poppins(
              fontSize: 12,
              fontWeight: FontWeight.w500,
              color: Colors.white,
            ),
          ),
        ],
      ),
    );
  }
}

class _DailyPuzzleButton extends StatelessWidget {
  final VoidCallback onTap;
  final double? sizeOverride;
  const _DailyPuzzleButton({required this.onTap, this.sizeOverride});

  @override
  Widget build(BuildContext context) {
    final Size mqSize = MediaQuery.of(context).size;
    // Güncel boyut kuralı: min 40, max 80, oran 0.12 (override varsa onu kullan)
    final double fallbackSize = (mqSize.width * 0.12).clamp(40.0, 80.0).toDouble();
    final double iconSize = sizeOverride ?? fallbackSize;

    return GestureDetector(
      onTap: onTap,
      behavior: HitTestBehavior.opaque,
      child: SizedBox(
        width: iconSize,
        height: iconSize,
        child: Image.asset(
          'assets/images/daily_button.png',
          fit: BoxFit.contain,
        ),
      ),
    );
  }
}

extension on _MapScreenState {
  Future<void> _openDailyCalendar() async {
    final now = DateTime.now();
    final today = DateTime(now.year, now.month, now.day);

    await showDialog(
      context: context,
      barrierDismissible: true,
      barrierColor: Colors.black.withOpacity(0.5),
      builder: (context) {
        final size = MediaQuery.of(context).size;
        final maxWidth = size.width * 0.7; // Ekranın %70'i
        final maxHeight = size.height * 0.56; // Ekranın %56'sı
        final dialogWidth = maxWidth > 450 ? 450.0 : maxWidth;
        final dialogHeight = maxHeight > 500 ? 500.0 : maxHeight;

        return Center(
          child: Material(
            color: Colors.transparent,
            child: Container(
              width: dialogWidth,
              height: dialogHeight,
              padding: const EdgeInsets.all(12),
              decoration: BoxDecoration(
                color: Colors.black.withOpacity(0.75),
                borderRadius: BorderRadius.circular(12),
                boxShadow: [
                  BoxShadow(
                    color: Colors.black.withOpacity(0.3),
                    blurRadius: 16,
                  ),
                ],
              ),
              child: _DailyCalendar(
                focusedDay: today,
                onSelectToday: () {
                  Navigator.of(context).pop();
                  _startDaily(today);
                },
              ),
            ),
          ),
        );
      },
    );
  }

  void _startDaily(DateTime date) {
    // Route args günlük tarihi henüz desteklemiyor; geçici olarak bir servis ile aktar
    DailyPuzzleSelection.set(date);
    context.router.push(GameRoute(stage: widget.stage, level: 1));
  }

  Future<void> _openWeekly() async {
    try {
      EasyLoading.show(status: 'Yükleniyor...');
      final now = DateTime.now();
      final int weekday = now.weekday; // 1=Mon ... 7=Sun
      final DateTime monday = now.subtract(Duration(days: weekday - 1));
      
      // Haftalık puzzle seçimini set et
      WeeklyPuzzleSelection.set(monday);
      
      EasyLoading.dismiss();
      context.router.push(GameRoute(stage: widget.stage, level: 1));
    } catch (e) {
      EasyLoading.dismiss();
      if (context.mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('Haftalık bulmaca bulunamadı'),
            backgroundColor: Colors.red,
          ),
        );
      }
    }
  }
}

class _DailyCalendar extends StatelessWidget {
  final DateTime focusedDay;
  final VoidCallback onSelectToday;

  const _DailyCalendar({
    required this.focusedDay,
    required this.onSelectToday,
  });

  @override
  Widget build(BuildContext context) {
    final firstDay = focusedDay.subtract(const Duration(days: 365));
    final lastDay = focusedDay.add(const Duration(days: 365));
    final theme = Theme.of(context);

    return TableCalendar<void>(
      locale: 'tr_TR',
      firstDay: firstDay,
      lastDay: lastDay,
      focusedDay: focusedDay,
      availableGestures: AvailableGestures.none,
      headerStyle: HeaderStyle(
        titleCentered: true,
        formatButtonVisible: false,
        titleTextStyle: theme.textTheme.titleMedium!.copyWith(color: Colors.white),
        leftChevronVisible: false,
        rightChevronVisible: false,
      ),
      calendarStyle: const CalendarStyle(
        outsideDaysVisible: false,
        defaultTextStyle: TextStyle(color: Colors.white70),
        weekendTextStyle: TextStyle(color: Colors.white70),
        disabledTextStyle: TextStyle(color: Colors.white24),
        todayTextStyle: TextStyle(color: Colors.black),
        todayDecoration: BoxDecoration(color: Colors.amber, shape: BoxShape.circle),
        selectedTextStyle: TextStyle(color: Colors.black),
        selectedDecoration: BoxDecoration(color: Colors.amber, shape: BoxShape.circle),
      ),
      calendarBuilders: CalendarBuilders(
        disabledBuilder: (context, day, _) {
          return Center(
            child: Text('${day.day}', style: const TextStyle(color: Colors.white24)),
          );
        },
        defaultBuilder: (context, day, _) {
          final isToday = _isSameDay(day, focusedDay);
          if (isToday) {
            return Center(
              child: Container(
                width: 36,
                height: 36,
                decoration: const BoxDecoration(color: Colors.amber, shape: BoxShape.circle),
                alignment: Alignment.center,
                child: Text('${day.day}', style: const TextStyle(color: Colors.black, fontWeight: FontWeight.bold)),
              ),
            );
          }
          return Center(
            child: Text('${day.day}', style: const TextStyle(color: Colors.white24)),
          );
        },
      ),
      enabledDayPredicate: (day) => _isSameDay(day, focusedDay),
      onDaySelected: (selectedDay, _) {
        if (_isSameDay(selectedDay, focusedDay)) {
          onSelectToday();
        }
      },
      selectedDayPredicate: (day) => _isSameDay(day, focusedDay),
    );
  }

  bool _isSameDay(DateTime a, DateTime b) {
    return a.year == b.year && a.month == b.month && a.day == b.day;
  }
}

class _PathBasedLevelLayout extends StatelessWidget {
  final String polylinePoints;
  final Size viewBoxSize;
  final Size screenSize;
  final int levelCount;
  final double startOffsetRatio;
  final double endOffsetRatio;
  final double buttonSize;
  final bool debugShowPath;
  final bool debugShowCoverArea;
  final List<int> unlockedLevels;
  final Map<int, int> levelStars;
  final void Function(int levelIndex) onLevelTap;
  final int levelStart; // Level numaralarının başlangıç değeri

  const _PathBasedLevelLayout({
    required this.polylinePoints,
    required this.viewBoxSize,
    required this.screenSize,
    required this.levelCount,
    required this.startOffsetRatio,
    required this.endOffsetRatio,
    required this.buttonSize,
    required this.debugShowPath,
    required this.debugShowCoverArea,
    required this.unlockedLevels,
    required this.levelStars,
    required this.onLevelTap,
    required this.levelStart,
  });

  // SVG polyline "points" string'ini parse et
  List<Offset> _parsePolylinePoints(String raw) {
    final tokens = raw.trim().split(RegExp(r'[\s,]+')).where((t) => t.isNotEmpty);
    final nums = <double>[];
    for (var t in tokens) {
      if (t.startsWith('.')) t = '0$t';
      if (t.startsWith('-.')) t = t.replaceFirst('-.', '-0.');
      nums.add(double.parse(t));
    }
    final points = <Offset>[];
    for (int i = 0; i + 1 < nums.length; i += 2) {
      points.add(Offset(nums[i], nums[i + 1]));
    }
    return points;
  }

  // BoxFit.cover dönüşümü hesapla (arka plan ile aynı)
  _CoverTransform _calculateCoverTransform() {
    final sourceAspect = viewBoxSize.width / viewBoxSize.height;
    final targetAspect = screenSize.width / screenSize.height;
    
    double scaleX, scaleY, offsetX, offsetY;
    
    if (sourceAspect > targetAspect) {
      // Kaynak daha geniş - yüksekliğe göre ölçekle
      scaleY = screenSize.height / viewBoxSize.height;
      scaleX = scaleY;
      offsetX = (screenSize.width - viewBoxSize.width * scaleX) / 2;
      offsetY = 0;
    } else {
      // Kaynak daha yüksek - genişliğe göre ölçekle
      scaleX = screenSize.width / viewBoxSize.width;
      scaleY = scaleX;
      offsetX = 0;
      offsetY = (screenSize.height - viewBoxSize.height * scaleY) / 2;
    }
    
    return _CoverTransform(scaleX, scaleY, offsetX, offsetY);
  }

  // Path üzerinde eşit aralıklı noktalar hesapla
  List<Offset> _getPointsOnPath(List<Offset> points, int count, double startRatio, double endRatio) {
    if (points.length < 2) return [];
    
    final result = <Offset>[];
    final path = Path();
    path.moveTo(points.first.dx, points.first.dy);
    for (int i = 1; i < points.length; i++) {
      path.lineTo(points[i].dx, points[i].dy);
    }
    
    final pathMetric = path.computeMetrics().first;
    final total = pathMetric.length;
    
    final start = total * startRatio;
    final end = total * (1.0 - endRatio);
    final avail = (end - start).clamp(1.0, total);
    final step = avail / count;
    
    for (int i = 0; i < count; i++) {
      final at = (start + step * (i + 0.5)).clamp(0.0, total - 1e-6);
      final tangent = pathMetric.getTangentForOffset(at);
      if (tangent != null) {
        result.add(tangent.position);
      }
    }
    
    return result;
  }

  @override
  Widget build(BuildContext context) {
    // 1. Polyline'ı parse et
    final polyPts = _parsePolylinePoints(polylinePoints);
    if (polyPts.isEmpty) return const SizedBox.shrink();

    // 2. Cover dönüşümünü hesapla
    final transform = _calculateCoverTransform();

    // 3. Path'i ekran koordinatlarına dönüştür
    final screenPoints = polyPts.map((p) => 
      Offset(p.dx * transform.scaleX + transform.offsetX, 
             p.dy * transform.scaleY + transform.offsetY)
    ).toList();

    // 4. Path üzerinde buton pozisyonlarını hesapla
    final buttonPositions = _getPointsOnPath(screenPoints, levelCount, startOffsetRatio, endOffsetRatio);

    final children = <Widget>[];

    // Debug: Cover alanını göster
    if (debugShowCoverArea) {
      children.add(Positioned.fill(
        child: CustomPaint(
          painter: _CoverAreaPainter(transform, viewBoxSize),
        ),
      ));
    }

    // Debug: Path'i çiz
    if (debugShowPath) {
      children.add(Positioned.fill(
        child: CustomPaint(
          painter: _PathPainter(screenPoints),
        ),
      ));
    }

    // Level butonları
    for (int i = 0; i < buttonPositions.length; i++) {
      final pos = buttonPositions[i];
      final levelIndex = levelStart + i; // levelStart ile başlayarak doğru level numarasını kullan
      final isUnlocked = unlockedLevels.contains(levelIndex);
      final stars = levelStars[levelIndex] ?? 0;
      
      children.add(Positioned(
        left: pos.dx - buttonSize / 2,
        top: pos.dy - buttonSize / 2,
        child: _LevelCircle(
          label: '$levelIndex',
          size: buttonSize,
          isUnlocked: isUnlocked,
          stars: stars,
          onTap: isUnlocked ? () => onLevelTap(levelIndex) : null,
        ),
      ));
    }

    return Stack(clipBehavior: Clip.none, children: children);
  }
}

class _CoverTransform {
  final double scaleX;
  final double scaleY;
  final double offsetX;
  final double offsetY;

  _CoverTransform(this.scaleX, this.scaleY, this.offsetX, this.offsetY);
}

class _CoverAreaPainter extends CustomPainter {
  final _CoverTransform transform;
  final Size viewBoxSize;

  _CoverAreaPainter(this.transform, this.viewBoxSize);

  @override
  void paint(Canvas canvas, Size size) {
    final rect = Rect.fromLTWH(
      transform.offsetX,
      transform.offsetY,
      viewBoxSize.width * transform.scaleX,
      viewBoxSize.height * transform.scaleY,
    );
    
    final paint = Paint()
      ..color = Colors.red.withOpacity(0.3)
      ..style = PaintingStyle.stroke
      ..strokeWidth = 2;
    
    canvas.drawRect(rect, paint);
  }

  @override
  bool shouldRepaint(covariant _CoverAreaPainter oldDelegate) => false;
}

class _PathPainter extends CustomPainter {
  final List<Offset> points;

  _PathPainter(this.points);

  @override
  void paint(Canvas canvas, Size size) {
    if (points.length < 2) return;
    
    final paint = Paint()
      ..color = Colors.red.withOpacity(1.0)
      ..style = PaintingStyle.stroke
      ..strokeWidth = 8;
    
    final path = Path();
    path.moveTo(points.first.dx, points.first.dy);
    for (int i = 1; i < points.length; i++) {
      path.lineTo(points[i].dx, points[i].dy);
    }
    
    canvas.drawPath(path, paint);
  }

  @override
  bool shouldRepaint(covariant _PathPainter oldDelegate) => false;
}

class _LevelCircle extends StatelessWidget {
  const _LevelCircle({
    required this.label,
    required this.size,
    required this.isUnlocked,
    required this.stars,
    this.onTap,
  });

  final String label;
  final double size;
  final bool isUnlocked;
  final int stars;
  final VoidCallback? onTap;

  @override
  Widget build(BuildContext context) {
    return GestureDetector(
      onTap: onTap,
      child: Column(
        mainAxisSize: MainAxisSize.min,
        children: [
          // Ana buton
          Stack(
            alignment: Alignment.center,
            children: [
              // Alt katman: Beyaz halo (glow) - sadece açık level'lar için
              if (isUnlocked)
                SizedBox(
                  width: size + 10,
                  height: size + 10,
                  child: Container(
                    decoration: BoxDecoration(
                      shape: BoxShape.circle,
                      color: Colors.white.withOpacity(0.18),
                    ),
                  ),
                ),
              
              // Orta katman: Daire
              SizedBox(
                width: size,
                height: size,
                child: Container(
                  decoration: BoxDecoration(
                    shape: BoxShape.circle,
                    color: isUnlocked 
                      ? const Color(0xFF2F73FF) // açık level'lar için mavi
                      : Colors.grey.shade300, // kilitli level'lar için net gri
                    border: Border.all(
                      color: isUnlocked ? Colors.white : Colors.grey.shade400, 
                      width: 2
                    ),
                  ),
                ),
              ),
              
              // Üst katman: İçerik (rakam veya kilit simgesi)
              if (isUnlocked)
                // Açık level'lar için rakam
                Text(
                  label,
                  style: const TextStyle(
                    color: Colors.white,
                    fontWeight: FontWeight.w700,
                    fontSize: 16,
                  ),
                )
              else
                // Kilitli level'lar için kilit simgesi
                Icon(
                  Icons.lock,
                  color: Colors.grey.shade600,
                  size: size * 0.4,
                ),
            ],
          ),
          
          // Yıldızlar - sadece açık level'lar için
          if (isUnlocked && stars > 0)
            Transform.translate(
              offset: const Offset(0, -4),
              child: Row(
                mainAxisSize: MainAxisSize.min,
                children: List.generate(3, (index) {
                  return Icon(
                    index < stars ? Icons.star : Icons.star_border,
                    color: index < stars ? Colors.amber : Colors.grey.shade400,
                    size: 10,
                  );
                }),
              ),
            ),
        ],
      ),
    );
  }
}\n\n===== FILE 109/160: lib/screens/profile_screen.dart =====\nimport 'package:auto_route/auto_route.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';

import '../bloc/profile_cubit.dart';
import '../bloc/game_stats_cubit.dart';
import '../l10n/app_localizations.dart';

@RoutePage()
class ProfileScreen extends StatelessWidget {
  const ProfileScreen({super.key});

  @override
  Widget build(BuildContext context) {
    return const _ProfileView();
  }
}

class _ProfileView extends StatefulWidget {
  const _ProfileView();

  @override
  State<_ProfileView> createState() => _ProfileViewState();
}

class _ProfileViewState extends State<_ProfileView> {

  @override
  Widget build(BuildContext context) {
    final theme = Theme.of(context);
    final size = MediaQuery.of(context).size;
    final gridCrossAxisCount = size.width < 600 ? 3 : 4;
    // 5 avatar tanımı
    final avatarAssets = [
      'assets/avatar/avatar1.png',
      'assets/avatar/avatar2.png', 
      'assets/avatar/avatar3.png',
      'assets/avatar/avatar4.png',
      'assets/avatar/avatar5.png',
    ];
    
    // Kilitli avatarlar
    final lockedAvatars = {'assets/avatar/avatar4.png', 'assets/avatar/avatar5.png'};

    return Scaffold(
      appBar: AppBar(
        title: Text('Profil'),
        backgroundColor: theme.appBarTheme.backgroundColor,
      ),
      body: BlocBuilder<ProfileCubit, ProfileState>(
        builder: (context, profileState) {
          return BlocBuilder<GameStatsCubit, GameStatsState>(
            builder: (context, gameStatsState) {
              final profileCubit = context.read<ProfileCubit>();

              // GameStats'ten istatistikleri ProfileCubit'e senkronize et
              WidgetsBinding.instance.addPostFrameCallback((_) {
                profileCubit.updateStatsFromGameStats(
                  dailyCompleted: gameStatsState.dailyCompleted,
                  weeklyCompleted: gameStatsState.weeklyCompleted,
                  totalStars: gameStatsState.totalStars,
                  bestTimeSeconds: gameStatsState.fastestTime,
                  flawlessCount: gameStatsState.perfectPuzzles,
                );
              });

              return SingleChildScrollView(
                padding: const EdgeInsets.all(16),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.stretch,
                  children: [
                    // Avatar Seçimi
                    Card(
                      color: theme.cardColor.withOpacity(0.9),
                      child: Padding(
                        padding: const EdgeInsets.all(16.0),
                        child: Column(
                          crossAxisAlignment: CrossAxisAlignment.start,
                          children: [
                            Text(
                              'Avatar Seç',
                              style: theme.textTheme.titleMedium?.copyWith(
                                fontWeight: FontWeight.bold,
                              ),
                            ),
                            const SizedBox(height: 16),
                            GridView.builder(
                              itemCount: avatarAssets.length,
                              shrinkWrap: true,
                              physics: const NeverScrollableScrollPhysics(),
                              gridDelegate: SliverGridDelegateWithFixedCrossAxisCount(
                                crossAxisCount: gridCrossAxisCount,
                                mainAxisSpacing: 12,
                                crossAxisSpacing: 12,
                                childAspectRatio: 1,
                              ),
                              itemBuilder: (context, index) {
                                final asset = avatarAssets[index];
                                final isLocked = lockedAvatars.contains(asset);
                                final isSelected = profileState.selectedAvatarPath == asset;
                                final isPending = profileState.pendingAvatarPath == asset;
                                
                                return _AvatarTile(
                                  assetPath: asset,
                                  isLocked: isLocked,
                                  isSelected: isSelected,
                                  isPending: isPending,
                                  onTap: () => _handleAvatarTap(context, profileCubit, asset, isLocked),
                                );
                              },
                            ),
                          ],
                        ),
                      ),
                    ),

                    const SizedBox(height: 16),

                    // İstatistikler
                    Card(
                      color: theme.cardColor.withOpacity(0.9),
                      child: Padding(
                        padding: const EdgeInsets.all(16.0),
                        child: Column(
                          crossAxisAlignment: CrossAxisAlignment.start,
                          children: [
                            Text(
                              'İstatistikler',
                              style: theme.textTheme.titleMedium?.copyWith(
                                fontWeight: FontWeight.bold,
                              ),
                            ),
                            const SizedBox(height: 12),
                            Wrap(
                              spacing: 12,
                              runSpacing: 12,
                              children: [
                                                        _StatCard(title: 'Günlük', value: gameStatsState.dailyCompleted.toString()),
                        _StatCard(title: 'Haftalık', value: gameStatsState.weeklyCompleted.toString()),
                        _StatCard(title: 'Toplam Yıldız', value: gameStatsState.totalStars.toString()),
                        _StatCard(title: 'En Hızlı', value: _formatTime(gameStatsState.fastestTime)),
                        _StatCard(title: 'Hatasız', value: gameStatsState.perfectPuzzles.toString()),
                              ],
                            ),
                          ],
                        ),
                      ),
                    ),

                    const SizedBox(height: 16),

                    // Başarımlar
                    Card(
                      color: theme.cardColor.withOpacity(0.9),
                      child: Padding(
                        padding: const EdgeInsets.all(16.0),
                        child: Column(
                          crossAxisAlignment: CrossAxisAlignment.start,
                          children: [
                            Text(
                              'Başarımlar',
                              style: theme.textTheme.titleMedium?.copyWith(
                                fontWeight: FontWeight.bold,
                              ),
                            ),
                            const SizedBox(height: 12),
                            Wrap(
                              spacing: 8,
                              runSpacing: 8,
                              children: [
                                                            _BadgeChip(label: AppLocalizations.of(context)!.firstDailyPuzzle, unlocked: profileState.achievedBadges.contains('first_daily')),
                            _BadgeChip(label: AppLocalizations.of(context)!.sevenDaysInARow, unlocked: profileState.achievedBadges.contains('streak_7')),
                            _BadgeChip(label: AppLocalizations.of(context)!.hundredPuzzles, unlocked: profileState.achievedBadges.contains('complete_100')),
                              ],
                            ),
                          ],
                        ),
                      ),
                    ),

                    const SizedBox(height: 16),

                    // Bağlantılar
                    Card(
                      color: theme.cardColor.withOpacity(0.9),
                      child: Padding(
                        padding: const EdgeInsets.all(16.0),
                        child: Column(
                          crossAxisAlignment: CrossAxisAlignment.start,
                          children: [
                            Text(
                              'Hesap Bağlantıları',
                              style: theme.textTheme.titleMedium?.copyWith(
                                fontWeight: FontWeight.bold,
                              ),
                            ),
                            const SizedBox(height: 12),
                            Wrap(
                              spacing: 8,
                              children: [
                                OutlinedButton.icon(
                                  onPressed: () {}, 
                                  icon: const Icon(Icons.g_mobiledata), 
                                  label: Text('Google')
                                ),
                                OutlinedButton.icon(
                                  onPressed: () {}, 
                                  icon: const Icon(Icons.apple), 
                                  label: Text('Apple')
                                ),
                                OutlinedButton.icon(
                                  onPressed: () {}, 
                                  icon: const Icon(Icons.facebook), 
                                  label: Text('Facebook')
                                ),
                              ],
                            ),
                          ],
                        ),
                      ),
                    ),
                  ],
                ),
              );
            },
          );
        },
      ),
    );
  }

  void _handleAvatarTap(BuildContext context, ProfileCubit cubit, String avatarPath, bool isLocked) {
    if (isLocked) {
      _showAvatarLockedDialog(context, avatarPath);
    } else {
      cubit.setPendingAvatar(avatarPath);
      _showAvatarConfirmDialog(context, cubit, avatarPath);
    }
  }

  void _showAvatarConfirmDialog(BuildContext context, ProfileCubit cubit, String avatarPath) {
    final theme = Theme.of(context);

    
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        backgroundColor: theme.dialogBackgroundColor,
        title: Text('Avatarı değiştir?'),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            ClipRRect(
              borderRadius: BorderRadius.circular(12),
              child: Image.asset(
                avatarPath,
                width: 80,
                height: 80,
                fit: BoxFit.cover,
              ),
            ),
            const SizedBox(height: 16),
            Text('Bu avatarı kullanmak istiyor musun?'),
          ],
        ),
        actions: [
          TextButton(
            onPressed: () {
              cubit.clearPendingAvatar();
              Navigator.of(context).pop();
            },
            child: Text('Vazgeç'),
          ),
          ElevatedButton(
            onPressed: () async {
              await cubit.confirmAvatarSelection();
              Navigator.of(context).pop();
              
              // SnackBar göster
              if (context.mounted) {
                ScaffoldMessenger.of(context).showSnackBar(
                  SnackBar(
                    content: Text('Avatar güncellendi'),
                    duration: Duration(seconds: 2),
                  ),
                );
              }
            },
            child: Text('Onay'),
          ),
        ],
      ),
    );
  }

  void _showAvatarLockedDialog(BuildContext context, String avatarPath) {
    final theme = Theme.of(context);
    
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        backgroundColor: theme.dialogBackgroundColor,
        title: Text('Kilitli Avatar'),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            ClipRRect(
              borderRadius: BorderRadius.circular(12),
              child: ColorFiltered(
                colorFilter: const ColorFilter.matrix([
                  0.2126, 0.7152, 0.0722, 0, 0,
                  0.2126, 0.7152, 0.0722, 0, 0,
                  0.2126, 0.7152, 0.0722, 0, 0,
                  0, 0, 0, 1, 0,
                ]),
                child: Image.asset(
                  avatarPath,
                  width: 80,
                  height: 80,
                  fit: BoxFit.cover,
                ),
              ),
            ),
            const SizedBox(height: 16),
            Text('Bu avatar kilitli. Açmak için satın al.'),
          ],
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.of(context).pop(),
            child: Text('Vazgeç'),
          ),
          ElevatedButton(
            onPressed: () {
              Navigator.of(context).pop();
              // TODO: Satın alma akışı buraya bağlanacak
            },
            child: Text('Satın Al'),
          ),
        ],
      ),
    );
  }

  String _formatTime(int seconds) {
    if (seconds >= 9999) return '-';
    final m = seconds ~/ 60;
    final s = seconds % 60;
    return '${m.toString().padLeft(2, '0')}:${s.toString().padLeft(2, '0')}';
  }
}

class _AvatarTile extends StatelessWidget {
  final String assetPath;
  final bool isLocked;
  final bool isSelected;
  final bool isPending;
  final VoidCallback onTap;

  const _AvatarTile({
    required this.assetPath,
    required this.isLocked,
    required this.isSelected,
    required this.isPending,
    required this.onTap,
  });

  @override
  Widget build(BuildContext context) {
    final theme = Theme.of(context);
    
    return AnimatedContainer(
      duration: const Duration(milliseconds: 200),
      decoration: BoxDecoration(
        borderRadius: BorderRadius.circular(12),
        border: isSelected 
          ? Border.all(
              color: theme.colorScheme.primary,
              width: 2,
            )
          : isPending
            ? Border.all(
                color: theme.colorScheme.secondary,
                width: 2,
              )
            : null,
        boxShadow: isSelected 
          ? [
              BoxShadow(
                color: theme.colorScheme.primary.withOpacity(0.3),
                blurRadius: 8,
                spreadRadius: 2,
              ),
            ]
          : isPending
            ? [
                BoxShadow(
                  color: theme.colorScheme.secondary.withOpacity(0.3),
                  blurRadius: 4,
                  spreadRadius: 1,
                ),
              ]
            : null,
      ),
      child: Material(
        color: Colors.transparent,
        child: InkWell(
          onTap: onTap,
          borderRadius: BorderRadius.circular(12),
          child: Stack(
            fit: StackFit.expand,
            children: [
              ClipRRect(
                borderRadius: BorderRadius.circular(12),
                child: ColorFiltered(
                  colorFilter: isLocked 
                    ? const ColorFilter.matrix([
                        0.2126, 0.7152, 0.0722, 0, 0,
                        0.2126, 0.7152, 0.0722, 0, 0,
                        0.2126, 0.7152, 0.0722, 0, 0,
                        0, 0, 0, 1, 0,
                      ])
                    : const ColorFilter.mode(Colors.transparent, BlendMode.srcOver),
                  child: Image.asset(
                    assetPath,
                    fit: BoxFit.cover,
                    errorBuilder: (context, error, stack) {
                      return Container(
                        color: Colors.grey.withOpacity(0.2),
                        child: const Icon(Icons.person, color: Colors.white70),
                      );
                    },
                  ),
                ),
              ),
              if (isLocked)
                Container(
                  decoration: BoxDecoration(
                    color: Colors.black.withOpacity(0.3),
                    borderRadius: BorderRadius.circular(12),
                  ),
                  child: const Center(
                    child: Icon(
                      Icons.lock,
                      color: Colors.white,
                      size: 24,
                    ),
                  ),
                ),
            ],
          ),
        ),
      ),
    );
  }
}

class _StatCard extends StatelessWidget {
  final String title;
  final String value;
  
  const _StatCard({required this.title, required this.value});
  
  @override
  Widget build(BuildContext context) {
    final theme = Theme.of(context);
    
    return Container(
      width: 140,
      padding: const EdgeInsets.all(12),
      decoration: BoxDecoration(
        color: theme.colorScheme.surface.withOpacity(0.1),
        borderRadius: BorderRadius.circular(8),
        border: Border.all(
          color: theme.colorScheme.outline.withOpacity(0.2),
        ),
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Text(
            title, 
            style: theme.textTheme.bodySmall?.copyWith(
              color: theme.colorScheme.onSurface.withOpacity(0.7),
            ),
          ),
          const SizedBox(height: 4),
          Text(
            value, 
            style: theme.textTheme.titleMedium?.copyWith(
              fontWeight: FontWeight.bold,
            ),
          ),
        ],
      ),
    );
  }
}

class _BadgeChip extends StatelessWidget {
  final String label;
  final bool unlocked;
  
  const _BadgeChip({required this.label, required this.unlocked});
  
  @override
  Widget build(BuildContext context) {
    final theme = Theme.of(context);
    
    return Chip(
      backgroundColor: unlocked 
        ? theme.colorScheme.primary.withOpacity(0.2)
        : theme.colorScheme.surface.withOpacity(0.1),
      avatar: Icon(
        unlocked ? Icons.emoji_events : Icons.lock_outline,
        size: 16,
        color: unlocked ? theme.colorScheme.primary : theme.colorScheme.onSurface.withOpacity(0.5),
      ),
      label: Text(
        label,
        style: theme.textTheme.bodySmall?.copyWith(
          color: unlocked 
            ? theme.colorScheme.primary
            : theme.colorScheme.onSurface.withOpacity(0.7),
        ),
      ),
    );
  }
}


\n\n===== FILE 110/160: lib/screens/settings_screen.dart =====\nimport 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:auto_route/auto_route.dart';
import '../settings/settings_cubit.dart';
import '../settings/settings_state.dart';
import '../settings/settings_repository.dart';
import '../bloc/level_progress_cubit.dart';
import '../bloc/game_stats_cubit.dart';
import '../inventory/inventory_cubit.dart';
import '../admin/admin_mode_cubit.dart';
import '../store/store_cubit.dart';
import '../core/notification_service.dart';
import '../services/haptic_service.dart';
import '../l10n/app_localizations.dart';
import '../config/universe_config.dart';

@RoutePage()
class SettingsScreen extends StatefulWidget {
  const SettingsScreen({super.key});

  @override
  State<SettingsScreen> createState() => _SettingsScreenState();
}

class _SettingsScreenState extends State<SettingsScreen> {
  Locale? _selectedLocale;

  @override
  Widget build(BuildContext context) {
    final theme = Theme.of(context);
    final l10n = AppLocalizations.of(context)!;

    return BlocConsumer<SettingsCubit, SettingsState>(
      listener: (context, state) {
        if (state.status == SettingsStatus.saved) {
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(content: Text(l10n.close)),
          );
        } else if (state.status == SettingsStatus.error) {
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(content: Text(state.errorMessage ?? 'Hata oluştu')),
          );
        }
      },
      builder: (context, state) {
        if (state.status == SettingsStatus.loading) {
          return const Scaffold(
            body: Center(child: CircularProgressIndicator()),
          );
        }

        final m = state.model;
        final currentLocale = context.select((SettingsCubit c) => c.currentLocale);
        
        // İlk yüklemede seçili locale'i ayarla
        if (_selectedLocale == null) {
          _selectedLocale = currentLocale;
        }
        
        return Scaffold(
          appBar: AppBar(title: Text(l10n.settings)),
          body: state.status == SettingsStatus.loading
              ? const Center(child: CircularProgressIndicator())
              : SingleChildScrollView(
                  padding: const EdgeInsets.all(16),
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.stretch,
                    children: [
                      _Section(
                        title: l10n.soundMusic,
                        child: Column(
                          children: [
                            SwitchListTile(
                              value: m.musicOn,
                              title: Text(l10n.music),
                              onChanged: (_) => context.read<SettingsCubit>().toggleMusic(),
                            ),
                            SwitchListTile(
                              value: m.sfxOn,
                              title: Text(l10n.soundEffects),
                              onChanged: (_) => context.read<SettingsCubit>().toggleSfx(),
                            ),
                            ListTile(
                              title: Text(l10n.soundVolume),
                              subtitle: Slider(
                                value: m.volume,
                                min: 0.0,
                                max: 1.0,
                                divisions: 10,
                                onChanged: (v) => context.read<SettingsCubit>().setVolume(v),
                              ),
                            ),
                            SwitchListTile(
                              value: m.hapticOn,
                              title: Text(l10n.vibration),
                              onChanged: (_) => context.read<SettingsCubit>().toggleHaptic(),
                            ),
                            // Titreşim test butonu
                            if (m.hapticOn) ...[
                              const SizedBox(height: 8),
                              ElevatedButton.icon(
                                onPressed: () async {
                                  await HapticService().testAllVibrations(context: context);
                                  if (context.mounted) {
                                    ScaffoldMessenger.of(context).showSnackBar(
                                      SnackBar(
                                        content: Text(AppLocalizations.of(context)!.vibrationTestCompleted),
                                        duration: Duration(seconds: 2),
                                      ),
                                    );
                                  }
                                },
                                icon: const Icon(Icons.vibration),
                                label: Text(AppLocalizations.of(context)!.vibrationTest),
                                style: ElevatedButton.styleFrom(
                                  backgroundColor: Colors.blue.shade100,
                                  foregroundColor: Colors.blue.shade800,
                                ),
                              ),
                            ],
                          ],
                        ),
                      ),

                      const SizedBox(height: 12),

                      _Section(
                        title: l10n.notifications,
                        child: Column(
                          crossAxisAlignment: CrossAxisAlignment.start,
                          children: [
                            SwitchListTile(
                              value: m.remindDailyOn,
                              title: Text(l10n.remindDailyPuzzle),
                              onChanged: (on) async {
                                context.read<SettingsCubit>().toggleDaily(on);
                                if (on) {
                                  final granted = await NotificationService().requestPermission();
                                  if (granted && context.mounted) {
                                    await NotificationService().scheduleDaily(context);
                                  }
                                } else {
                                  await NotificationService().cancelDaily();
                                }
                              },
                            ),
                            SwitchListTile(
                              value: m.remindWeeklyOn,
                              title: Text(l10n.remindWeeklyPuzzle),
                              onChanged: (on) async {
                                context.read<SettingsCubit>().toggleWeekly(on);
                                if (on) {
                                  final granted = await NotificationService().requestPermission();
                                  if (granted && context.mounted) {
                                    await NotificationService().scheduleWeekly(context);
                                  }
                                } else {
                                  await NotificationService().cancelWeekly();
                                }
                              },
                            ),
                          ],
                        ),
                      ),

                      const SizedBox(height: 12),

                      _Section(
                        title: l10n.adminModeTitle,
                        child: BlocBuilder<AdminModeCubit, bool>(
                          builder: (context, isAdmin) {
                            return SwitchListTile.adaptive(
                              title: Text(l10n.adminModeTitle),
                              subtitle: Text(l10n.adminModeDesc),
                              value: isAdmin,
                              onChanged: (v) => context.read<AdminModeCubit>().set(v),
                            );
                          },
                        ),
                      ),

                      const SizedBox(height: 12),

                      _Section(
                        title: 'Bulmaca Kaynağı',
                        child: Column(
                          children: [
                            RadioListTile<String>(
                              title: const Text('Yerel (Assets)'),
                              subtitle: const Text('Sadece uygulama içi dosyalar'),
                              value: 'local',
                              groupValue: m.puzzleSource,
                              onChanged: (value) {
                                if (value != null) {
                                  context.read<SettingsCubit>().setPuzzleSource(value);
                                }
                              },
                            ),
                            RadioListTile<String>(
                              title: const Text('GitHub'),
                              subtitle: const Text('GitHub\'dan otomatik indirme'),
                              value: 'github',
                              groupValue: m.puzzleSource,
                              onChanged: (value) {
                                if (value != null) {
                                  context.read<SettingsCubit>().setPuzzleSource(value);
                                }
                              },
                            ),
                            RadioListTile<String>(
                              title: const Text('Uzak Sunucu'),
                              subtitle: const Text('Uzak CDN\'den indirme'),
                              value: 'remote',
                              groupValue: m.puzzleSource,
                              onChanged: (value) {
                                if (value != null) {
                                  context.read<SettingsCubit>().setPuzzleSource(value);
                                }
                              },
                            ),
                            RadioListTile<String>(
                              title: const Text('Otomatik'),
                              subtitle: const Text('GitHub → Uzak → Yerel (önerilen)'),
                              value: 'hybrid',
                              groupValue: m.puzzleSource,
                              onChanged: (value) {
                                if (value != null) {
                                  context.read<SettingsCubit>().setPuzzleSource(value);
                                }
                              },
                            ),
                          ],
                        ),
                      ),

                      const SizedBox(height: 12),

                      _Section(
                        title: l10n.language,
                        child: Row(
                          children: [
                            Expanded(
                              child: DropdownButton<Locale>(
                                value: _selectedLocale,
                                items: [
                                  DropdownMenuItem(
                                    value: const Locale('tr'),
                                    child: Text('Türkçe'),
                                  ),
                                  DropdownMenuItem(
                                    value: const Locale('en'),
                                    child: Text('English'),
                                  ),
                                ],
                                onChanged: (locale) {
                                  if (locale == null) return;
                                  setState(() {
                                    _selectedLocale = locale;
                                  });
                                },
                              ),
                            ),
                            const SizedBox(width: 12),
                            ElevatedButton(
                              onPressed: _selectedLocale != currentLocale ? () {
                                context.read<SettingsCubit>().setLocale(_selectedLocale!);
                              } : null,
                              child: Text(l10n.apply),
                            ),
                          ],
                        ),
                      ),

                      const SizedBox(height: 12),

                      _Section(
                        title: l10n.resetProgress,
                        child: Align(
                          alignment: Alignment.centerLeft,
                          child: ElevatedButton(
                            style: ElevatedButton.styleFrom(backgroundColor: Colors.red),
                            onPressed: () async {
                              final ok = await showDialog<bool>(
                                context: context,
                                builder: (context) {
                                  return AlertDialog(
                                    title: Text('Onay'),
                                    content: Text('Tüm yerel veriler silinsin mi? (Geri alınamaz)'),
                                    actions: [
                                      TextButton(onPressed: () => Navigator.pop(context, false), child: Text(l10n.back)),
                                      ElevatedButton(onPressed: () => Navigator.pop(context, true), child: Text('Evet, sil')),
                                    ],
                                  );
                                },
                              );
                              if (ok == true) {
                                await SettingsRepository().reset();
                                await context.read<LevelProgressCubit>().resetAllProgress();
                                await context.read<GameStatsCubit>().resetStats();
                                await context.read<InventoryCubit>().reset();
                                await context.read<StoreCubit>().resetDailyRewards();
                                await NotificationService().cancelDaily();
                                await NotificationService().cancelWeekly();
                                
                                // Evren 2'yi tekrar kilitle
                                await UniverseConfig.lockUniverse(2);
                                print('=== UNIVERSE 2 LOCKED AFTER RESET ===');
                                
                                if (context.mounted) {
                                  ScaffoldMessenger.of(context).showSnackBar(
                                    SnackBar(content: Text('Veriler sıfırlandı.')),
                                  );
                                }
                                context.read<SettingsCubit>().init();
                              }
                            },
                            child: Text(l10n.resetProgress),
                          ),
                        ),
                      ),
                    ],
                  ),
                ),
        );
      },
    );
  }
}

class _Section extends StatelessWidget {
  final String title;
  final Widget child;
  const _Section({required this.title, required this.child});
  @override
  Widget build(BuildContext context) {
    final theme = Theme.of(context);
    return Card(
      color: theme.cardColor.withOpacity(0.9),
      child: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(title, style: theme.textTheme.titleMedium),
            const SizedBox(height: 12),
            child,
          ],
        ),
      ),
    );
  }
}


\n\n===== FILE 111/160: lib/screens/splash_screen.dart =====\nimport 'package:flutter/material.dart';
import 'package:auto_route/auto_route.dart';
import 'package:animated_text_kit/animated_text_kit.dart';
import '../routes/app_router.dart';
import '../services/user_progress_service.dart';
import '../services/image_cache_service.dart';
import '../audio/audio_gateway.dart';
import '../widgets/sikkoku_loading.dart';

@RoutePage()
class SplashScreen extends StatefulWidget {
  const SplashScreen({Key? key}) : super(key: key);

  @override
  _SplashScreenState createState() => _SplashScreenState();
}

class _SplashScreenState extends State<SplashScreen> {
  bool _isLoading = true;
  String _loadingStatus = 'Başlatılıyor...';

  @override
  void initState() {
    super.initState();
    _loadAssetsAndNavigate();
  }

  Future<void> _loadAssetsAndNavigate() async {
    try {
      // Progress verilerini yükle
      setState(() {
        _loadingStatus = 'İlerleme verileri yükleniyor...';
      });
      await Future.delayed(const Duration(seconds: 1));
      await UserProgressService.loadProgress();

      // Tüm önemli asset'leri precache et
      setState(() {
        _loadingStatus = 'Görseller yükleniyor...';
      });
      await Future.delayed(const Duration(seconds: 1));
      await _precacheAssets();
      
      // Ses dosyalarını yükle
      setState(() {
        _loadingStatus = 'Ses dosyaları yükleniyor...';
      });
      await Future.delayed(const Duration(seconds: 1));
      await _precacheAudioAssets();
      
      // Puzzle verilerini yükle
      setState(() {
        _loadingStatus = 'Oyun verileri hazırlanıyor...';
      });
      await Future.delayed(const Duration(seconds: 1));
      await _preloadPuzzleData();
      
      // Ekstra verileri yükle
      setState(() {
        _loadingStatus = 'Ekstra veriler yükleniyor...';
      });
      await Future.delayed(const Duration(seconds: 1));
      await _preloadExtraData();
      
      // Sistem hazırlığı
      setState(() {
        _loadingStatus = 'Sistem hazırlanıyor...';
      });
      await Future.delayed(const Duration(seconds: 1));
      await _initializeSystem();
      
      setState(() {
        _loadingStatus = 'Tamamlandı!';
      });
      await Future.delayed(const Duration(seconds: 1));
      
      if (mounted) {
        setState(() {
          _isLoading = false;
        });
        await Future.delayed(const Duration(milliseconds: 500));
        context.router.replace(MapRoute());
      }
    } catch (e) {
      print('Asset yükleme hatası: $e');
      setState(() {
        _loadingStatus = 'Hata oluştu, devam ediliyor...';
      });
      await Future.delayed(const Duration(seconds: 1));
      // Hata durumunda da devam et
      if (mounted) {
        setState(() {
          _isLoading = false;
        });
        await Future.delayed(const Duration(milliseconds: 500));
        context.router.replace(MapRoute());
      }
    }
  }

  Future<void> _precacheAssets() async {
    final List<String> imageAssets = [
      'assets/images/logo2.png',
      'assets/images/background-stage1.png',
      'assets/images/background-stage12.png',
      'assets/images/daily_button.png',
      'assets/images/market_button.png',
      'assets/images/profil_button.png',
      'assets/images/settings_button.png',
      'assets/images/weekly_button.png',
      'assets/images/weekly_butto1n.png',
      'assets/images/weekly_butto22n.png',
      'assets/images/earth.png',
      'assets/images/sunny.png',
      'assets/avatar/avatar1.png',
      'assets/avatar/avatar2.png',
      'assets/avatar/avatar3.png',
      'assets/avatar/avatar4.png',
      'assets/avatar/avatar5.png',
    ];

    // Tüm resimleri paralel olarak yükle
    await Future.wait(
      imageAssets.map((asset) => precacheImage(AssetImage(asset), context))
    );

    // Hint PNG'lerini özel olarak yükle (ui.Image formatında)
    await ImageCacheService().loadHintImages();
  }

  Future<void> _precacheAudioAssets() async {
    // Ses dosyalarını yükle (gerçek yükleme işlemi)
    try {
      // AudioGateway'i başlat
      final audioGateway = AudioGateway();
      
      // Ses dosyalarını önceden yükle - AssetBundle ile
      await DefaultAssetBundle.of(context).load('assets/audio/background_music_1.mp3');
      await DefaultAssetBundle.of(context).load('assets/audio/background_music_2.mp3');
      
      // AudioGateway'i hazırla
      await audioGateway.startBackgroundMusic();
    } catch (e) {
      print('Ses dosyası yükleme hatası: $e');
    }
  }

  Future<void> _preloadPuzzleData() async {
    // İlk 10 puzzle'ı önceden yükle
    try {
      for (int i = 1; i <= 10; i++) {
        await _loadPuzzleData(i);
      }
    } catch (e) {
      print('Puzzle verisi yükleme hatası: $e');
    }
  }

  Future<void> _loadPuzzleData(int level) async {
    // Puzzle verilerini yükle - Evren 1 için
    try {
      final String assetPath = 'assets/data/stage1/level_$level.json';
      await DefaultAssetBundle.of(context).loadString(assetPath);
    } catch (e) {
      print('Level $level yükleme hatası: $e');
    }
  }

  Future<void> _preloadExtraData() async {
    // Daily ve Weekly puzzle'ları yükle
    try {
      // Daily puzzle
      await DefaultAssetBundle.of(context).loadString('assets/daily/puzzle_2025-08-09.json');
      
      // Weekly puzzle
      await DefaultAssetBundle.of(context).loadString('assets/weekly/puzzle_2025-08-04.json');
      
      // Ekstra puzzle'ları da yükle (11-20 arası)
      for (int i = 11; i <= 20; i++) {
        await _loadPuzzleData(i);
      }
    } catch (e) {
      print('Ekstra veri yükleme hatası: $e');
    }
  }

  Future<void> _initializeSystem() async {
    // Sistem başlatma işlemleri
    try {
      // SharedPreferences'ı başlat
      await Future.delayed(const Duration(milliseconds: 500));
      
      // Cache temizleme ve optimizasyon
      await Future.delayed(const Duration(milliseconds: 300));
      
      // Sistem hazırlığı
      await Future.delayed(const Duration(milliseconds: 200));
    } catch (e) {
      print('Sistem başlatma hatası: $e');
    }
  }

  @override
  Widget build(BuildContext context) {
    final screenHeight = MediaQuery.of(context).size.height;
    final screenWidth = MediaQuery.of(context).size.width;
    
    return Scaffold(
      backgroundColor: const Color(0xFF0F0F12), // Siyah arka plan
      body: Stack(
        children: [
          // Ana içerik - başlık ve loading widget
          Center(
            child: Column(
              children: [
                // Boşluk - üstte
                SizedBox(height: screenHeight * 0.25),
                
                // Sikoku Tango Puzzle başlığı
                Text(
                  'Sikoku Tango Puzzle',
                  textAlign: TextAlign.center,
                  style: TextStyle(
                    color: Colors.cyanAccent.shade100,
                    fontSize: screenWidth * 0.06,
                    fontWeight: FontWeight.bold,
                    letterSpacing: 2,
                    shadows: [
                      Shadow(
                        color: Colors.cyanAccent.withOpacity(0.7),
                        blurRadius: 10,
                        offset: const Offset(0, 0),
                      ),
                    ],
                  ),
                ),
                SizedBox(height: screenHeight * 0.05),
                // Loading widget - orta boyut
                SikkokuLoading(size: 240),
                
                // Yükleme yazısı - animasyon ile arası açık
                if (_isLoading)
                  Padding(
                    padding: EdgeInsets.only(top: screenHeight * 0.05),
                    child: Text(
                      _loadingStatus,
                      textAlign: TextAlign.center,
                      style: TextStyle(
                        color: Colors.cyanAccent.shade100,
                        fontSize: screenWidth * 0.035,
                        fontWeight: FontWeight.w600,
                        letterSpacing: 1.0,
                      ),
                    ),
                  ),
              ],
            ),
          ),
        ],
      ),
    );
  }
} \n\n===== FILE 112/160: lib/screens/store_screen.dart =====\nimport 'package:flutter/material.dart';
import 'package:auto_route/auto_route.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:google_fonts/google_fonts.dart';

import '../store/store_cubit.dart';
import '../store/store_model.dart';
import '../inventory/inventory_cubit.dart';
import '../inventory/inventory_state.dart';
import '../theme/app_themes.dart';
import '../l10n/app_localizations.dart';

@RoutePage()
class StoreScreen extends StatefulWidget {
  const StoreScreen({Key? key}) : super(key: key);

  @override
  State<StoreScreen> createState() => _StoreScreenState();
}

class _StoreScreenState extends State<StoreScreen> {
  @override
  Widget build(BuildContext context) {
    final pal = Theme.of(context).extension<AppPalette>()!;
    final l10n = AppLocalizations.of(context)!;
    
    return BlocProvider(
      create: (context) => StoreCubit(),
      child: Scaffold(
        backgroundColor: pal.puzzleBackground,
        appBar: AppBar(
          backgroundColor: Colors.transparent,
          elevation: 0,
          leading: IconButton(
            icon: Icon(Icons.arrow_back, color: pal.counterTextColor),
            onPressed: () => context.router.pop(),
          ),
          title: Text(
            l10n.market,
            style: TextStyle(
              color: pal.counterTextColor,
              fontSize: 24,
              fontWeight: FontWeight.bold,
            ),
          ),
          centerTitle: true,
        ),
        body: BlocBuilder<StoreCubit, StoreModel>(
          builder: (context, state) {
            if (state.isLoading) {
              return Center(
                child: CircularProgressIndicator(
                  color: pal.counterTextColor,
                ),
              );
            }

            if (state.error != null) {
              return Center(
                child: Column(
                  mainAxisAlignment: MainAxisAlignment.center,
                  children: [
                    Icon(
                      Icons.error_outline,
                      color: Colors.red,
                      size: 64,
                    ),
                    SizedBox(height: 16),
                    Text(
                      state.error!,
                      style: TextStyle(
                        color: pal.counterTextColor,
                        fontSize: 16,
                      ),
                      textAlign: TextAlign.center,
                    ),
                    SizedBox(height: 16),
                    ElevatedButton(
                      onPressed: () {
                        // StoreCubit'i yeniden oluştur
                        context.read<StoreCubit>();
                      },
                      child: Text(l10n.back),
                    ),
                  ],
                ),
              );
            }

            return SingleChildScrollView(
              padding: EdgeInsets.all(16),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  // Günlük Reklam Ödülü
                  if (state.todayReward != null) ...[
                    _buildDailyRewardCard(context, state.todayReward!, pal, l10n),
                    SizedBox(height: 24),
                  ],

                  // Envanter Durumu
                  _buildInventoryStatus(context, pal, l10n),
                  SizedBox(height: 24),

                  // Paketler
                  _buildSectionTitle(l10n.packages, pal),
                  SizedBox(height: 12),
                  _buildPackagesGrid(context, state.items.where((item) => item.isPackage).toList(), pal, l10n),
                  SizedBox(height: 24),

                  // İpucu
                  _buildSectionTitle(l10n.hint, pal),
                  SizedBox(height: 12),
                  _buildItemsGrid(context, state.items.where((item) => item.type == 'hint' && !item.isPackage).toList(), pal, l10n),
                  SizedBox(height: 24),

                  // Geri Al
                  _buildSectionTitle(l10n.undo, pal),
                  SizedBox(height: 12),
                  _buildItemsGrid(context, state.items.where((item) => item.type == 'undo' && !item.isPackage).toList(), pal, l10n),
                  SizedBox(height: 24),

                  // Kontrol
                  _buildSectionTitle(l10n.control, pal),
                  SizedBox(height: 12),
                  _buildItemsGrid(context, state.items.where((item) => item.type == 'check' && !item.isPackage).toList(), pal, l10n),
                  SizedBox(height: 24),

                ],
              ),
            );
          },
        ),
      ),
    );
  }

  String _getTypeName(String type, AppLocalizations l10n) {
    switch (type) {
      case 'hint': return l10n.hint;
      case 'undo': return l10n.undo;
      case 'check': return l10n.control;
      default: return l10n.dailyReward;
    }
  }

  String _getPackageName(String packageName, AppLocalizations l10n) {
    switch (packageName) {
      case 'Başlangıç Paketi': return '${l10n.package} 1';
      case 'Premium Paket': return '${l10n.package} 2';
      case 'Mega Paket': return '${l10n.package} 3';
      default: return packageName;
    }
  }

  String _getPackageDescription(String packageName, AppLocalizations l10n) {
    switch (packageName) {
      case 'Başlangıç Paketi': return '2 ${l10n.hint} + 2 ${l10n.undo} + 2 ${l10n.control}';
      case 'Premium Paket': return '5 ${l10n.hint} + 5 ${l10n.undo} + 5 ${l10n.control}';
      case 'Mega Paket': return '10 ${l10n.hint} + 10 ${l10n.undo} + 10 ${l10n.control}';
      default: return packageName;
    }
  }

  Widget _buildDailyRewardCard(BuildContext context, DailyReward reward, AppPalette pal, AppLocalizations l10n) {
    return Container(
      width: double.infinity,
      padding: EdgeInsets.all(20),
      decoration: BoxDecoration(
        gradient: LinearGradient(
          colors: [Colors.amber.shade400, Colors.orange.shade600],
          begin: Alignment.topLeft,
          end: Alignment.bottomRight,
        ),
        borderRadius: BorderRadius.circular(16),
        boxShadow: [
          BoxShadow(
            color: Colors.amber.withOpacity(0.3),
            blurRadius: 12,
            spreadRadius: 2,
          ),
        ],
      ),
      child: Column(
        children: [
          Row(
            children: [
              Icon(
                Icons.card_giftcard,
                color: Colors.white,
                size: 32,
              ),
              SizedBox(width: 12),
              Expanded(
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Text(
                      l10n.dailyReward,
                      style: GoogleFonts.poppins(
                        color: Colors.white,
                        fontSize: 18,
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                    if (reward.reward != null && !reward.isClaimed)
                      Text(
                        '${reward.reward!.quantity} ${_getTypeName(reward.reward!.type, l10n)} ${l10n.rewardClaimed}!',
                        style: GoogleFonts.poppins(
                          color: Colors.white70,
                          fontSize: 14,
                        ),
                      ),
                  ],
                ),
              ),
            ],
          ),
          SizedBox(height: 16),
          if (reward.isClaimed)
            Container(
              padding: EdgeInsets.symmetric(horizontal: 16, vertical: 8),
              decoration: BoxDecoration(
                color: Colors.white.withOpacity(0.2),
                borderRadius: BorderRadius.circular(20),
              ),
              child: Text(
                'Bugün alındı ✓',
                style: GoogleFonts.poppins(
                  color: Colors.white,
                  fontSize: 14,
                  fontWeight: FontWeight.w500,
                ),
              ),
            )
          else
            ElevatedButton.icon(
              onPressed: () => context.read<StoreCubit>().claimDailyReward(context),
              icon: Icon(Icons.play_arrow, color: Colors.amber),
              label: Text(
                l10n.watchAd,
                style: GoogleFonts.poppins(
                  color: Colors.amber,
                  fontSize: 16,
                  fontWeight: FontWeight.bold,
                ),
              ),
              style: ElevatedButton.styleFrom(
                backgroundColor: Colors.white,
                padding: EdgeInsets.symmetric(horizontal: 24, vertical: 12),
                shape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(20),
                ),
              ),
            ),
        ],
      ),
    );
  }

  Widget _buildInventoryStatus(BuildContext context, AppPalette pal, AppLocalizations l10n) {
    return BlocBuilder<InventoryCubit, InventoryState>(
      builder: (context, inventoryState) {
        final model = inventoryState.model;
        
        return Container(
          padding: EdgeInsets.all(16),
          decoration: BoxDecoration(
            color: Colors.black.withOpacity(0.3),
            borderRadius: BorderRadius.circular(12),
            border: Border.all(
              color: pal.counterTextColor.withOpacity(0.3),
              width: 1,
            ),
          ),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Text(
                l10n.inventory,
                style: GoogleFonts.poppins(
                  color: pal.counterTextColor,
                  fontSize: 16,
                  fontWeight: FontWeight.bold,
                ),
              ),
              SizedBox(height: 12),
              Row(
                mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                children: [
                  Expanded(
                    child: _buildInventoryItem(Icons.lightbulb, l10n.hint, '${model.hintCount}', Colors.amber),
                  ),
                  Expanded(
                    child: _buildInventoryItem(Icons.undo, l10n.undo, '${model.undoCount}', Colors.blue),
                  ),
                  Expanded(
                    child: _buildInventoryItem(Icons.check_circle, l10n.control, '${model.checkCount}', Colors.teal),
                  ),
                ],
              ),
            ],
          ),
        );
      },
    );
  }

  Widget _buildInventoryItem(IconData icon, String label, String count, Color color) {
    return Column(
      mainAxisSize: MainAxisSize.min,
      children: [
        Container(
          padding: EdgeInsets.all(6),
          decoration: BoxDecoration(
            color: color.withOpacity(0.2),
            borderRadius: BorderRadius.circular(8),
          ),
          child: Icon(
            icon,
            color: color,
            size: 16,
          ),
        ),
        SizedBox(height: 2),
        Text(
          label,
          style: TextStyle(
            color: Colors.white70,
            fontSize: 8,
          ),
          textAlign: TextAlign.center,
        ),
        Text(
          count,
          style: TextStyle(
            color: Colors.white,
            fontSize: 12,
            fontWeight: FontWeight.bold,
          ),
        ),
      ],
    );
  }

  Widget _buildSectionTitle(String title, AppPalette pal) {
    return Text(
      title,
      style: GoogleFonts.poppins(
        color: pal.counterTextColor,
        fontSize: 20,
        fontWeight: FontWeight.bold,
      ),
    );
  }

  Widget _buildPackagesGrid(BuildContext context, List<StoreItem> packages, AppPalette pal, AppLocalizations l10n) {
    return Column(
      children: packages.map((package) => Padding(
        padding: EdgeInsets.only(bottom: 12),
        child: _buildPackageCard(context, package, pal, l10n),
      )).toList(),
    );
  }

  Widget _buildPackageCard(BuildContext context, StoreItem package, AppPalette pal, AppLocalizations l10n) {
    final screenHeight = MediaQuery.of(context).size.height;
    final cardHeight = screenHeight * 0.12; // Ekran yüksekliğinin %12'si
    
    return Container(
      height: cardHeight.clamp(80.0, 120.0), // Min 80, max 120
      padding: EdgeInsets.all(screenHeight * 0.015), // Ekran yüksekliğinin %1.5'i
      decoration: BoxDecoration(
        gradient: LinearGradient(
          colors: [Colors.purple.shade600, Colors.purple.shade800],
          begin: Alignment.topLeft,
          end: Alignment.bottomRight,
        ),
        borderRadius: BorderRadius.circular(12),
        boxShadow: [
          BoxShadow(
            color: Colors.purple.withOpacity(0.3),
            blurRadius: 8,
            spreadRadius: 1,
          ),
        ],
      ),
      child: Row(
        children: [
          Container(
            padding: EdgeInsets.all(8),
            decoration: BoxDecoration(
              color: Colors.white.withOpacity(0.2),
              borderRadius: BorderRadius.circular(8),
            ),
            child: Icon(
              Icons.card_giftcard,
              color: Colors.white,
              size: 24,
            ),
          ),
          SizedBox(width: 12),
          Expanded(
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              mainAxisAlignment: MainAxisAlignment.center,
              children: [
        Text(
          _getPackageName(package.name, l10n),
          style: GoogleFonts.poppins(
            color: Colors.white,
            fontSize: screenHeight * 0.018, // Ekran yüksekliğinin %1.8'i
            fontWeight: FontWeight.bold,
          ),
        ),
                SizedBox(height: 2),
                Text(
                  _getPackageDescription(package.name, l10n),
                  style: GoogleFonts.poppins(
                    color: Colors.white70,
                    fontSize: screenHeight * 0.013, // Ekran yüksekliğinin %1.3'ü
                  ),
                  maxLines: 2,
                  overflow: TextOverflow.ellipsis,
                ),
              ],
            ),
          ),
          Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              Text(
                '₺${package.price}',
                style: GoogleFonts.poppins(
                  color: Colors.amber,
                  fontSize: screenHeight * 0.02, // Ekran yüksekliğinin %2'si
                  fontWeight: FontWeight.bold,
                ),
              ),
              SizedBox(height: 6),
              ElevatedButton(
                onPressed: () => context.read<StoreCubit>().purchaseItem(package, context),
                style: ElevatedButton.styleFrom(
                  backgroundColor: Colors.amber,
                  foregroundColor: Colors.purple,
                  padding: EdgeInsets.symmetric(horizontal: 12, vertical: 6),
                  shape: RoundedRectangleBorder(
                    borderRadius: BorderRadius.circular(16),
                  ),
                  minimumSize: Size(0, screenHeight * 0.035), // Ekran yüksekliğinin %3.5'i
                ),
                child: Text(
                  l10n.buy,
                  style: GoogleFonts.poppins(
                    fontSize: screenHeight * 0.013, // Ekran yüksekliğinin %1.3'ü
                    fontWeight: FontWeight.bold,
                  ),
                ),
              ),
            ],
          ),
        ],
      ),
    );
  }

  Widget _buildItemsGrid(BuildContext context, List<StoreItem> items, AppPalette pal, AppLocalizations l10n) {
    final screenHeight = MediaQuery.of(context).size.height;
    final cardHeight = screenHeight * 0.15; // Ekran yüksekliğinin %15'i
    
    return Wrap(
      spacing: 12,
      runSpacing: 12,
      children: items.map((item) => SizedBox(
        width: (MediaQuery.of(context).size.width - 56) / 2, // 16*2 padding + 12 spacing
        height: cardHeight.clamp(100.0, 140.0), // Min 100, max 140
        child: _buildItemCard(context, item, pal, l10n),
      )).toList(),
    );
  }

  Widget _buildItemCard(BuildContext context, StoreItem item, AppPalette pal, AppLocalizations l10n) {
    final color = _getTypeColor(item.type);
    final screenHeight = MediaQuery.of(context).size.height;
    
    return Container(
      padding: EdgeInsets.all(screenHeight * 0.01), // Ekran yüksekliğinin %1'i
      decoration: BoxDecoration(
        color: color.withOpacity(0.1),
        borderRadius: BorderRadius.circular(12),
        border: Border.all(
          color: color.withOpacity(0.3),
          width: 1,
        ),
      ),
      child: Column(
        mainAxisAlignment: MainAxisAlignment.spaceBetween,
        children: [
          Text(
            item.icon ?? '🎁',
            style: TextStyle(fontSize: screenHeight * 0.03), // Ekran yüksekliğinin %3'ü
          ),
          Text(
            item.name,
            style: GoogleFonts.poppins(
              color: pal.counterTextColor,
              fontSize: screenHeight * 0.014, // Ekran yüksekliğinin %1.4'ü
              fontWeight: FontWeight.bold,
            ),
            textAlign: TextAlign.center,
            maxLines: 2,
            overflow: TextOverflow.ellipsis,
          ),
          Text(
            '₺${item.price}',
            style: GoogleFonts.poppins(
              color: color,
              fontSize: screenHeight * 0.016, // Ekran yüksekliğinin %1.6'sı
              fontWeight: FontWeight.bold,
            ),
          ),
          ElevatedButton(
            onPressed: () => context.read<StoreCubit>().purchaseItem(item, context),
            style: ElevatedButton.styleFrom(
              backgroundColor: color,
              foregroundColor: Colors.white,
              padding: EdgeInsets.symmetric(horizontal: 8, vertical: 4),
              shape: RoundedRectangleBorder(
                borderRadius: BorderRadius.circular(8),
              ),
              minimumSize: Size(0, screenHeight * 0.035), // Ekran yüksekliğinin %3.5'i
            ),
            child: Text(
              l10n.buy,
              style: GoogleFonts.poppins(
                fontSize: screenHeight * 0.013, // Ekran yüksekliğinin %1.3'ü
                fontWeight: FontWeight.bold,
              ),
            ),
          ),
        ],
      ),
    );
  }

  Color _getTypeColor(String type) {
    switch (type) {
      case 'hint': return Colors.amber;
      case 'undo': return Colors.blue;
      case 'check': return Colors.teal;
      default: return Colors.grey;
    }
  }

}
\n\n===== FILE 113/160: lib/services/daily_puzzle_selection.dart =====\nclass DailyPuzzleSelection {
  static DateTime? _selected;

  static void set(DateTime date) {
    _selected = DateTime(date.year, date.month, date.day);
  }

  static DateTime? consume() {
    final val = _selected;
    _selected = null;
    return val;
  }
}


\n\n===== FILE 114/160: lib/services/game_timer_service.dart =====\nimport 'dart:async';
import 'package:flutter/material.dart';

class GameTimerService {
  Timer? _timer;
  int elapsedSeconds = 0;
  bool isTimerRunning = false;
  bool isPuzzleCompleted = false;
  
  // Timer durumunu dinlemek için callback
  final Function(int)? onTimeUpdate;
  final Function()? onTimerStart;
  final Function()? onTimerStop;

  GameTimerService({
    this.onTimeUpdate,
    this.onTimerStart,
    this.onTimerStop,
  });

  void startTimer() {
    if (!isTimerRunning && !isPuzzleCompleted) {
      isTimerRunning = true;
      onTimerStart?.call();
      
      _timer = Timer.periodic(Duration(seconds: 1), (timer) {
        elapsedSeconds++;
        onTimeUpdate?.call(elapsedSeconds);
      });
    }
  }

  void stopTimer() {
    _timer?.cancel();
    isTimerRunning = false;
    onTimerStop?.call();
  }

  void resetTimer() {
    stopTimer();
    elapsedSeconds = 0;
  }

  void setPuzzleCompleted(bool completed) {
    isPuzzleCompleted = completed;
    if (completed) {
      stopTimer();
    }
  }


  String formatTime(int seconds) {
    int minutes = seconds ~/ 60;
    int remainingSeconds = seconds % 60;
    return '${minutes.toString().padLeft(2, '0')}:${remainingSeconds.toString().padLeft(2, '0')}';
  }

  int get currentTime => elapsedSeconds;
  bool get isRunning => isTimerRunning;

  void dispose() {
    _timer?.cancel();
  }
} \n\n===== FILE 115/160: lib/services/github_puzzle_provider.dart =====\nimport 'dart:convert';
import 'dart:io';
import 'package:http/http.dart' as http;
import 'package:path_provider/path_provider.dart';
import '../config/github_puzzle_config.dart';

class GitHubPuzzleProvider {
  final http.Client _client;
  
  GitHubPuzzleProvider({http.Client? client}) : _client = client ?? http.Client();

  String _fmt(DateTime d) =>
      '${d.year.toString().padLeft(4,'0')}-${d.month.toString().padLeft(2,'0')}-${d.day.toString().padLeft(2,'0')}';

  Future<File> _cacheFile(String subDir, String name) async {
    final dir = await getApplicationDocumentsDirectory();
    final d = Directory('${dir.path}/github_cache/$subDir');
    if (!await d.exists()) await d.create(recursive: true);
    return File('${d.path}/$name');
  }

  Future<File> _etagFile(String subDir, String name) async {
    final dir = await getApplicationDocumentsDirectory();
    final d = Directory('${dir.path}/github_cache/$subDir');
    if (!await d.exists()) await d.create(recursive: true);
    return File('${d.path}/$name.etag');
  }

  Future<File> _timestampFile(String subDir, String name) async {
    final dir = await getApplicationDocumentsDirectory();
    final d = Directory('${dir.path}/github_cache/$subDir');
    if (!await d.exists()) await d.create(recursive: true);
    return File('${d.path}/$name.timestamp');
  }

  Future<String?> _getWithETag({
    required Uri url,
    required File cache,
    required File etagFile,
    required File timestampFile,
    required Duration ttl,
  }) async {
    // Önce cache kontrolü (TTL)
    if (await cache.exists() && await timestampFile.exists()) {
      final timestamp = await timestampFile.readAsString();
      final lastSuccess = DateTime.tryParse(timestamp);
      if (lastSuccess != null) {
        final age = DateTime.now().difference(lastSuccess);
        if (age <= ttl) {
          return await cache.readAsString();
        }
      }
    }

    // ETag varsa If-None-Match header'ı ekle
    String? etag;
    if (await etagFile.exists()) {
      etag = await etagFile.readAsString();
    }

    try {
      final headers = <String, String>{};
      if (etag != null) {
        headers['If-None-Match'] = etag;
      }

      final response = await _client
          .get(url, headers: headers)
          .timeout(Duration(seconds: GitHubPuzzleConfig.connectTimeoutSec + GitHubPuzzleConfig.readTimeoutSec));

      if (response.statusCode == 200) {
        // Yeni içerik geldi, cache'e yaz
        await cache.writeAsString(response.body);
        await timestampFile.writeAsString(DateTime.now().toIso8601String());
        
        // ETag'i kaydet
        final responseETag = response.headers['etag'];
        if (responseETag != null) {
          await etagFile.writeAsString(responseETag);
        }
        
        return response.body;
      } else if (response.statusCode == 304) {
        // Değişiklik yok, cache'den oku
        if (await cache.exists()) {
          return await cache.readAsString();
        }
      } else if (response.statusCode == 404) {
        // Dosya bulunamadı
        return null;
      }
    } catch (e) {
      // Hata durumunda cache'den oku
      if (await cache.exists()) {
        return await cache.readAsString();
      }
    }

    return null;
  }

  Future<String?> fetchDaily(DateTime dateLocal) async {
    final name = 'puzzle_${_fmt(dateLocal)}.json';
    final url = Uri.parse(
      'https://raw.githubusercontent.com/${GitHubPuzzleConfig.owner}/${GitHubPuzzleConfig.repo}/${GitHubPuzzleConfig.branch}/${GitHubPuzzleConfig.dailyDir}/$name',
    );
    
    final cache = await _cacheFile('daily', name);
    final etagFile = await _etagFile('daily', name);
    final timestampFile = await _timestampFile('daily', name);
    
    return _getWithETag(
      url: url,
      cache: cache,
      etagFile: etagFile,
      timestampFile: timestampFile,
      ttl: Duration(hours: GitHubPuzzleConfig.dailyTtlHours),
    );
  }

  Future<String?> fetchWeekly(DateTime dateLocal) async {
    // Pazartesi'yi hesapla
    final monday = dateLocal.subtract(Duration(days: (dateLocal.weekday + 6) % 7));
    final name = 'puzzle_${_fmt(monday)}.json';
    final url = Uri.parse(
      'https://raw.githubusercontent.com/${GitHubPuzzleConfig.owner}/${GitHubPuzzleConfig.repo}/${GitHubPuzzleConfig.branch}/${GitHubPuzzleConfig.weeklyDir}/$name',
    );
    
    final cache = await _cacheFile('weekly', name);
    final etagFile = await _etagFile('weekly', name);
    final timestampFile = await _timestampFile('weekly', name);
    
    return _getWithETag(
      url: url,
      cache: cache,
      etagFile: etagFile,
      timestampFile: timestampFile,
      ttl: Duration(days: GitHubPuzzleConfig.weeklyTtlDays),
    );
  }

  // Cache'i temizle
  Future<void> clearCache() async {
    try {
      final dir = await getApplicationDocumentsDirectory();
      final cacheDir = Directory('${dir.path}/github_cache');
      if (await cacheDir.exists()) {
        await cacheDir.delete(recursive: true);
      }
    } catch (e) {
      print('Cache temizleme hatası: $e');
    }
  }

  void dispose() {
    _client.close();
  }
}
\n\n===== FILE 116/160: lib/services/haptic_service.dart =====\nimport 'package:flutter/services.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
import 'dart:async';
import 'dart:io';
import '../l10n/app_localizations.dart';

class HapticService {
  static final HapticService _instance = HapticService._internal();
  factory HapticService() => _instance;
  HapticService._internal();

  DateTime? _lastVibrationTime;
  static const Duration _throttleDuration = Duration(milliseconds: 200); // Throttle süresini azalttık
  static const Duration _strongThrottleDuration = Duration(milliseconds: 100); // Güçlü titreşimler için daha kısa throttle

  /// Platform kontrolü
  bool get _isMobilePlatform {
    if (kIsWeb) return false;
    return Platform.isAndroid || Platform.isIOS;
  }

  /// Debug modu - console'da titreşim bilgilerini göster
  bool _debugMode = true;

  /// Titreşim tetikle (platforma göre davranış)
  Future<void> vibrate({
    bool force = false,
    String event = 'vibration',
    BuildContext? context,
  }) async {
    final now = DateTime.now();
    
    // Throttle kontrolü (force true ise atla)
    if (!force && _lastVibrationTime != null) {
      final timeSinceLastVibration = now.difference(_lastVibrationTime!);
      if (timeSinceLastVibration < _throttleDuration) {
        if (_debugMode) print('🔇 Vibration throttled: $event (${timeSinceLastVibration.inMilliseconds}ms)');
        return; // Throttle - titreşim verme
      }
    }

    _lastVibrationTime = now;

    if (_debugMode) {
      print('📳 Triggering vibration: $event (Platform: ${_isMobilePlatform ? 'Mobile' : 'Desktop'})');
    }

    if (_isMobilePlatform) {
      // Android/iOS: Gerçek titreşim
      try {
        await HapticFeedback.lightImpact();
        if (_debugMode) print('✅ Light impact vibration sent');
      } catch (e) {
        print('❌ Haptic feedback error: $e');
      }
    } else {
      // Windows/macOS/Web/Emülatör: Görsel geri bildirim
      _showVisualFeedback(event, context);
      _logVibration(event);
    }
  }

  /// Güçlü titreşim (win durumu için)
  Future<void> vibrateStrong({
    bool force = false,
    String event = 'strong vibration',
    BuildContext? context,
  }) async {
    final now = DateTime.now();
    
    // Throttle kontrolü (güçlü titreşimler için daha kısa throttle)
    if (!force && _lastVibrationTime != null) {
      final timeSinceLastVibration = now.difference(_lastVibrationTime!);
      if (timeSinceLastVibration < _strongThrottleDuration) {
        if (_debugMode) print('🔇 Strong vibration throttled: $event (${timeSinceLastVibration.inMilliseconds}ms)');
        return;
      }
    }

    _lastVibrationTime = now;

    if (_debugMode) {
      print('💥 Triggering strong vibration: $event (Platform: ${_isMobilePlatform ? 'Mobile' : 'Desktop'})');
    }

    if (_isMobilePlatform) {
      // Android/iOS: Gerçek güçlü titreşim
      try {
        await HapticFeedback.mediumImpact();
        if (_debugMode) print('✅ Medium impact vibration sent');
      } catch (e) {
        print('❌ Strong haptic feedback error: $e');
      }
    } else {
      // Windows/macOS/Web/Emülatör: Görsel geri bildirim
      _showVisualFeedback(event, context);
      _logVibration(event);
    }
  }

  /// Görsel geri bildirim (mobil olmayan platformlar için)
  void _showVisualFeedback(String event, BuildContext? context) {
    if (context == null) return;
    
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text(AppLocalizations.of(context)!.vibrationTriggered(event)),
        duration: const Duration(seconds: 1),
        behavior: SnackBarBehavior.floating,
        margin: const EdgeInsets.all(16),
        backgroundColor: Colors.blue.shade600,
        shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(8)),
      ),
    );
  }

  /// Log yazdır (mobil olmayan platformlar için)
  void _logVibration(String event) {
    final timestamp = DateTime.now().toIso8601String();
    print('🔔 vibration: $event @ $timestamp');
  }

  /// Hata durumu için titreşim
  Future<void> vibrateError({
    bool force = false,
    String event = 'error vibration',
    BuildContext? context,
  }) async {
    final now = DateTime.now();
    
    if (!force && _lastVibrationTime != null) {
      final timeSinceLastVibration = now.difference(_lastVibrationTime!);
      if (timeSinceLastVibration < _throttleDuration) {
        if (_debugMode) print('🔇 Error vibration throttled: $event');
        return;
      }
    }

    _lastVibrationTime = now;

    if (_debugMode) {
      print('❌ Triggering error vibration: $event');
    }

    if (_isMobilePlatform) {
      try {
        await HapticFeedback.heavyImpact();
        if (_debugMode) print('✅ Heavy impact vibration sent');
      } catch (e) {
        print('❌ Error haptic feedback error: $e');
      }
    } else {
      _showVisualFeedback('HATA: $event', context);
      _logVibration(event);
    }
  }

  /// Başarı durumu için titreşim
  Future<void> vibrateSuccess({
    bool force = false,
    String event = 'success vibration',
    BuildContext? context,
  }) async {
    final now = DateTime.now();
    
    if (!force && _lastVibrationTime != null) {
      final timeSinceLastVibration = now.difference(_lastVibrationTime!);
      if (timeSinceLastVibration < _throttleDuration) {
        if (_debugMode) print('🔇 Success vibration throttled: $event');
        return;
      }
    }

    _lastVibrationTime = now;

    if (_debugMode) {
      print('🎉 Triggering success vibration: $event');
    }

    if (_isMobilePlatform) {
      try {
        await HapticFeedback.selectionClick();
        if (_debugMode) print('✅ Selection click vibration sent');
      } catch (e) {
        print('❌ Success haptic feedback error: $e');
      }
    } else {
      _showVisualFeedback('BAŞARI: $event', context);
      _logVibration(event);
    }
  }

  /// Test titreşimi - tüm türleri test etmek için
  Future<void> testAllVibrations({BuildContext? context}) async {
    if (_debugMode) {
      print('🧪 Testing all vibration types...');
    }

    await vibrate(event: 'Test - Light', context: context);
    await Future.delayed(Duration(milliseconds: 300));
    
    await vibrateStrong(event: 'Test - Strong', context: context);
    await Future.delayed(Duration(milliseconds: 300));
    
    await vibrateError(event: 'Test - Error', context: context);
    await Future.delayed(Duration(milliseconds: 300));
    
    await vibrateSuccess(event: 'Test - Success', context: context);
    
    if (_debugMode) {
      print('🧪 All vibration tests completed');
    }
  }

  /// Debug modunu aç/kapat
  void setDebugMode(bool enabled) {
    _debugMode = enabled;
    if (_debugMode) {
      print('🔧 HapticService debug mode: ON');
    }
  }

  /// Throttle'ı sıfırla (yeni ekran geçişlerinde)
  void resetThrottle() {
    _lastVibrationTime = null;
    if (_debugMode) {
      print('🔄 Vibration throttle reset');
    }
  }
}
\n\n===== FILE 117/160: lib/services/image_cache_service.dart =====\nimport 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'dart:ui' as ui;

class ImageCacheService {
  static final ImageCacheService _instance = ImageCacheService._internal();
  factory ImageCacheService() => _instance;
  ImageCacheService._internal();

  ui.Image? _equalImage;
  ui.Image? _notEqualImage;
  bool _isLoaded = false;

  ui.Image? get equalImage => _equalImage;
  ui.Image? get notEqualImage => _notEqualImage;
  bool get isLoaded => _isLoaded;

  Future<void> loadHintImages() async {
    if (_isLoaded) return;

    try {
      // Equal image yükle
      final equalCodec = await ui.instantiateImageCodec(
        (await rootBundle.load('assets/images/equal.png')).buffer.asUint8List(),
      );
      final equalFrame = await equalCodec.getNextFrame();
      _equalImage = equalFrame.image;

      // Not equal image yükle
      final notEqualCodec = await ui.instantiateImageCodec(
        (await rootBundle.load('assets/images/notequal.png')).buffer.asUint8List(),
      );
      final notEqualFrame = await notEqualCodec.getNextFrame();
      _notEqualImage = notEqualFrame.image;

      _isLoaded = true;
    } catch (e) {
      print('Error loading hint images: $e');
    }
  }

  void clearCache() {
    _equalImage = null;
    _notEqualImage = null;
    _isLoaded = false;
  }
}
\n\n===== FILE 118/160: lib/services/level_progress_service.dart =====\nimport 'package:shared_preferences/shared_preferences.dart';

class LevelProgressService {
  // Yıldız hesaplama
  static int calculateStars(int completionTimeSeconds) {
    if (completionTimeSeconds <= 30) return 3;
    if (completionTimeSeconds <= 45) return 2;
    return 1;
  }

  // Level yıldızlarını kaydet
  static Future<void> setStars(int level, int stars) async {
    final prefs = await SharedPreferences.getInstance();
    await prefs.setInt('level_${level}_stars', stars);
  }

  // Level yıldızlarını getir
  static Future<int> getStars(int level) async {
    final prefs = await SharedPreferences.getInstance();
    return prefs.getInt('level_${level}_stars') ?? 0;
  }

  // Level kilidini aç
  static Future<void> unlockLevel(int level) async {
    final prefs = await SharedPreferences.getInstance();
    await prefs.setBool('level_${level}_unlocked', true);
  }

  // Level kilit durumunu getir
  static Future<bool> isLevelUnlocked(int level) async {
    final prefs = await SharedPreferences.getInstance();
    // Sadece Level 1 açık, diğerleri kilitli
    if (level == 1) return true;
    return prefs.getBool('level_${level}_unlocked') ?? false;
  }

  // Level tamamlandığında çağrılacak fonksiyon
  static Future<void> onLevelCompleted(int level, int elapsedSeconds) async {
    print('=== LEVEL COMPLETION DEBUG ===');
    print('Level $level completed in $elapsedSeconds seconds');
    
    // Yıldız hesapla
    final stars = calculateStars(elapsedSeconds);
    print('Calculated stars: $stars');
    
    // Yıldızları kaydet
    await setStars(level, stars);
    print('Stars saved for level $level');
    
    // Bir sonraki level'ın kilidini aç
    if (level < 50) {
      final nextLevel = level + 1;
      print('Unlocking level $nextLevel...');
      await unlockLevel(nextLevel);
      
      // Kontrol et
      final isUnlocked = await isLevelUnlocked(nextLevel);
      print('Level $nextLevel unlocked: $isUnlocked');
    }
    
    print('=== LEVEL COMPLETION END ===');
  }

  // Tüm progress'i sıfırla
  static Future<void> resetAllProgress() async {
    final prefs = await SharedPreferences.getInstance();
    final keys = prefs.getKeys();
    
    for (final key in keys) {
      if (key.startsWith('level_')) {
        await prefs.remove(key);
      }
    }
    
    // Level 1'i açık bırak
    await unlockLevel(1);
  }

  // İlk kurulum için - sadece Level 1 açık
  static Future<void> initializeLevels() async {
    final prefs = await SharedPreferences.getInstance();
    
    // Tüm level'ları kilitli yap
    for (int i = 2; i <= 50; i++) {
      await prefs.setBool('level_${i}_unlocked', false);
    }
    
    // Level 1'i açık yap
    await prefs.setBool('level_1_unlocked', true);
    
    // Tüm yıldız verilerini sıfırla
    for (int i = 1; i <= 50; i++) {
      await prefs.remove('level_${i}_stars');
    }
  }
} \n\n===== FILE 119/160: lib/services/progress_service.dart =====\nimport 'package:shared_preferences/shared_preferences.dart';

class ProgressService {
  // Yıldız hesaplama
  static int calculateStars(int completionTimeSeconds) {
    if (completionTimeSeconds <= 30) return 3;
    if (completionTimeSeconds <= 45) return 2;
    return 1;
  }

  // Level yıldızlarını kaydet
  static Future<void> saveLevelStars(int stage, int level, int stars) async {
    final prefs = await SharedPreferences.getInstance();
    final key = 'level_${level}_stars';
    await prefs.setInt(key, stars);
    
    // Bir sonraki level'ın kilidini aç
    if (stars >= 1) {
      await unlockNextLevel(stage, level + 1);
    }
  }

  // Level yıldızlarını getir
  static Future<int> getLevelStars(int stage, int level) async {
    final prefs = await SharedPreferences.getInstance();
    final key = 'level_${level}_stars';
    return prefs.getInt(key) ?? 0;
  }

  // Level kilit durumunu kaydet
  static Future<void> setLevelLock(int stage, int level, bool isLocked) async {
    final prefs = await SharedPreferences.getInstance();
    final key = 'level_${level}_unlocked';
    await prefs.setBool(key, !isLocked);
  }

  // Level kilit durumunu getir
  static Future<bool> isLevelLocked(int stage, int level) async {
    final prefs = await SharedPreferences.getInstance();
    final key = 'level_${level}_unlocked';
    return !(prefs.getBool(key) ?? (level == 1)); // Level 1 hariç hepsi kilitli
  }

  // Bir sonraki level'ın kilidini aç
  static Future<void> unlockNextLevel(int stage, int nextLevel) async {
    if (nextLevel <= 50) {
      await setLevelLock(stage, nextLevel, false);
      print('DEBUG: Level $nextLevel unlocked for stage $stage');
    }
  }

  // Tüm progress'i sıfırla
  static Future<void> resetAllProgress() async {
    final prefs = await SharedPreferences.getInstance();
    final keys = prefs.getKeys();
    
    for (final key in keys) {
      if (key.startsWith('level_')) {
        await prefs.remove(key);
      }
    }
    
    // Level 1'i açık bırak
    await setLevelLock(1, 1, false);
  }
} \n\n===== FILE 120/160: lib/services/puzzle_loader_service.dart =====\nimport 'dart:convert';
import 'package:flutter/services.dart' show rootBundle;
import '../models/puzzle_data.dart';
import 'remote_puzzle_provider.dart';
import 'github_puzzle_provider.dart';

enum PuzzleSource { local, remote, hybrid, github }

class PuzzleLoaderService {
  final RemotePuzzleProvider? _remote;
  final GitHubPuzzleProvider? _github;
  final PuzzleSource source;

  PuzzleLoaderService({
    RemotePuzzleProvider? remote,
    GitHubPuzzleProvider? github,
    this.source = PuzzleSource.hybrid,
  }) : _remote = remote, _github = github;

  String _fmt(DateTime d) =>
      '${d.year.toString().padLeft(4,'0')}-${d.month.toString().padLeft(2,'0')}-${d.day.toString().padLeft(2,'0')}';

  Future<PuzzleData> loadDailyPuzzle(DateTime dateLocal) async {
    // Sadece GitHub'dan çek
    if (_github == null) {
      throw Exception('GitHub provider not available');
    }
    
    final s = await _github!.fetchDaily(dateLocal);
    if (s == null) {
      throw Exception('Günlük bulmaca yüklenemedi');
    }
    
    return _parse(s);
  }

  Future<PuzzleData> loadWeeklyPuzzle(DateTime dateLocal) async {
    // Sadece GitHub'dan çek
    if (_github == null) {
      throw Exception('GitHub provider not available');
    }
    
    final s = await _github!.fetchWeekly(dateLocal);
    if (s == null) {
      throw Exception('Haftalık bulmaca bulunamadı');
    }
    
    return _parse(s);
  }

  // Cache'i temizle
  Future<void> clearCache() async {
    if (_github != null) {
      await _github!.clearCache();
    }
  }

  PuzzleData _parse(String jsonStr) {
    final map = jsonDecode(jsonStr) as Map<String, dynamic>;
    
    // GitHub'dan gelen puzzle'ları PuzzleData formatına dönüştür
    if (map.containsKey('puzzle') && map.containsKey('solution')) {
      return _convertGitHubPuzzleToPuzzleData(map);
    }
    
    // Eski format için normal parse
    return PuzzleData.fromJson(map);
  }

  PuzzleData _convertGitHubPuzzleToPuzzleData(Map<String, dynamic> jsonData) {
    // Solution'ı dönüştür
    List<List<int>> solution = [];
    for (var row in jsonData['solution']) {
      List<int> intRow = [];
      for (var cell in row) {
        // String değerleri int'e dönüştür
        int value = 0;
        if (cell == 'yellow_triangle') value = 1;
        else if (cell == 'blue_square') value = 2;
        intRow.add(value);
      }
      solution.add(intRow);
    }

    // Puzzle'ı dönüştür (boş grid)
    List<List<int>> puzzle = [];
    for (int i = 0; i < (jsonData['size'] ?? 6); i++) {
      List<int> row = [];
      for (int j = 0; j < (jsonData['size'] ?? 6); j++) {
        row.add(0); // Boş hücreler
      }
      puzzle.add(row);
    }

    // Prefilled'ı bul (locked olan hücreler)
    List<List<int>> prefilled = [];
    if (jsonData.containsKey('puzzle')) {
      List<List<dynamic>> puzzleData = List<List<dynamic>>.from(jsonData['puzzle']);
      for (int i = 0; i < puzzleData.length; i++) {
        for (int j = 0; j < puzzleData[i].length; j++) {
          if (puzzleData[i][j] is Map && puzzleData[i][j]['locked'] == true) {
            prefilled.add([i, j]);
          }
        }
      }
    }

    // Hints'leri dönüştür
    List<List<int>> hintData = [];
    List<dynamic> hints = jsonData['hints'] ?? [];
    for (var hint in hints) {
      List<int> hintRow = [];
      hintRow.add(hint['cell1'][0]); // row1
      hintRow.add(hint['cell1'][1]); // col1
      hintRow.add(hint['cell2'][0]); // row2
      hintRow.add(hint['cell2'][1]); // col2
      hintRow.add(hint['type'] == 'equal' ? 0 : 1); // 0=equal, 1=not_equal
      hintData.add(hintRow);
    }

    // Symbols'ı oluştur (boş)
    Map<String, List<List<String?>>> symbols = {
      'horizontal': List.generate(jsonData['size'] ?? 6, (i) => List.generate((jsonData['size'] ?? 6) - 1, (j) => null)),
      'vertical': List.generate((jsonData['size'] ?? 6) - 1, (i) => List.generate(jsonData['size'] ?? 6, (j) => null)),
    };

    return PuzzleData(
      stage: 0, // Günlük/haftalık puzzle'lar için stage 0
      level: jsonData['level'] ?? 1,
      gridSize: jsonData['size'] ?? 6,
      solution: solution,
      symbols: symbols,
      difficulty: 1, // Varsayılan zorluk
      prefilled: prefilled,
      hint: null,
      hints: null,
      hintData: hintData,
      maxTimeSeconds: 300, // 5 dakika varsayılan
    );
  }

  static Future<PuzzleData> loadUniverseLevelAsPuzzleData(int universeId, int level) async {
    // Mevcut evren sistemi için fallback
    // Bu metod eski sistemi korur
    throw UnimplementedError('loadUniverseLevelAsPuzzleData - Evren sistemi için ayrı implementasyon gerekli');
  }
}\n\n===== FILE 121/160: lib/services/puzzle_loading_service.dart =====\nimport 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import '../bloc/puzzle_bloc.dart';
import '../bloc/puzzle_events.dart';
import '../services/puzzle_loader_service.dart';
import '../services/puzzle_service.dart';
import '../services/github_puzzle_provider.dart';
import '../models/puzzle_data.dart';

class PuzzleLoadingService {
  static Future<void> loadPuzzle({
    required BuildContext context,
    required int level,
    required int stage,
    required Function(bool) setLoading,
    required Function(List<List<int>>?) setHints,
    required Function(int) setMaxTime,
    required VoidCallback startTimer,
    required Function(PuzzleData) printSolution,
    DateTime? dailyDate,
    DateTime? weeklyMonday,
  }) async {
    try {
      setLoading(true);
      PuzzleData currentPuzzle;
      final puzzleLoader = PuzzleLoaderService(
        github: GitHubPuzzleProvider(),
        source: PuzzleSource.github,
      );
      
      if (dailyDate != null) {
        currentPuzzle = await puzzleLoader.loadDailyPuzzle(dailyDate);
      } else if (weeklyMonday != null) {
        currentPuzzle = await puzzleLoader.loadWeeklyPuzzle(weeklyMonday);
      } else {
        // Evren sistemine göre level yükleme - eski sistemi kullan
        final puzzle = await PuzzleService.getPuzzle(stage, level);
        if (puzzle == null) {
          throw Exception('Level $level bulunamadı');
        }
        currentPuzzle = puzzle;
      }
      setHints(currentPuzzle.hintData);
      setMaxTime(currentPuzzle.maxTimeSeconds ?? 60);
      
      if (context.mounted) {
        try {
          final bloc = context.read<PuzzleBloc>();
          bloc.add(PuzzleLoad(
            stage: (dailyDate != null || weeklyMonday != null) ? 0 : stage, // Günlük/haftalık için stage 0
            level: currentPuzzle.level,
            gridSize: currentPuzzle.gridSize,
            solution: currentPuzzle.solution,
            horizontalSymbols: currentPuzzle.symbols['horizontal']!,
            verticalSymbols: currentPuzzle.symbols['vertical']!,
            prefilled: currentPuzzle.prefilled,
          ));
        } catch (e) {
          print('Bloc yükleme hatası: $e');
          createDefaultPuzzle(context, stage, level);
        }
      }
      
      setLoading(false);
      startTimer();
      printSolution(currentPuzzle);
    } catch (e) {
      print('Bulmaca yükleme hatası: $e');
      
      if (context.mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text(
              dailyDate != null
                  ? 'Bugünün bulmacası yüklenemedi: $e'
                  : weeklyMonday != null
                      ? 'Bu haftanın bulmacası yüklenemedi: $e'
                      : 'Level $level yüklenirken hata oluştu: $e',
            ),
            backgroundColor: Colors.red,
            duration: Duration(seconds: 3),
            action: SnackBarAction(
              label: 'Geri Dön',
              textColor: Colors.white,
              onPressed: () {
                Navigator.of(context).pop();
              },
            ),
          ),
        );
      }
      if (dailyDate == null) {
        createDefaultPuzzle(context, stage, level);
      }
    }
  }

  static void createDefaultPuzzle(BuildContext context, int stage, int level) {
    if (context.mounted) {
      try {
        final bloc = context.read<PuzzleBloc>();
        bloc.add(PuzzleLoad(
          stage: stage,
          level: level,
          gridSize: 6,
          solution: [
            [1, 2, 2, 1, 2, 1],
            [1, 2, 2, 1, 1, 2],
            [2, 1, 1, 2, 1, 2],
            [1, 2, 1, 2, 2, 1],
            [2, 1, 2, 1, 1, 2],
            [2, 1, 1, 2, 2, 1],
          ],
          horizontalSymbols: List.generate(6, (i) => List.generate(5, (j) => null)),
          verticalSymbols: List.generate(5, (i) => List.generate(6, (j) => null)),
          prefilled: [[0, 0], [0, 1], [1, 0], [1, 1], [2, 2], [3, 3]],
        ));
      } catch (e) {
        print('Varsayılan puzzle oluşturma hatası: $e');
      }
    }
  }
} \n\n===== FILE 122/160: lib/services/puzzle_prefetch_service.dart =====\nimport 'package:flutter/material.dart';
import 'puzzle_loader_service.dart';
import 'github_puzzle_provider.dart';
import 'remote_puzzle_provider.dart';

class PuzzlePrefetchService {
  final PuzzleLoaderService loader;
  
  PuzzlePrefetchService({
    PuzzleLoaderService? loader,
    GitHubPuzzleProvider? github,
    RemotePuzzleProvider? remote,
    PuzzleSource source = PuzzleSource.hybrid,
  }) : loader = loader ?? PuzzleLoaderService(
    github: github ?? GitHubPuzzleProvider(),
    remote: remote ?? RemotePuzzleProvider(),
    source: source,
  );

  Future<void> prefetchTodayAndThisWeek() async {
    final now = DateTime.now();
    
    try {
      // Günlük puzzle'ı prefetch et
      await loader.loadDailyPuzzle(now);
      debugPrint('Daily puzzle prefetched successfully');
    } catch (e) {
      debugPrint('Daily puzzle prefetch failed: $e');
    }
    
    try {
      // Haftalık puzzle'ı prefetch et
      await loader.loadWeeklyPuzzle(now);
      debugPrint('Weekly puzzle prefetched successfully');
    } catch (e) {
      debugPrint('Weekly puzzle prefetch failed: $e');
    }
  }

  Future<void> prefetchSpecificDate(DateTime date) async {
    try {
      await loader.loadDailyPuzzle(date);
      debugPrint('Daily puzzle for ${date.toString()} prefetched successfully');
    } catch (e) {
      debugPrint('Daily puzzle prefetch for ${date.toString()} failed: $e');
    }
  }

  Future<void> prefetchWeeklyForDate(DateTime date) async {
    try {
      await loader.loadWeeklyPuzzle(date);
      debugPrint('Weekly puzzle for ${date.toString()} prefetched successfully');
    } catch (e) {
      debugPrint('Weekly puzzle prefetch for ${date.toString()} failed: $e');
    }
  }

  void dispose() {
    // Cleanup if needed
  }
}
\n\n===== FILE 123/160: lib/services/puzzle_service.dart =====\nimport 'dart:convert';
import 'package:flutter/services.dart';
import '../models/puzzle_data.dart';

class PuzzleService {
  static Map<String, PuzzleData>? _puzzles;
  
  // Tüm bulmacaları yükle
  static Future<Map<String, PuzzleData>> loadPuzzles() async {
    if (_puzzles != null) return _puzzles!;
    
    try {
      _puzzles = {};
      
      // Stage 1 level'larını yükle
      for (int level = 1; level <= 50; level++) {
        try {
          final String jsonString = await rootBundle.loadString('assets/data/stage1/level_$level.json');
          final Map<String, dynamic> jsonData = json.decode(jsonString);
          _puzzles!['1_$level'] = _convertToPuzzleData(jsonData, 1, level);
        } catch (e) {
          // Level bulunamadı, devam et
        }
      }
      
      // Stage 2 level'larını yükle
      for (int level = 1; level <= 26; level++) {
        try {
          final String jsonString = await rootBundle.loadString('assets/data/stage2/level_$level.json');
          final Map<String, dynamic> jsonData = json.decode(jsonString);
          _puzzles!['2_$level'] = _convertToPuzzleData(jsonData, 2, level);
        } catch (e) {
          // Level bulunamadı, devam et
        }
      }
      
      return _puzzles!;
    } catch (e) {
      print('Bulmaca yükleme hatası: $e');
      return {};
    }
  }
  
  // Belirli bir bulmacayı getir
  static Future<PuzzleData?> getPuzzle(int stage, int level) async {
    final puzzles = await loadPuzzles();
    final key = '${stage}_$level';
    return puzzles[key];
  }
  
  // Stage'deki tüm bulmacaları getir
  static Future<List<PuzzleData>> getPuzzlesByStage(int stage) async {
    final puzzles = await loadPuzzles();
    return puzzles.values.where((puzzle) => puzzle.stage == stage).toList();
  }
  
  // Toplam bulmaca sayısını getir
  static Future<int> getTotalPuzzleCount() async {
    final puzzles = await loadPuzzles();
    return puzzles.length;
  }
  
  // Zorluk seviyesine göre bulmacaları getir
  static Future<List<PuzzleData>> getPuzzlesByDifficulty(int difficulty) async {
    final puzzles = await loadPuzzles();
    return puzzles.values.where((puzzle) => puzzle.difficulty == difficulty).toList();
  }

  // JSON formatını PuzzleData formatına dönüştür
  static PuzzleData _convertToPuzzleData(Map<String, dynamic> jsonData, int stage, int level) {
    // Solution'ı dönüştür
    List<List<int>> solution = [];
    for (var row in jsonData['solution']) {
      List<int> intRow = [];
      for (var cell in row) {
        // String değerleri int'e dönüştür
        int value = 0;
        if (cell == 'yellow_triangle') value = 1;
        else if (cell == 'blue_square') value = 2;
        intRow.add(value);
      }
      solution.add(intRow);
    }

    // Prefilled'ı bul (locked olan hücreler)
    List<List<int>> prefilled = [];
    List<List<dynamic>> puzzle = List<List<dynamic>>.from(jsonData['puzzle']);
    for (int i = 0; i < puzzle.length; i++) {
      for (int j = 0; j < puzzle[i].length; j++) {
        if (puzzle[i][j]['locked'] == true) {
          prefilled.add([i, j]);
        }
      }
    }

    // Hints'leri dönüştür
    List<List<int>> hintData = [];
    List<dynamic> hints = jsonData['hints'];
    for (var hint in hints) {
      List<int> hintRow = [];
      hintRow.add(hint['cell1'][0]); // row1
      hintRow.add(hint['cell1'][1]); // col1
      hintRow.add(hint['cell2'][0]); // row2
      hintRow.add(hint['cell2'][1]); // col2
      hintRow.add(hint['type'] == 'equal' ? 0 : 1); // 0=equal, 1=not_equal
      hintData.add(hintRow);
    }

    // Symbols'ı oluştur (boş)
    Map<String, List<List<String?>>> symbols = {
      'horizontal': List.generate(6, (i) => List.generate(5, (j) => null)),
      'vertical': List.generate(5, (i) => List.generate(6, (j) => null)),
    };

    return PuzzleData(
      stage: stage,
      level: level,
      gridSize: jsonData['size'] ?? 6,
      solution: solution,
      symbols: symbols,
      difficulty: 1, // Varsayılan zorluk
      prefilled: prefilled,
      hint: null,
      hints: null,
      hintData: hintData,
      maxTimeSeconds: 300, // 5 dakika varsayılan
    );
  }
} \n\n===== FILE 124/160: lib/services/remote_puzzle_provider.dart =====\nimport 'dart:convert';
import 'dart:io';
import 'package:http/http.dart' as http;
import 'package:path_provider/path_provider.dart';
import '../config/puzzle_remote_config.dart';

class RemotePuzzleProvider {
  final http.Client _client;
  RemotePuzzleProvider({http.Client? client}) : _client = client ?? http.Client();

  String _fmt(DateTime d) =>
      '${d.year.toString().padLeft(4,'0')}-${d.month.toString().padLeft(2,'0')}-${d.day.toString().padLeft(2,'0')}';

  Future<File> _cacheFile(String subDir, String name) async {
    final dir = await getApplicationDocumentsDirectory();
    final d = Directory('${dir.path}/puzzles/$subDir');
    if (!await d.exists()) await d.create(recursive: true);
    return File('${d.path}/$name');
  }

  Future<String?> _getWithCache({
    required Uri url,
    required File cache,
    required Duration ttl,
  }) async {
    if (await cache.exists()) {
      final age = DateTime.now().difference(await cache.lastModified());
      if (age <= ttl) {
        return cache.readAsString();
      }
    }
    try {
      final resp = await _client.get(url).timeout(
        PuzzleRemoteConfig.connectTimeout + PuzzleRemoteConfig.readTimeout,
      );
      if (resp.statusCode == 200 && resp.body.isNotEmpty) {
        await cache.writeAsString(resp.body);
        return resp.body;
      }
    } catch (_) {
      // sessiz düş
    }
    if (await cache.exists()) return cache.readAsString();
    return null;
  }

  Future<String?> fetchDaily(DateTime localDate) async {
    final name = 'puzzle_${_fmt(localDate)}.json';
    final url = Uri.parse(
      '${PuzzleRemoteConfig.baseUrl}/${PuzzleRemoteConfig.dailyPath}/$name',
    );
    final cache = await _cacheFile('daily', name);
    return _getWithCache(url: url, cache: cache, ttl: PuzzleRemoteConfig.dailyTtl);
  }

  /// Haftalık: verilen tarihten haftanın PAZARTESİ'sini hesaplar.
  Future<String?> fetchWeekly(DateTime anyLocalDate) async {
    final monday = anyLocalDate.subtract(Duration(days: (anyLocalDate.weekday + 6) % 7));
    final name = 'puzzle_${_fmt(DateTime(monday.year, monday.month, monday.day))}.json';
    final url = Uri.parse(
      '${PuzzleRemoteConfig.baseUrl}/${PuzzleRemoteConfig.weeklyPath}/$name',
    );
    final cache = await _cacheFile('weekly', name);
    return _getWithCache(url: url, cache: cache, ttl: PuzzleRemoteConfig.weeklyTtl);
  }
}
\n\n===== FILE 125/160: lib/services/settings_service.dart =====\nimport 'package:shared_preferences/shared_preferences.dart';

class SettingsService {
  // Keys
  static const String kMusicEnabled = 'settings.musicEnabled';
  static const String kSfxEnabled = 'settings.sfxEnabled';
  static const String kMasterVolume = 'settings.masterVolume'; // int 0-100
  static const String kHaptics = 'settings.haptics';
  static const String kNotifyDaily = 'settings.notifyDaily';
  static const String kNotifyWeekly = 'settings.notifyWeekly';
  static const String kLocale = 'settings.locale'; // 'tr' | 'en'

  // Profile keys for reset
  static const String kProfileAvatarPath = 'profile.avatarPath';
  static const String kProfileUsername = 'profile.username';

  // Defaults
  static const bool defaultMusicEnabled = true;
  static const bool defaultSfxEnabled = true;
  static const int defaultMasterVolume = 70;
  static const bool defaultHaptics = true;
  static const bool defaultNotifyDaily = true;
  static const bool defaultNotifyWeekly = true;
  static const String defaultLocale = 'tr';

  static Future<Map<String, Object>> loadAll() async {
    final prefs = await SharedPreferences.getInstance();
    return <String, Object>{
      kMusicEnabled: prefs.getBool(kMusicEnabled) ?? defaultMusicEnabled,
      kSfxEnabled: prefs.getBool(kSfxEnabled) ?? defaultSfxEnabled,
      kMasterVolume: prefs.getInt(kMasterVolume) ?? defaultMasterVolume,
      kHaptics: prefs.getBool(kHaptics) ?? defaultHaptics,
      kNotifyDaily: prefs.getBool(kNotifyDaily) ?? defaultNotifyDaily,
      kNotifyWeekly: prefs.getBool(kNotifyWeekly) ?? defaultNotifyWeekly,
      kLocale: prefs.getString(kLocale) ?? defaultLocale,
    };
  }

  static Future<void> setMusicEnabled(bool value) async {
    final prefs = await SharedPreferences.getInstance();
    await prefs.setBool(kMusicEnabled, value);
  }

  static Future<void> setSfxEnabled(bool value) async {
    final prefs = await SharedPreferences.getInstance();
    await prefs.setBool(kSfxEnabled, value);
  }

  static Future<void> setMasterVolume(int value) async {
    final prefs = await SharedPreferences.getInstance();
    await prefs.setInt(kMasterVolume, value.clamp(0, 100));
  }

  static Future<void> setHaptics(bool value) async {
    final prefs = await SharedPreferences.getInstance();
    await prefs.setBool(kHaptics, value);
  }

  static Future<void> setNotifyDaily(bool value) async {
    final prefs = await SharedPreferences.getInstance();
    await prefs.setBool(kNotifyDaily, value);
  }

  static Future<void> setNotifyWeekly(bool value) async {
    final prefs = await SharedPreferences.getInstance();
    await prefs.setBool(kNotifyWeekly, value);
  }

  static Future<void> setLocale(String code) async {
    final prefs = await SharedPreferences.getInstance();
    await prefs.setString(kLocale, (code == 'en') ? 'en' : 'tr');
  }

  static Future<void> resetAll() async {
    final prefs = await SharedPreferences.getInstance();
    await prefs.remove(kMusicEnabled);
    await prefs.remove(kSfxEnabled);
    await prefs.remove(kMasterVolume);
    await prefs.remove(kHaptics);
    await prefs.remove(kNotifyDaily);
    await prefs.remove(kNotifyWeekly);
    await prefs.remove(kLocale);
    await prefs.remove(kProfileAvatarPath);
    await prefs.remove(kProfileUsername);
  }
}


\n\n===== FILE 126/160: lib/services/shared_pref_helper.dart =====\nimport 'package:flutter/material.dart';
import 'package:shared_preferences/shared_preferences.dart';

class SharedPrefHelper {
  static const String _keyThemeMode = 'theme_mode';

  static Future<ThemeMode> getSavedThemeMode() async {
    final prefs = await SharedPreferences.getInstance();
    final value = prefs.getString(_keyThemeMode);

    switch (value) {
      case 'dark':
        return ThemeMode.dark;
      case 'light':
        return ThemeMode.light;
      case 'system':
        return ThemeMode.system;
      default:
        return ThemeMode.light; // default
    }
  }

  static Future<void> saveThemeMode(ThemeMode mode) async {
    final prefs = await SharedPreferences.getInstance();
    final value = switch (mode) {
      ThemeMode.dark => 'dark',
      ThemeMode.light => 'light',
      ThemeMode.system => 'system',
    };
    await prefs.setString(_keyThemeMode, value);
  }
}
\n\n===== FILE 127/160: lib/services/user_progress_service.dart =====\nimport 'dart:convert';
import 'package:shared_preferences/shared_preferences.dart';

class UserProgress {
  final int openedStage;
  final int openedLevel;
  final Map<String, int> stars;
  final int hints;
  final int undos;
  final bool tutorialSeen;

  UserProgress({
    required this.openedStage,
    required this.openedLevel,
    required this.stars,
    required this.hints,
    required this.undos,
    required this.tutorialSeen,
  });

  Map<String, dynamic> toJson() {
    return {
      'openedStage': openedStage,
      'openedLevel': openedLevel,
      'stars': stars,
      'hints': hints,
      'undos': undos,
      'tutorialSeen': tutorialSeen,
    };
  }

  factory UserProgress.fromJson(Map<String, dynamic> json) {
    return UserProgress(
      openedStage: json['openedStage'] ?? 1,
      openedLevel: json['openedLevel'] ?? 1,
      stars: Map<String, int>.from(json['stars'] ?? {}),
      hints: json['hints'] ?? 10,
      undos: json['undos'] ?? 5,
      tutorialSeen: json['tutorialSeen'] ?? false,
    );
  }

  factory UserProgress.defaultProgress() {
    return UserProgress(
      openedStage: 1,
      openedLevel: 1,
      stars: {},
      hints: 10,
      undos: 5,
      tutorialSeen: false,
    );
  }
}

class UserProgressService {
  static const String _progressKey = 'user_progress';
  static const String _starsKey = 'stars';
  static const String _hintsKey = 'hints';
  static const String _undosKey = 'undos';
  static const String _tutorialSeenKey = 'tutorial_seen';

  // Kaydedilen verileri oku
  static Future<UserProgress> loadProgress() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final progressJson = prefs.getString(_progressKey);
      
      if (progressJson != null) {
        final progressMap = json.decode(progressJson);
        return UserProgress.fromJson(progressMap);
      }
    } catch (e) {
      print('Progress yükleme hatası: $e');
    }
    
    // Varsayılan değerleri döndür
    return UserProgress.defaultProgress();
  }

  // Yeni verileri kaydet
  static Future<void> saveProgress(UserProgress progress) async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final progressJson = json.encode(progress.toJson());
      await prefs.setString(_progressKey, progressJson);
    } catch (e) {
      print('Progress kaydetme hatası: $e');
    }
  }

  // Verileri sıfırla
  static Future<void> resetProgress() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      await prefs.remove(_progressKey);
    } catch (e) {
      print('Progress sıfırlama hatası: $e');
    }
  }

  // Bölüm 2'nin kilidini kaldır
  static Future<void> unlockStage2() async {
    try {
      final progress = await loadProgress();
      final updatedProgress = UserProgress(
        openedStage: 2,
        openedLevel: progress.openedLevel,
        stars: progress.stars,
        hints: progress.hints,
        undos: progress.undos,
        tutorialSeen: progress.tutorialSeen,
      );
      await saveProgress(updatedProgress);
      print('Bölüm 2 kilidi kaldırıldı!');
    } catch (e) {
      print('Bölüm 2 kilidi kaldırma hatası: $e');
    }
  }

  // Belirli bir stage-level için yıldız kaydet
  static Future<void> saveStar(int stage, int level, int starCount) async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final starsJson = prefs.getString(_starsKey);
      Map<String, int> stars = {};
      
      if (starsJson != null) {
        stars = Map<String, int>.from(json.decode(starsJson));
      }
      
      stars['$stage-$level'] = starCount;
      await prefs.setString(_starsKey, json.encode(stars));
    } catch (e) {
      print('Yıldız kaydetme hatası: $e');
    }
  }

  // Belirli bir stage-level için yıldız oku
  static Future<int> getStar(int stage, int level) async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final starsJson = prefs.getString(_starsKey);
      
      if (starsJson != null) {
        final stars = Map<String, int>.from(json.decode(starsJson));
        return stars['$stage-$level'] ?? 0;
      }
    } catch (e) {
      print('Yıldız okuma hatası: $e');
    }
    
    return 0;
  }

  // Tüm yıldızları oku
  static Future<Map<String, int>> getAllStars() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final starsJson = prefs.getString(_starsKey);
      
      if (starsJson != null) {
        return Map<String, int>.from(json.decode(starsJson));
      }
    } catch (e) {
      print('Tüm yıldızları okuma hatası: $e');
    }
    
    return {};
  }

  // Hint sayısını güncelle
  static Future<void> updateHints(int newHintCount) async {
    try {
      final prefs = await SharedPreferences.getInstance();
      await prefs.setInt(_hintsKey, newHintCount);
    } catch (e) {
      print('Hint güncelleme hatası: $e');
    }
  }

  // Hint sayısını oku
  static Future<int> getHints() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      return prefs.getInt(_hintsKey) ?? 10;
    } catch (e) {
      print('Hint okuma hatası: $e');
    }
    
    return 10;
  }

  // Undo sayısını güncelle
  static Future<void> updateUndos(int newUndoCount) async {
    try {
      final prefs = await SharedPreferences.getInstance();
      await prefs.setInt(_undosKey, newUndoCount);
    } catch (e) {
      print('Undo güncelleme hatası: $e');
    }
  }

  // Undo sayısını oku
  static Future<int> getUndos() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      return prefs.getInt(_undosKey) ?? 5;
    } catch (e) {
      print('Undo okuma hatası: $e');
    }
    
    return 5;
  }

  // Tutorial görüldü olarak işaretle
  static Future<void> markTutorialAsSeen() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      await prefs.setBool(_tutorialSeenKey, true);
    } catch (e) {
      print('Tutorial işaretleme hatası: $e');
    }
  }

  // Tutorial görülüp görülmediğini kontrol et
  static Future<bool> isTutorialSeen() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      return prefs.getBool(_tutorialSeenKey) ?? false;
    } catch (e) {
      print('Tutorial kontrol hatası: $e');
    }
    
    return false;
  }

  // Stage ve level ilerlemesini güncelle
  static Future<void> updateProgress(int stage, int level) async {
    try {
      final currentProgress = await loadProgress();
      final newProgress = UserProgress(
        openedStage: stage > currentProgress.openedStage ? stage : currentProgress.openedStage,
        openedLevel: level > currentProgress.openedLevel ? level : currentProgress.openedLevel,
        stars: currentProgress.stars,
        hints: currentProgress.hints,
        undos: currentProgress.undos,
        tutorialSeen: currentProgress.tutorialSeen,
      );
      
      await saveProgress(newProgress);
    } catch (e) {
      print('İlerleme güncelleme hatası: $e');
    }
  }
}\n\n===== FILE 128/160: lib/services/weekly_puzzle_selection.dart =====\nclass WeeklyPuzzleSelection {
  static DateTime? _selectedMonday;

  static void set(DateTime monday) {
    _selectedMonday = DateTime(monday.year, monday.month, monday.day);
  }

  static DateTime? consume() {
    final val = _selectedMonday;
    _selectedMonday = null;
    return val;
  }
}


\n\n===== FILE 129/160: lib/settings/language_cubit.dart =====\nimport 'package:equatable/equatable.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:shared_preferences/shared_preferences.dart';

class LanguageState extends Equatable {
  final String code; // 'tr' | 'en'
  const LanguageState(this.code);
  @override
  List<Object?> get props => [code];
}

class LanguageCubit extends Cubit<LanguageState> {
  static const _prefsKey = 'app.settings.language';
  LanguageCubit() : super(const LanguageState('tr')) {
    _load();
  }

  Future<void> _load() async {
    final prefs = await SharedPreferences.getInstance();
    final code = prefs.getString(_prefsKey) ?? 'tr';
    emit(LanguageState(code));
  }

  Future<void> setLanguage(String code) async {
    final prefs = await SharedPreferences.getInstance();
    await prefs.setString(_prefsKey, code);
    emit(LanguageState(code));
  }
}
\n\n===== FILE 130/160: lib/settings/settings_cubit.dart =====\nimport 'package:equatable/equatable.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import '../core/notification_service.dart';
import '../audio/audio_gateway.dart';
import 'settings_model.dart';
import 'settings_repository.dart';

import 'settings_state.dart';

class SettingsCubit extends Cubit<SettingsState> {
  final SettingsRepository _repo;
  final NotificationService _notifier;
  final AudioGateway _audio;

  SettingsCubit({SettingsRepository? repository, NotificationService? notifier, AudioGateway? audio})
      : _repo = repository ?? SettingsRepository(),
        _notifier = notifier ?? NotificationService(),
        _audio = audio ?? AudioGateway(),
        super(SettingsState.initial());

  Future<void> init() async {
    emit(state.copyWith(status: SettingsStatus.loading));
    await _notifier.initialize();
    final model = await _repo.load();
    await _audio.apply(model);
    emit(state.copyWith(status: SettingsStatus.idle, model: model));
  }

  Future<void> toggleMusic() => _update(state.model.copyWith(musicOn: !state.model.musicOn));
  Future<void> toggleSfx() => _update(state.model.copyWith(sfxOn: !state.model.sfxOn));
  Future<void> toggleHaptic() => _update(state.model.copyWith(hapticOn: !state.model.hapticOn));

  Future<void> setVolume(double v) => _update(state.model.copyWith(volume: v.clamp(0.0, 1.0)));

  // Locale yönetimi
  Locale get currentLocale {
    final lang = state.model.language;
    return lang == 'en' ? const Locale('en') : const Locale('tr');
  }

  Future<void> setLocale(Locale locale) async {
    final language = locale.languageCode;
    await _update(state.model.copyWith(language: language));
  }

  Future<void> setPuzzleSource(String source) async {
    await _update(state.model.copyWith(puzzleSource: source));
  }

  Future<void> toggleDaily(bool on) async {
    var m = state.model.copyWith(remindDailyOn: on);
    await _update(m);
    if (on) {
      final granted = await _notifier.requestPermission();
      if (!granted) {
        emit(state.copyWith(status: SettingsStatus.error, errorMessage: 'Bildirim izni gerekli'));
        m = m.copyWith(remindDailyOn: false);
        await _update(m);
        return;
      }
      // await _notifier.scheduleDaily();
    } else {
      await _notifier.cancelDaily();
    }
    emit(state.copyWith(status: SettingsStatus.saved));
  }

  Future<void> toggleWeekly(bool on) async {
    var m = state.model.copyWith(remindWeeklyOn: on);
    await _update(m);
    if (on) {
      final granted = await _notifier.requestPermission();
      if (!granted) {
        emit(state.copyWith(status: SettingsStatus.error, errorMessage: 'Bildirim izni gerekli'));
        m = m.copyWith(remindWeeklyOn: false);
        await _update(m);
        return;
      }
      // await _notifier.scheduleWeekly();
    } else {
      await _notifier.cancelWeekly();
    }
    emit(state.copyWith(status: SettingsStatus.saved));
  }

  Future<void> _update(SettingsModel model) async {
    await _repo.save(model);
    await _audio.apply(model);
    emit(state.copyWith(model: model, status: SettingsStatus.saved));
  }
}
\n\n===== FILE 131/160: lib/settings/settings_model.dart =====\nimport 'dart:convert';

/// Uygulama ayarlarını temsil eden model (sadeleştirilmiş)
class SettingsModel {
  final bool musicOn;
  final bool sfxOn;
  final double volume; // 0.0 - 1.0
  final bool hapticOn;

  final bool remindDailyOn;
  final bool remindWeeklyOn;

  final String language; // 'tr' | 'en'
  final String puzzleSource; // 'local' | 'remote' | 'github' | 'hybrid'

  const SettingsModel({
    required this.musicOn,
    required this.sfxOn,
    required this.volume,
    required this.hapticOn,
    required this.remindDailyOn,
    required this.remindWeeklyOn,
    required this.language,
    required this.puzzleSource,
  });

  factory SettingsModel.defaults() => const SettingsModel(
        musicOn: true,
        sfxOn: true,
        volume: 0.7,
        hapticOn: true,
        remindDailyOn: false,
        remindWeeklyOn: false,
        language: 'tr',
        puzzleSource: 'hybrid',
      );

  SettingsModel copyWith({
    bool? musicOn,
    bool? sfxOn,
    double? volume,
    bool? hapticOn,
    bool? remindDailyOn,
    bool? remindWeeklyOn,
    String? language,
    String? puzzleSource,
  }) {
    return SettingsModel(
      musicOn: musicOn ?? this.musicOn,
      sfxOn: sfxOn ?? this.sfxOn,
      volume: volume ?? this.volume,
      hapticOn: hapticOn ?? this.hapticOn,
      remindDailyOn: remindDailyOn ?? this.remindDailyOn,
      remindWeeklyOn: remindWeeklyOn ?? this.remindWeeklyOn,
      language: language ?? this.language,
      puzzleSource: puzzleSource ?? this.puzzleSource,
    );
  }

  Map<String, dynamic> toJson() => {
        'musicOn': musicOn,
        'sfxOn': sfxOn,
        'volume': volume,
        'hapticOn': hapticOn,
        'remindDailyOn': remindDailyOn,
        'remindWeeklyOn': remindWeeklyOn,
        'language': language,
        'puzzleSource': puzzleSource,
      };

  factory SettingsModel.fromJson(Map<String, dynamic> json) {
    return SettingsModel(
      musicOn: (json['musicOn'] as bool?) ?? true,
      sfxOn: (json['sfxOn'] as bool?) ?? true,
      volume: ((json['volume'] as num?) ?? 0.7).toDouble(),
      hapticOn: (json['hapticOn'] as bool?) ?? true,
      remindDailyOn: (json['remindDailyOn'] as bool?) ?? false,
      remindWeeklyOn: (json['remindWeeklyOn'] as bool?) ?? false,
      language: (json['language'] as String?) ?? 'tr',
      puzzleSource: (json['puzzleSource'] as String?) ?? 'hybrid',
    );
  }

  String toJsonString() => jsonEncode(toJson());

  factory SettingsModel.fromJsonString(String data) => SettingsModel.fromJson(jsonDecode(data) as Map<String, dynamic>);
}
\n\n===== FILE 132/160: lib/settings/settings_repository.dart =====\nimport 'package:shared_preferences/shared_preferences.dart';
import 'settings_model.dart';

class SettingsRepository {
  static const String _prefsKey = 'app.settings.model';

  Future<SettingsModel> load() async {
    final prefs = await SharedPreferences.getInstance();
    final raw = prefs.getString(_prefsKey);
    if (raw == null || raw.isEmpty) {
      final defaults = SettingsModel.defaults();
      await save(defaults);
      return defaults;
    }
    try {
      return SettingsModel.fromJsonString(raw);
    } catch (_) {
      final defaults = SettingsModel.defaults();
      await save(defaults);
      return defaults;
    }
  }

  Future<void> save(SettingsModel model) async {
    final prefs = await SharedPreferences.getInstance();
    await prefs.setString(_prefsKey, model.toJsonString());
  }

  Future<void> reset() async {
    final prefs = await SharedPreferences.getInstance();
    await prefs.remove(_prefsKey);
    await save(SettingsModel.defaults());
  }
}
\n\n===== FILE 133/160: lib/settings/settings_state.dart =====\nimport 'package:equatable/equatable.dart';
import 'settings_model.dart';

enum SettingsStatus { idle, loading, saved, error }

class SettingsState extends Equatable {
  final SettingsModel model;
  final SettingsStatus status;
  final String? errorMessage;

  const SettingsState({
    required this.model,
    required this.status,
    this.errorMessage,
  });

  factory SettingsState.initial() => SettingsState(
        model: SettingsModel.defaults(),
        status: SettingsStatus.idle,
      );

  SettingsState copyWith({
    SettingsModel? model,
    SettingsStatus? status,
    String? errorMessage,
  }) {
    return SettingsState(
      model: model ?? this.model,
      status: status ?? this.status,
      errorMessage: errorMessage,
    );
  }

  @override
  List<Object?> get props => [model, status, errorMessage];
}
\n\n===== FILE 134/160: lib/store/store_cubit.dart =====\nimport 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'dart:convert';
import 'dart:math';

import 'store_model.dart';
import '../inventory/inventory_cubit.dart';
import '../inventory/inventory_state.dart';

class StoreCubit extends Cubit<StoreModel> {
  StoreCubit() : super(StoreModel(items: _getDefaultItems())) {
    _loadDailyReward();
  }

  static List<StoreItem> _getDefaultItems() {
    return [
      // Paketler
      StoreItem(
        id: 'starter_pack',
        name: 'Başlangıç Paketi',
        description: '2 İpucu + 2 Geri Al + 2 Kontrol',
        price: 15,
        type: 'package',
        quantity: 1,
        isPackage: true,
        packageItems: [
          StoreItem(id: 'hint_2', name: 'İpucu', type: 'hint', quantity: 2, price: 0, description: ''),
          StoreItem(id: 'undo_2', name: 'Geri Al', type: 'undo', quantity: 2, price: 0, description: ''),
          StoreItem(id: 'check_2', name: 'Kontrol', type: 'check', quantity: 2, price: 0, description: ''),
        ],
      ),
      StoreItem(
        id: 'premium_pack',
        name: 'Premium Paket',
        description: '5 İpucu + 5 Geri Al + 5 Kontrol',
        price: 35,
        type: 'package',
        quantity: 1,
        isPackage: true,
        packageItems: [
          StoreItem(id: 'hint_5', name: 'İpucu', type: 'hint', quantity: 5, price: 0, description: ''),
          StoreItem(id: 'undo_5', name: 'Geri Al', type: 'undo', quantity: 5, price: 0, description: ''),
          StoreItem(id: 'check_5', name: 'Kontrol', type: 'check', quantity: 5, price: 0, description: ''),
        ],
      ),
      StoreItem(
        id: 'mega_pack',
        name: 'Mega Paket',
        description: '10 İpucu + 10 Geri Al + 10 Kontrol',
        price: 65,
        type: 'package',
        quantity: 1,
        isPackage: true,
        packageItems: [
          StoreItem(id: 'hint_10', name: 'İpucu', type: 'hint', quantity: 10, price: 0, description: ''),
          StoreItem(id: 'undo_10', name: 'Geri Al', type: 'undo', quantity: 10, price: 0, description: ''),
          StoreItem(id: 'check_10', name: 'Kontrol', type: 'check', quantity: 10, price: 0, description: ''),
        ],
      ),

      // Tek tek alımlar - İpucu
      StoreItem(
        id: 'hint_1',
        name: '1 Hint',
        description: '1 hint',
        price: 3,
        type: 'hint',
        quantity: 1,
        icon: '💡',
      ),
      StoreItem(
        id: 'hint_3',
        name: '3 Hints',
        description: '3 hints',
        price: 8,
        type: 'hint',
        quantity: 3,
        icon: '💡',
      ),
      StoreItem(
        id: 'hint_5',
        name: '5 Hints',
        description: '5 hints',
        price: 12,
        type: 'hint',
        quantity: 5,
        icon: '💡',
      ),
      StoreItem(
        id: 'hint_10',
        name: '10 Hints',
        description: '10 hints',
        price: 22,
        type: 'hint',
        quantity: 10,
        icon: '💡',
      ),
      StoreItem(
        id: 'hint_50',
        name: '50 Hints',
        description: '50 hints',
        price: 95,
        type: 'hint',
        quantity: 50,
        icon: '💡',
      ),
      StoreItem(
        id: 'hint_100',
        name: '100 Hints',
        description: '100 hints',
        price: 180,
        type: 'hint',
        quantity: 100,
        icon: '💡',
      ),

      // Tek tek alımlar - Geri Al
      StoreItem(
        id: 'undo_1',
        name: '1 Undo',
        description: '1 undo',
        price: 3,
        type: 'undo',
        quantity: 1,
        icon: '↶',
      ),
      StoreItem(
        id: 'undo_3',
        name: '3 Undos',
        description: '3 undos',
        price: 8,
        type: 'undo',
        quantity: 3,
        icon: '↶',
      ),
      StoreItem(
        id: 'undo_5',
        name: '5 Undos',
        description: '5 undos',
        price: 12,
        type: 'undo',
        quantity: 5,
        icon: '↶',
      ),
      StoreItem(
        id: 'undo_10',
        name: '10 Undos',
        description: '10 undos',
        price: 22,
        type: 'undo',
        quantity: 10,
        icon: '↶',
      ),
      StoreItem(
        id: 'undo_50',
        name: '50 Undos',
        description: '50 undos',
        price: 95,
        type: 'undo',
        quantity: 50,
        icon: '↶',
      ),
      StoreItem(
        id: 'undo_100',
        name: '100 Undos',
        description: '100 undos',
        price: 180,
        type: 'undo',
        quantity: 100,
        icon: '↶',
      ),

      // Tek tek alımlar - Kontrol
      StoreItem(
        id: 'check_1',
        name: '1 Check',
        description: '1 check',
        price: 3,
        type: 'check',
        quantity: 1,
        icon: '✓',
      ),
      StoreItem(
        id: 'check_3',
        name: '3 Checks',
        description: '3 checks',
        price: 8,
        type: 'check',
        quantity: 3,
        icon: '✓',
      ),
      StoreItem(
        id: 'check_5',
        name: '5 Checks',
        description: '5 checks',
        price: 12,
        type: 'check',
        quantity: 5,
        icon: '✓',
      ),
      StoreItem(
        id: 'check_10',
        name: '10 Checks',
        description: '10 checks',
        price: 22,
        type: 'check',
        quantity: 10,
        icon: '✓',
      ),
      StoreItem(
        id: 'check_50',
        name: '50 Checks',
        description: '50 checks',
        price: 95,
        type: 'check',
        quantity: 50,
        icon: '✓',
      ),
      StoreItem(
        id: 'check_100',
        name: '100 Checks',
        description: '100 checks',
        price: 180,
        type: 'check',
        quantity: 100,
        icon: '✓',
      ),

    ];
  }

  Future<void> _loadDailyReward() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final today = DateTime.now();
      final todayKey = '${today.year}-${today.month}-${today.day}';
      
      final claimedToday = prefs.getBool('daily_reward_$todayKey') ?? false;
      
      if (!claimedToday) {
        // Rastgele ödül oluştur
        final random = Random();
        final rewardTypes = ['hint', 'undo', 'check'];
        final rewardType = rewardTypes[random.nextInt(rewardTypes.length)];
        final rewardQuantity = random.nextInt(3) + 1; // 1-3 arası
        
        final reward = StoreItem(
          id: 'daily_${rewardType}_$rewardQuantity',
          name: '$rewardQuantity ${_getTypeName(rewardType)}',
          description: 'Günlük reklam ödülü',
          price: 0,
          type: rewardType,
          quantity: rewardQuantity,
          icon: _getTypeIcon(rewardType),
        );
        
        emit(state.copyWith(todayReward: DailyReward(
          date: today,
          isClaimed: false,
          reward: reward,
        )));
      } else {
        emit(state.copyWith(todayReward: DailyReward(
          date: today,
          isClaimed: true,
        )));
      }
    } catch (e) {
      emit(state.copyWith(error: 'Günlük ödül yüklenemedi: $e'));
    }
  }

  String _getTypeName(String type) {
    switch (type) {
      case 'hint': return 'İpucu';
      case 'undo': return 'Geri Al';
      case 'check': return 'Kontrol';
      default: return 'Ödül';
    }
  }

  String _getTypeIcon(String type) {
    switch (type) {
      case 'hint': return '💡';
      case 'undo': return '↶';
      case 'check': return '✓';
      default: return '🎁';
    }
  }

  Future<void> claimDailyReward(BuildContext context) async {
    if (state.todayReward?.isClaimed == true) return;
    
    try {
      emit(state.copyWith(isLoading: true));
      
      // Reklam izleme simülasyonu (2 saniye)
      await Future.delayed(Duration(seconds: 2));
      
      // Ödülü ver
      final reward = state.todayReward!.reward!;
      final inventoryCubit = context.read<InventoryCubit>();
      
      switch (reward.type) {
        case 'hint':
          await inventoryCubit.addHints(reward.quantity);
          break;
        case 'undo':
          await inventoryCubit.addUndos(reward.quantity);
          break;
        case 'check':
          await inventoryCubit.addChecks(reward.quantity);
          break;
      }
      
      // Günlük ödülü işaretle
      final prefs = await SharedPreferences.getInstance();
      final today = DateTime.now();
      final todayKey = '${today.year}-${today.month}-${today.day}';
      await prefs.setBool('daily_reward_$todayKey', true);
      
      emit(state.copyWith(
        isLoading: false,
        todayReward: state.todayReward!.copyWith(isClaimed: true),
      ));
      
    } catch (e) {
      emit(state.copyWith(
        isLoading: false,
        error: 'Ödül alınamadı: $e',
      ));
    }
  }

  Future<void> purchaseItem(StoreItem item, BuildContext context) async {
    try {
      emit(state.copyWith(isLoading: true));
      
      // Satın alma simülasyonu (1 saniye)
      await Future.delayed(Duration(seconds: 1));
      
      final inventoryCubit = context.read<InventoryCubit>();
      
      if (item.isPackage && item.packageItems != null) {
        // Paket satın alma
        for (final packageItem in item.packageItems!) {
          switch (packageItem.type) {
            case 'hint':
              await inventoryCubit.addHints(packageItem.quantity);
              break;
            case 'undo':
              await inventoryCubit.addUndos(packageItem.quantity);
              break;
          case 'check':
            await inventoryCubit.addChecks(packageItem.quantity);
            break;
          }
        }
      } else {
        // Tek ürün satın alma
        switch (item.type) {
          case 'hint':
            await inventoryCubit.addHints(item.quantity);
            break;
          case 'undo':
            await inventoryCubit.addUndos(item.quantity);
            break;
          case 'check':
            await inventoryCubit.addChecks(item.quantity);
            break;
        }
      }
      
      emit(state.copyWith(isLoading: false));
      
    } catch (e) {
      emit(state.copyWith(
        isLoading: false,
        error: 'Satın alma başarısız: $e',
      ));
    }
  }

  Future<void> resetDailyRewards() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      
      // Tüm günlük ödül kayıtlarını sil
      final keys = prefs.getKeys();
      for (final key in keys) {
        if (key.startsWith('daily_reward_')) {
          await prefs.remove(key);
        }
      }
      
      // Yeni günlük ödül yükle
      await _loadDailyReward();
      
    } catch (e) {
      emit(state.copyWith(error: 'Günlük ödüller sıfırlanamadı: $e'));
    }
  }
}
\n\n===== FILE 135/160: lib/store/store_model.dart =====\nclass StoreItem {
  final String id;
  final String name;
  final String description;
  final int price;
  final String type; // 'hint', 'undo', 'check', 'time', 'package'
  final int quantity;
  final String? icon;
  final bool isPackage;
  final List<StoreItem>? packageItems; // Paket içeriği

  const StoreItem({
    required this.id,
    required this.name,
    required this.description,
    required this.price,
    required this.type,
    required this.quantity,
    this.icon,
    this.isPackage = false,
    this.packageItems,
  });

  StoreItem copyWith({
    String? id,
    String? name,
    String? description,
    int? price,
    String? type,
    int? quantity,
    String? icon,
    bool? isPackage,
    List<StoreItem>? packageItems,
  }) {
    return StoreItem(
      id: id ?? this.id,
      name: name ?? this.name,
      description: description ?? this.description,
      price: price ?? this.price,
      type: type ?? this.type,
      quantity: quantity ?? this.quantity,
      icon: icon ?? this.icon,
      isPackage: isPackage ?? this.isPackage,
      packageItems: packageItems ?? this.packageItems,
    );
  }
}

class DailyReward {
  final DateTime date;
  final bool isClaimed;
  final StoreItem? reward;

  const DailyReward({
    required this.date,
    required this.isClaimed,
    this.reward,
  });

  DailyReward copyWith({
    DateTime? date,
    bool? isClaimed,
    StoreItem? reward,
  }) {
    return DailyReward(
      date: date ?? this.date,
      isClaimed: isClaimed ?? this.isClaimed,
      reward: reward ?? this.reward,
    );
  }
}

class StoreModel {
  final List<StoreItem> items;
  final DailyReward? todayReward;
  final bool isLoading;
  final String? error;

  const StoreModel({
    required this.items,
    this.todayReward,
    this.isLoading = false,
    this.error,
  });

  StoreModel copyWith({
    List<StoreItem>? items,
    DailyReward? todayReward,
    bool? isLoading,
    String? error,
  }) {
    return StoreModel(
      items: items ?? this.items,
      todayReward: todayReward ?? this.todayReward,
      isLoading: isLoading ?? this.isLoading,
      error: error ?? this.error,
    );
  }
}
\n\n===== FILE 136/160: lib/theme/app_themes.dart =====\nimport 'package:flutter/material.dart';

// AppPalette sınıfı - tema renkleri için
class AppPalette extends ThemeExtension<AppPalette> {
  final Color bottomBarBackground;
  final Color bottomBarIcon;
  final Color bottomBarText;
  final Color puzzleBackground;
  final Color counterTextColor;
  final Gradient earthCellGradient;
  final Gradient sunCellGradient;
  final Color emptyCellColor;

  const AppPalette({
    required this.bottomBarBackground,
    required this.bottomBarIcon,
    required this.bottomBarText,
    required this.puzzleBackground,
    required this.counterTextColor,
    required this.earthCellGradient,
    required this.sunCellGradient,
    required this.emptyCellColor,
  });

  // Açık tema renkleri
  static const AppPalette light = AppPalette(
    bottomBarBackground: Color(0xB3FFFFFF), // Colors.white.withOpacity(0.70)
    bottomBarIcon: Color(0xDE000000), // Colors.black87
    bottomBarText: Color(0xDE000000), // Colors.black87
    puzzleBackground: Color(0xFFF3F4F6), // Açık gri
    counterTextColor: Color(0xDE000000), // Colors.black87
    earthCellGradient: LinearGradient(
      begin: Alignment.topLeft,
      end: Alignment.bottomRight,
      colors: [
        Color(0xFF7FBCE9), // daha kontrastlı pastel mavi
        Color(0xFF6BA8D4), // biraz daha koyu ton
      ],
    ),
    sunCellGradient: LinearGradient(
      begin: Alignment.topLeft,
      end: Alignment.bottomRight,
      colors: [
        Color(0xFFFFD966), // daha canlı pastel sarı
        Color(0xFFFFC233), // biraz daha koyu ton
      ],
    ),
    emptyCellColor: Color(0xFF54636B), // mevcut griye yakın
  );

  // Koyu tema renkleri
  static const AppPalette dark = AppPalette(
    bottomBarBackground: Color(0x99000000), // Colors.black.withOpacity(0.60)
    bottomBarIcon: Colors.white,
    bottomBarText: Colors.white,
    puzzleBackground: Colors.black,
    counterTextColor: Colors.white,
    earthCellGradient: LinearGradient(
      begin: Alignment.topLeft,
      end: Alignment.bottomRight,
      colors: [
        Color(0xFF7FBCE9), // daha kontrastlı pastel mavi
        Color(0xFF6BA8D4), // biraz daha koyu ton
      ],
    ),
    sunCellGradient: LinearGradient(
      begin: Alignment.topLeft,
      end: Alignment.bottomRight,
      colors: [
        Color(0xFFFFD966), // daha canlı pastel sarı
        Color(0xFFFFC233), // biraz daha koyu ton
      ],
    ),
    emptyCellColor: Color(0xFF54636B), // mevcut griye yakın
  );

  @override
  AppPalette copyWith({
    Color? bottomBarBackground,
    Color? bottomBarIcon,
    Color? bottomBarText,
    Color? puzzleBackground,
    Color? counterTextColor,
    Gradient? earthCellGradient,
    Gradient? sunCellGradient,
    Color? emptyCellColor,
  }) {
    return AppPalette(
      bottomBarBackground: bottomBarBackground ?? this.bottomBarBackground,
      bottomBarIcon: bottomBarIcon ?? this.bottomBarIcon,
      bottomBarText: bottomBarText ?? this.bottomBarText,
      puzzleBackground: puzzleBackground ?? this.puzzleBackground,
      counterTextColor: counterTextColor ?? this.counterTextColor,
      earthCellGradient: earthCellGradient ?? this.earthCellGradient,
      sunCellGradient: sunCellGradient ?? this.sunCellGradient,
      emptyCellColor: emptyCellColor ?? this.emptyCellColor,
    );
  }

  @override
  AppPalette lerp(ThemeExtension<AppPalette>? other, double t) {
    if (other is! AppPalette) {
      return this;
    }
    return AppPalette(
      bottomBarBackground: Color.lerp(bottomBarBackground, other.bottomBarBackground, t)!,
      bottomBarIcon: Color.lerp(bottomBarIcon, other.bottomBarIcon, t)!,
      bottomBarText: Color.lerp(bottomBarText, other.bottomBarText, t)!,
      puzzleBackground: Color.lerp(puzzleBackground, other.puzzleBackground, t)!,
      counterTextColor: Color.lerp(counterTextColor, other.counterTextColor, t)!,
      earthCellGradient: earthCellGradient, // Gradient lerp desteklenmiyor, sabit tutuyoruz
      sunCellGradient: sunCellGradient, // Gradient lerp desteklenmiyor, sabit tutuyoruz
      emptyCellColor: Color.lerp(emptyCellColor, other.emptyCellColor, t)!,
    );
  }
}

// Tema yapılandırması
class AppThemes {
  static ThemeData get lightTheme {
    return ThemeData(
      colorScheme: ColorScheme.fromSeed(seedColor: Colors.blue, brightness: Brightness.light),
      scaffoldBackgroundColor: Colors.white,
      visualDensity: VisualDensity.adaptivePlatformDensity,
      appBarTheme: const AppBarTheme(
        backgroundColor: Colors.white,
        foregroundColor: Colors.black,
        elevation: 0.5,
      ),
      brightness: Brightness.light,
      extensions: const [AppPalette.light],
    );
  }

  static ThemeData get darkTheme {
    return ThemeData(
      colorScheme: ColorScheme.fromSeed(seedColor: Colors.deepPurple, brightness: Brightness.dark),
      scaffoldBackgroundColor: Colors.black,
      visualDensity: VisualDensity.adaptivePlatformDensity,
      appBarTheme: const AppBarTheme(
        backgroundColor: Colors.black,
        foregroundColor: Colors.white,
        elevation: 0.5,
      ),
      brightness: Brightness.dark,
      extensions: const [AppPalette.dark],
    );
  }
}\n\n===== FILE 137/160: lib/theme/cell_icons.dart =====\nimport 'package:flutter/foundation.dart';

enum UniverseKind { space, forest } // 1=Space, 2=Forest

@immutable
class CellIconSet {
  final String blue;  // mavi hücre (0/1 veya senin blue value'n neyse)
  final String yellow; // sarı hücre
  const CellIconSet({required this.blue, required this.yellow});
}

const CellIconSet spaceIcons = CellIconSet(
  blue: 'assets/images/earth.png',
  yellow: 'assets/images/sunny.png',
);

const CellIconSet forestIcons = CellIconSet(
  blue: 'assets/images/blueberry.png',
  yellow: 'assets/images/banana.png',
);

CellIconSet iconsForUniverse(UniverseKind kind) {
  switch (kind) {
    case UniverseKind.forest:
      return forestIcons;
    case UniverseKind.space:
    default:
      return spaceIcons;
  }
}
\n\n===== FILE 138/160: lib/utils/puzzle_debug_utils.dart =====\nimport '../models/puzzle_data.dart';

class PuzzleDebugUtils {
  static void printSolution(PuzzleData puzzle) {
    print("=== SOLUTION GRID ===");
    print("Stage: ${puzzle.stage}, Level: ${puzzle.level}");
    for (int row = 0; row < puzzle.gridSize; row++) {
      String rowStr = "Row $row: ";
      for (int col = 0; col < puzzle.gridSize; col++) {
        if (puzzle.solution[row][col] == 1) {
          rowStr += "🔵 ";
        } else if (puzzle.solution[row][col] == 2) {
          rowStr += "🟡 ";
        } else {
          rowStr += "⚫ ";
        }
      }
      print(rowStr);
    }
    print("===================");
  }
} \n\n===== FILE 139/160: lib/utils/puzzle_validation_utils.dart =====\nimport '../bloc/puzzle_states.dart';

class PuzzleValidationUtils {
  static bool isPuzzleSolved(List<List<int>> gridState, List<List<int>> solution) {
    for (int row = 0; row < gridState.length; row++) {
      for (int col = 0; col < gridState[row].length; col++) {
        if (gridState[row][col] != solution[row][col]) {
          return false;
        }
      }
    }
    return true;
  }

  static List<String> validateGrid(List<List<int>> gridState, PuzzleLoaded state) {
    List<String> errors = [];
    int targetCount = state.gridSize ~/ 2;
    
    // Her satırda eşit miktarda mavi ve sarı kontrolü
    for (int row = 0; row < state.gridSize; row++) {
      int blueCount = 0;
      int yellowCount = 0;
      for (int col = 0; col < state.gridSize; col++) {
        if (gridState[row][col] == 1) blueCount++;
        if (gridState[row][col] == 2) yellowCount++;
      }
      if (blueCount != targetCount || yellowCount != targetCount) {
        errors.add('Satır ${row + 1}: Eşit miktarda mavi ve sarı olmalı');
      }
    }
    
    // Her sütunda eşit miktarda mavi ve sarı kontrolü
    for (int col = 0; col < state.gridSize; col++) {
      int blueCount = 0;
      int yellowCount = 0;
      for (int row = 0; row < state.gridSize; row++) {
        if (gridState[row][col] == 1) blueCount++;
        if (gridState[row][col] == 2) yellowCount++;
      }
      if (blueCount != targetCount || yellowCount != targetCount) {
        errors.add('Sütun ${col + 1}: Eşit miktarda mavi ve sarı olmalı');
      }
    }
    
    // 3 aynı renk arka arkaya gelme kontrolü
    for (int row = 0; row < state.gridSize; row++) {
      for (int col = 0; col < state.gridSize - 2; col++) {
        if (gridState[row][col] != 0 && 
            gridState[row][col] == gridState[row][col + 1] && 
            gridState[row][col] == gridState[row][col + 2]) {
          errors.add('3 aynı renk arka arkaya gelemez');
        }
      }
    }
    
    for (int col = 0; col < state.gridSize; col++) {
      for (int row = 0; row < state.gridSize - 2; row++) {
        if (gridState[row][col] != 0 && 
            gridState[row][col] == gridState[row + 1][col] && 
            gridState[row][col] == gridState[row + 2][col]) {
          errors.add('3 aynı renk arka arkaya gelemez');
        }
      }
    }
    
    // Sembol kuralları kontrolü
    for (int row = 0; row < state.gridSize; row++) {
      for (int col = 0; col < state.gridSize - 1; col++) {
        if (state.horizontalSymbols[row][col] == '=') {
          if (gridState[row][col] != gridState[row][col + 1] || 
              gridState[row][col] == 0 || gridState[row][col + 1] == 0) {
            errors.add('Sembol kuralı ihlal edildi');
          }
        } else if (state.horizontalSymbols[row][col] == '⚡') {
          if (gridState[row][col] == gridState[row][col + 1] || 
              gridState[row][col] == 0 || gridState[row][col + 1] == 0) {
            errors.add('Sembol kuralı ihlal edildi');
          }
        }
      }
    }
    
    for (int row = 0; row < state.gridSize - 1; row++) {
      for (int col = 0; col < state.gridSize; col++) {
        if (state.verticalSymbols[row][col] == '=') {
          if (gridState[row][col] != gridState[row + 1][col] || 
              gridState[row][col] == 0 || gridState[row + 1][col] == 0) {
            errors.add('Sembol kuralı ihlal edildi');
          }
        } else if (state.verticalSymbols[row][col] == '⚡') {
          if (gridState[row][col] == gridState[row + 1][col] || 
              gridState[row][col] == 0 || gridState[row + 1][col] == 0) {
            errors.add('Sembol kuralı ihlal edildi');
          }
        }
      }
    }
    
    return errors;
  }
} \n\n===== FILE 140/160: lib/widgets/animated_error_cell.dart =====\nimport 'package:flutter/material.dart';
import 'dart:math' as math;

class AnimatedErrorCell extends StatefulWidget {
  final Widget child;
  final bool isError;
  final bool canRevealMistakes;
  final VoidCallback? onTap;
  final double cellSize;

  const AnimatedErrorCell({
    Key? key,
    required this.child,
    required this.isError,
    required this.canRevealMistakes,
    this.onTap,
    required this.cellSize,
  }) : super(key: key);

  @override
  State<AnimatedErrorCell> createState() => _AnimatedErrorCellState();
}

class _AnimatedErrorCellState extends State<AnimatedErrorCell>
    with TickerProviderStateMixin {
  late AnimationController _haloController;
  late AnimationController _shakeController;
  late Animation<double> _haloAnimation;
  late Animation<double> _shakeAnimation;
  
  bool _isAnimating = false;

  @override
  void initState() {
    super.initState();
    
    // Halo animasyonu (yanıp sönen efekt)
    _haloController = AnimationController(
      duration: const Duration(milliseconds: 800),
      vsync: this,
    );
    
    _haloAnimation = Tween<double>(
      begin: 0.05,
      end: 0.25,
    ).animate(CurvedAnimation(
      parent: _haloController,
      curve: Curves.easeInOut,
    ));
    
    // Shake animasyonu (sarsma efekti)
    _shakeController = AnimationController(
      duration: const Duration(milliseconds: 300),
      vsync: this,
    );
    
    _shakeAnimation = Tween<double>(
      begin: 0.0,
      end: 1.0,
    ).animate(CurvedAnimation(
      parent: _shakeController,
      curve: Curves.easeInOut,
    ));
  }

  @override
  void didUpdateWidget(AnimatedErrorCell oldWidget) {
    super.didUpdateWidget(oldWidget);
    
    // canRevealMistakes değiştiğinde animasyonu başlat/durdur
    if (widget.canRevealMistakes && widget.isError && !_isAnimating) {
      _startAnimations();
    } else if (!widget.canRevealMistakes && _isAnimating) {
      _stopAnimations();
    }
  }

  void _startAnimations() {
    if (!mounted) return;
    
    setState(() {
      _isAnimating = true;
    });
    
    // Shake animasyonunu başlat (tek sefer)
    _shakeController.forward();
    
    // Halo animasyonunu başlat (tekrarlı) - otomatik kaybolma yok
    _haloController.repeat(reverse: true);
  }

  void _stopAnimations() {
    if (!mounted) return;
    
    _haloController.stop();
    _shakeController.stop();
    
    setState(() {
      _isAnimating = false;
    });
  }

  @override
  void dispose() {
    _haloController.dispose();
    _shakeController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    // Eğer hata değilse veya canRevealMistakes false ise normal widget'ı göster
    if (!widget.isError || !widget.canRevealMistakes) {
      return GestureDetector(
        onTap: widget.onTap,
        child: widget.child,
      );
    }

    return RepaintBoundary(
      child: AnimatedBuilder(
        animation: Listenable.merge([_haloController, _shakeController]),
        builder: (context, child) {
          // Shake offset hesapla
          final shakeOffset = _shakeAnimation.value * 1.5 * math.sin(_shakeAnimation.value * math.pi);
          
          return Container(
            margin: EdgeInsets.only(left: shakeOffset),
            child: Stack(
              children: [
                // Ana hücre - her zaman tıklanabilir
                Positioned.fill(
                  child: GestureDetector(
                    onTap: widget.onTap,
                    behavior: HitTestBehavior.opaque, // Tıklama alanını genişlet
                    child: Container(
                      decoration: BoxDecoration(
                        borderRadius: BorderRadius.circular(6),
                        border: Border.all(
                          color: const Color(0xFFFF3B30), // Kırmızı border
                          width: 3.0,
                        ),
                        color: const Color(0xFFFF3B30).withOpacity(0.15), // Kırmızı overlay
                      ),
                      child: widget.child,
                    ),
                  ),
                ),
                
                // Halo efekti (yanıp sönen dış çember) - tıklanamaz
                if (_isAnimating)
                  Positioned(
                    left: -4,
                    top: -4,
                    right: -4,
                    bottom: -4,
                    child: IgnorePointer( // Tıklamaları engelle
                      child: Container(
                        decoration: BoxDecoration(
                          borderRadius: BorderRadius.circular(10), // Biraz daha büyük radius
                          border: Border.all(
                            color: const Color(0xFFFF3B30).withOpacity(_haloAnimation.value),
                            width: 2.0,
                          ),
                          boxShadow: [
                            BoxShadow(
                              color: const Color(0xFFFF3B30).withOpacity(_haloAnimation.value * 0.5),
                              blurRadius: 8,
                              spreadRadius: 2,
                            ),
                          ],
                        ),
                      ),
                    ),
                  ),
              ],
            ),
          );
        },
      ),
    );
  }
}
\n\n===== FILE 141/160: lib/widgets/bottom_nav_bar.dart =====\nimport 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import '../theme/app_themes.dart';
import '../bloc/profile_cubit.dart';
import '../l10n/app_localizations.dart';

class MapBottomBar extends StatelessWidget {
  final List<Widget>? children;
  final MainAxisAlignment mainAxisAlignment;
  final VoidCallback? onTapDaily;
  final VoidCallback? onTapWeekly;
  final VoidCallback? onTapProfile;
  final VoidCallback? onTapSettings;
  final VoidCallback? onTapMarket;

  const MapBottomBar({
    super.key,
    this.children,
    this.mainAxisAlignment = MainAxisAlignment.spaceAround,
    this.onTapDaily,
    this.onTapWeekly,
    this.onTapProfile,
    this.onTapSettings,
    this.onTapMarket,
  });

  @override
  Widget build(BuildContext context) {
    final Size size = MediaQuery.of(context).size;
    final double iconSize = (size.width * 0.09).clamp(28.0, 46.0).toDouble();
    final pal = Theme.of(context).extension<AppPalette>()!;
    final l10n = AppLocalizations.of(context)!;
    
    return SafeArea(
      child: Container(
        width: double.infinity,
        height: iconSize + 4 + 14 + 8, // icon + spacing(4) + text(14) + vertical padding total(8)
        padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 3),
        decoration: BoxDecoration(
          color: pal.bottomBarBackground,
        ),
        child: LayoutBuilder(
          builder: (context, constraints) {
            // Responsive spacing to avoid overflow on small widths
            final double separatorWidth = (constraints.maxWidth < 480) ? 8 : 16;
            final Widget sep = Padding(
              padding: EdgeInsets.symmetric(horizontal: separatorWidth / 2),
              child: Text('|', style: TextStyle(color: pal.bottomBarText.withOpacity(0.7))),
            );
            final bool isTight = constraints.maxWidth < 380;
            final mainAxis = isTight ? MainAxisAlignment.spaceBetween : mainAxisAlignment;
            final Widget tightSep = isTight
                ? SizedBox(width: 4, child: Center(child: Text('|', style: TextStyle(color: pal.bottomBarText.withOpacity(0.7)))))
                : sep;

                         final List<Widget> defaultChildren = [
               _ImageNavItem(
                 assetPath: 'assets/images/daily_button.png',
                 label: l10n.daily,
                 onTap: onTapDaily,
                 textColor: pal.bottomBarText,
                 iconSize: iconSize,
               ),
               isTight ? tightSep : sep,
               _ImageNavItem(
                 assetPath: 'assets/images/weekly_button.png',
                 label: l10n.weekly,
                 onTap: onTapWeekly,
                 textColor: pal.bottomBarText,
                 iconSize: iconSize,
               ),
               isTight ? tightSep : sep,
               BlocBuilder<ProfileCubit, ProfileState>(
                 builder: (context, profileState) {
                   return _ProfileNavItem(
                     avatarPath: profileState.selectedAvatarPath,
                     label: l10n.profile,
                     onTap: onTapProfile,
                     textColor: pal.bottomBarText,
                     iconSize: iconSize,
                   );
                 },
               ),
               isTight ? tightSep : sep,
               _ImageNavItem(
                 assetPath: 'assets/images/settings_button.png',
                 label: l10n.settings,
                 onTap: onTapSettings,
                 textColor: pal.bottomBarText,
                 iconSize: iconSize,
               ),
               isTight ? tightSep : sep,
               _ImageNavItem(
                 assetPath: 'assets/images/market_button.png',
                 label: l10n.market,
                 onTap: onTapMarket,
                 textColor: pal.bottomBarText,
                 iconSize: iconSize,
               ),
             ];

            return SingleChildScrollView(
              scrollDirection: Axis.horizontal,
              physics: const NeverScrollableScrollPhysics(),
              child: ConstrainedBox(
                constraints: BoxConstraints(minWidth: constraints.maxWidth),
                child: Row(
                  mainAxisAlignment: (children?.isNotEmpty ?? false) ? mainAxisAlignment : mainAxis,
                  crossAxisAlignment: CrossAxisAlignment.center,
                  children: [
                    if (children?.isNotEmpty ?? false) ...children! else ...defaultChildren,
                  ],
                ),
              ),
            );
          },
        ),
      ),
    );
  }
}

class _SimpleNavItem extends StatelessWidget {
  final IconData icon;
  final String label;
  final VoidCallback? onTap;
  final Color textColor;
  final double iconSize;
  
  const _SimpleNavItem({
    required this.icon,
    required this.label,
    this.onTap,
    required this.textColor,
    required this.iconSize,
  });
  
  @override
  Widget build(BuildContext context) {
    return Column(
      mainAxisSize: MainAxisSize.min,
      children: [
        GestureDetector(
          onTap: onTap,
          behavior: HitTestBehavior.opaque,
          child: Icon(
            icon,
            size: iconSize,
            color: textColor,
          ),
        ),
        const SizedBox(height: 4),
        Text(
          label,
          style: TextStyle(
            fontSize: 10,
            color: textColor,
            fontWeight: FontWeight.w500,
            height: 1.0,
          ),
        ),
      ],
    );
  }
}

class _ImageNavItem extends StatelessWidget {
  final String assetPath;
  final String label;
  final VoidCallback? onTap;
  final Color textColor;
  final double iconSize;
  
  const _ImageNavItem({
    required this.assetPath,
    required this.label,
    this.onTap,
    required this.textColor,
    required this.iconSize,
  });
  
  @override
  Widget build(BuildContext context) {
    return Column(
      mainAxisSize: MainAxisSize.min,
      children: [
        GestureDetector(
          onTap: onTap,
          behavior: HitTestBehavior.opaque,
          child: Image.asset(
            assetPath,
            width: iconSize,
            height: iconSize,
            fit: BoxFit.contain,
          ),
        ),
        const SizedBox(height: 4),
        Text(
          label,
          style: TextStyle(
            fontSize: 10,
            color: textColor,
            fontWeight: FontWeight.w500,
            height: 1.0,
          ),
        ),
      ],
    );
  }
}

class _ProfileNavItem extends StatelessWidget {
  final String avatarPath;
  final String label;
  final VoidCallback? onTap;
  final Color textColor;
  final double iconSize;
  
  const _ProfileNavItem({
    required this.avatarPath,
    required this.label,
    this.onTap,
    required this.textColor,
    required this.iconSize,
  });
  
  @override
  Widget build(BuildContext context) {
    return Column(
      mainAxisSize: MainAxisSize.min,
      children: [
        GestureDetector(
          onTap: onTap,
          behavior: HitTestBehavior.opaque,
          child: Container(
            width: iconSize,
            height: iconSize,
            decoration: BoxDecoration(
              shape: BoxShape.circle,
              border: Border.all(color: textColor, width: 2),
            ),
            child: ClipOval(
              child: Image.asset(
                avatarPath,
                fit: BoxFit.cover,
                errorBuilder: (context, error, stack) {
                  return Icon(
                    Icons.person,
                    size: iconSize * 0.6,
                    color: textColor,
                  );
                },
              ),
            ),
          ),
        ),
        const SizedBox(height: 4),
        Text(
          label,
          style: TextStyle(
            fontSize: 10,
            color: textColor,
            fontWeight: FontWeight.w500,
            height: 1.0,
          ),
        ),
      ],
    );
  }
}


\n\n===== FILE 142/160: lib/widgets/bottom_nav_item.dart =====\nimport 'package:flutter/material.dart';

class BottomNavItem extends StatelessWidget {
  final String assetPath;
  final String label;
  final VoidCallback? onTap;
  final bool showEllipsis;
  final Color textColor;

  const BottomNavItem({
    super.key,
    required this.assetPath,
    required this.label,
    this.onTap,
    this.showEllipsis = true,
    required this.textColor,
  });

  @override
  Widget build(BuildContext context) {
    final Size size = MediaQuery.of(context).size;
    final double iconSize = (size.width * 0.09).clamp(28.0, 46.0).toDouble();

    return SizedBox(
      width: iconSize,
      child: Column(
        mainAxisSize: MainAxisSize.min,
        mainAxisAlignment: MainAxisAlignment.center,
        crossAxisAlignment: CrossAxisAlignment.center,
        children: [
          GestureDetector(
            onTap: onTap,
            behavior: HitTestBehavior.opaque,
            child: Image.asset(
              assetPath,
              width: iconSize,
              height: iconSize,
              fit: BoxFit.contain,
            ),
          ),
          const SizedBox(height: 4),
          const SizedBox.shrink(),
          Text(
            label,
            maxLines: 1,
            overflow: showEllipsis ? TextOverflow.ellipsis : TextOverflow.clip,
            textAlign: TextAlign.center,
            style: TextStyle(
              fontSize: 10,
              color: textColor,
              fontWeight: FontWeight.w500,
              height: 1.0,
            ),
          ),
        ],
      ),
    );
  }
}


\n\n===== FILE 143/160: lib/widgets/check_dialog_widget.dart =====\nimport 'package:flutter/material.dart';
import '../l10n/app_localizations.dart';

class CheckDialogWidget {
  static void show({
    required BuildContext context,
    required int mistakeCount,
    required bool isAdAvailable,
    required VoidCallback onClose,
    VoidCallback? onWatchAd,
  }) {
    final l10n = AppLocalizations.of(context)!;
    
    showDialog(
      context: context,
      builder: (BuildContext dialogContext) {
        return AlertDialog(
          title: Text(l10n.controlDialogTitle),
          content: Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              Text(
                mistakeCount == 0
                    ? l10n.noErrors
                    : l10n.errorsFound(mistakeCount),
              ),
              if (mistakeCount > 0 && !isAdAvailable)
                const Padding(
                  padding: EdgeInsets.only(top: 8.0),
                  child: Text(
                    'Reklam şu anda mevcut değil',
                    style: TextStyle(fontSize: 12, color: Colors.grey),
                  ),
                ),
            ],
          ),
          actions: [
            TextButton(
              onPressed: () {
                Navigator.of(dialogContext).pop();
                onClose();
              },
              child: Text(l10n.close),
            ),
            if (mistakeCount > 0)
              ElevatedButton(
                onPressed: isAdAvailable ? () {
                  Navigator.of(dialogContext).pop();
                  onWatchAd?.call();
                } : null,
                child: Text(l10n.watchAdToSeeMistakes),
              ),
          ],
        );
      },
    );
  }
}
\n\n===== FILE 144/160: lib/widgets/counters.dart =====\nimport 'package:flutter/material.dart';

class CountersWidget {
  // Sayaç hesaplama fonksiyonları
  static List<int> getRowCounts(List<List<int>> gridState, int row) {
    int blueCount = 0;
    int yellowCount = 0;
    for (int col = 0; col < gridState[row].length; col++) {
      if (gridState[row][col] == 1) blueCount++;
      if (gridState[row][col] == 2) yellowCount++;
    }
    return [blueCount, yellowCount];
  }
  
  static List<int> getColumnCounts(List<List<int>> gridState, int col) {
    int blueCount = 0;
    int yellowCount = 0;
    for (int row = 0; row < gridState.length; row++) {
      if (gridState[row][col] == 1) blueCount++;
      if (gridState[row][col] == 2) yellowCount++;
    }
    return [blueCount, yellowCount];
  }

  static Widget buildCounter(String text, double fontSize, Color counterColor) {
    return Container(
      width: double.infinity,
      child: Text(
        text,
        style: TextStyle(
          color: counterColor,
          fontWeight: FontWeight.bold,
          fontSize: fontSize,
        ),
        textAlign: TextAlign.center,
      ),
    );
  }
} \n\n===== FILE 145/160: lib/widgets/game_control_buttons.dart =====\nimport 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';

import '../bloc/puzzle_bloc.dart';
import '../bloc/puzzle_events.dart';
import '../bloc/puzzle_states.dart';
import '../inventory/inventory_cubit.dart';
import '../inventory/inventory_state.dart';
import '../admin/admin_mode_cubit.dart';
import '../theme/app_themes.dart';
import 'check_dialog_widget.dart';
import '../services/haptic_service.dart';
import '../settings/settings_cubit.dart';
import '../l10n/app_localizations.dart';

class GameControlButtons extends StatelessWidget {
  final double screenWidth;
  final double screenHeight;

  const GameControlButtons({
    Key? key,
    required this.screenWidth,
    required this.screenHeight,
  }) : super(key: key);

  @override
  Widget build(BuildContext context) {
    final pal = Theme.of(context).extension<AppPalette>()!;
    final l10n = AppLocalizations.of(context)!;
    
    return BlocBuilder<PuzzleBloc, PuzzleState>(
      builder: (context, state) {
        return BlocBuilder<InventoryCubit, InventoryState>(
          builder: (context, inventoryState) {
            final model = inventoryState.model;
            final isAdmin = context.watch<AdminModeCubit>().state;
            
            // Admin moduna göre buton durumları
            bool canHint = isAdmin || model.hintCount > 0;
            bool canUndo = isAdmin || model.undoCount > 0;
            bool canCheck = isAdmin || model.checkCount > 0;
            
            // Admin moduna göre görünüm metinleri
            String hintLabelCount = isAdmin ? '∞' : '${model.hintCount}';
            String undoLabelCount = isAdmin ? '∞' : '${model.undoCount}';
            String checkLabelCount = isAdmin ? '∞' : '${model.checkCount}';
            
            // Sabit buton boyutları
            const double buttonWidth = 60.0;
            const double buttonSpacing = 6.0;
            const double totalWidth = (buttonWidth * 5) + (buttonSpacing * 4);
            
            return Column(
              mainAxisAlignment: MainAxisAlignment.center,
              children: [
                // Üst satır: Butonlar - ekranın ortasında
                Center(
                  child: SizedBox(
                    width: totalWidth,
                    child: Row(
                      mainAxisAlignment: MainAxisAlignment.spaceBetween,
                      children: [
                        SizedBox(
                          width: buttonWidth,
                          child: _buildInventoryButton(
                            l10n.hint,
                            Icons.lightbulb_outline,
                            Colors.amber,
                            canHint ? 1 : 0, // Admin modunda her zaman 1
                            () async {
                              if (!isAdmin) {
                                final success = await context.read<InventoryCubit>().useHint();
                                if (!success) {
                                  if (context.mounted) {
                                    ScaffoldMessenger.of(context).showSnackBar(
                                      SnackBar(
                                        content: Text(AppLocalizations.of(context)!.insufficientHints),
                                        backgroundColor: Colors.red,
                                      ),
                                    );
                                  }
                                  return;
                                }
                              }
                              final bloc = context.read<PuzzleBloc>();
                              bloc.add(PuzzleHint());
                            },
                          ),
                        ),
                        SizedBox(
                          width: buttonWidth,
                          child: _buildButton(l10n.delete, Icons.delete_outline, Colors.red, () {
                            final bloc = context.read<PuzzleBloc>();
                            bloc.add(PuzzleReset());
                          }),
                        ),
                        SizedBox(
                          width: buttonWidth,
                          child: _buildInventoryButton(
                            l10n.undo,
                            Icons.undo,
                            Colors.blue,
                            canUndo ? 1 : 0, // Admin modunda her zaman 1
                            () async {
                              if (!isAdmin) {
                                final success = await context.read<InventoryCubit>().useUndo();
                                if (!success) {
                                  if (context.mounted) {
                                    ScaffoldMessenger.of(context).showSnackBar(
                                      SnackBar(
                                        content: Text('Yetersiz Undo'),
                                        backgroundColor: Colors.red,
                                      ),
                                    );
                                  }
                                  return;
                                }
                              }
                              final bloc = context.read<PuzzleBloc>();
                              bloc.add(PuzzleUndo());
                            },
                          ),
                        ),
                        SizedBox(
                          width: buttonWidth,
                          child: _buildButton(l10n.redo, Icons.redo, Colors.green, () {
                            final bloc = context.read<PuzzleBloc>();
                            bloc.add(PuzzleRedo());
                          }),
                        ),
                        SizedBox(
                          width: buttonWidth,
                          child: _buildInventoryButton(
                            l10n.control,
                            Icons.check_circle_outline,
                            state is PuzzleLoaded && state.isChecking ? Colors.orange : Colors.teal,
                            canCheck ? 1 : 0, // Admin modunda her zaman 1
                            () async {
                              if (!isAdmin) {
                                final success = await context.read<InventoryCubit>().useCheck();
                                if (!success) {
                                  if (context.mounted) {
                                    ScaffoldMessenger.of(context).showSnackBar(
                                      SnackBar(
                                        content: Text('Yetersiz Check'),
                                        backgroundColor: Colors.red,
                                      ),
                                    );
                                  }
                                  return;
                                }
                              }
                              
                                                             // Yeni kontrol dialog'unu göster
                               if (state is PuzzleLoaded && context.mounted) {
                                 final mistakeCount = PuzzleBloc.calculateMistakeCount(state);
                                 
                                                                   // Hata varsa titreşim tetikle
                                  if (mistakeCount > 0) {
                                    final settingsState = context.read<SettingsCubit>().state;
                                    if (settingsState.model.hapticOn) {
                                      HapticService().vibrateError(
                                        event: 'kontrol hatası - $mistakeCount hata',
                                        context: context,
                                      );
                                    }
                                  }
                                 
                                 CheckDialogWidget.show(
                                   context: context,
                                   mistakeCount: mistakeCount,
                                   isAdAvailable: true, // TODO: Reklam durumunu kontrol et
                                   onClose: () {
                                     // Dialog kapandı, hiçbir şey yapma
                                   },
                                   onWatchAd: mistakeCount > 0 ? () {
                                     // TODO: Reklam sistemi entegrasyonu
                                     _showMockAdAndRevealMistakes(context);
                                   } : null,
                                 );
                               }
                            },
                          ),
                        ),
                      ],
                    ),
                  ),
                ),
                
                const SizedBox(height: 4),
                
                // Alt satır: Sayılar - ekranın ortasında
                Center(
                  child: SizedBox(
                    width: totalWidth,
                    child: Row(
                      mainAxisAlignment: MainAxisAlignment.spaceBetween,
                      children: [
                        SizedBox(
                          width: buttonWidth,
                          child: _buildCountText(hintLabelCount, context),
                        ),
                        SizedBox(
                          width: buttonWidth,
                          child: _buildCountText(null, context), // Delete için boş
                        ),
                        SizedBox(
                          width: buttonWidth,
                          child: _buildCountText(undoLabelCount, context),
                        ),
                        SizedBox(
                          width: buttonWidth,
                          child: _buildCountText(null, context), // Redo için boş
                        ),
                        SizedBox(
                          width: buttonWidth,
                          child: _buildCountText(checkLabelCount, context),
                        ),
                      ],
                    ),
                  ),
                ),
                
                // Grid boyutu bilgisi kaldırıldı
              ],
            );
          },
        );
      },
    );
  }

  Widget _buildInventoryButton(
    String text,
    IconData icon,
    Color color,
    int count,
    VoidCallback onPressed,
  ) {
    final isEnabled = count > 0;
    
    return SizedBox(
      height: 40,
      child: ElevatedButton(
        onPressed: isEnabled ? onPressed : null,
        style: ElevatedButton.styleFrom(
          backgroundColor: isEnabled ? color : Colors.grey,
          foregroundColor: Colors.white,
          shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(8)),
          padding: const EdgeInsets.symmetric(horizontal: 4, vertical: 8),
        ),
        child: Row(
          mainAxisSize: MainAxisSize.min,
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Icon(icon, size: 14),
            const SizedBox(width: 2),
            Flexible(
              child: Text(
                text,
                style: const TextStyle(fontSize: 10),
                overflow: TextOverflow.ellipsis,
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildButton(String text, IconData icon, Color color, VoidCallback onPressed) {
    return SizedBox(
      height: 40,
      child: ElevatedButton(
        onPressed: onPressed,
        style: ElevatedButton.styleFrom(
          backgroundColor: color,
          foregroundColor: Colors.white,
          shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(8)),
          padding: const EdgeInsets.symmetric(horizontal: 4, vertical: 8),
        ),
        child: Row(
          mainAxisSize: MainAxisSize.min,
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Icon(icon, size: 14),
            const SizedBox(width: 2),
            Flexible(
              child: Text(
                text,
                style: const TextStyle(fontSize: 10),
                overflow: TextOverflow.ellipsis,
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildCountText(String? count, BuildContext context) {
    if (count == null) {
      // Delete ve Redo için boş alan
      return const SizedBox.shrink();
    }
    
    final isEnabled = count != '0' && count != '∞';
    final textColor = isEnabled 
        ? Theme.of(context).colorScheme.onSurface 
        : Theme.of(context).disabledColor;
    
    return Center(
      child: Text(
        count,
        style: TextStyle(
          fontSize: 12,
          fontWeight: FontWeight.w600,
          color: textColor,
        ),
      ),
    );
  }

  // Mock reklam sistemi - gerçek reklam entegrasyonu için placeholder
  void _showMockAdAndRevealMistakes(BuildContext context) {
    // Simulated ad loading time
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text('Reklam yükleniyor...'),
        duration: Duration(seconds: 2),
      ),
    );
    
         // Simulate ad watching
     Future.delayed(Duration(seconds: 2), () {
       if (context.mounted) {
         // Ad watched successfully, show mistakes
         final bloc = context.read<PuzzleBloc>();
         bloc.add(PuzzleRevealMistakes());
         
                   // Titreşim tetikle
          final settingsState = context.read<SettingsCubit>().state;
          if (settingsState.model.hapticOn) {
            HapticService().vibrate(
              event: 'reklam sonrası hatalar',
              context: context,
            );
          }
         
         ScaffoldMessenger.of(context).showSnackBar(
           SnackBar(
             content: Text('Hatalı hücreler gösterildi (8 sn)'),
             backgroundColor: Colors.green,
             duration: Duration(seconds: 3),
           ),
         );
       }
     });
  }
}\n\n===== FILE 146/160: lib/widgets/game_error_handler.dart =====\nimport 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import '../bloc/puzzle_bloc.dart';
import '../bloc/puzzle_states.dart';
import '../services/game_timer_service.dart';
import '../services/haptic_service.dart';
import '../settings/settings_cubit.dart';
import '../l10n/app_localizations.dart';
import 'success_dialog_widget.dart';

class GameErrorHandler {
  static void handlePuzzleError(BuildContext context, PuzzleError state) {
    // Hata durumunda titreşim tetikle
    try {
      final settingsState = context.read<SettingsCubit>().state;
      if (settingsState.model.hapticOn) {
        HapticService().vibrateError(
          event: 'puzzle hatası: ${state.message}',
          context: context,
        );
      }
    } catch (e) {
      print('SettingsCubit not found for error haptic: $e');
    }

    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text(
          state.message,
          style: TextStyle(color: Colors.white, fontWeight: FontWeight.bold),
        ),
        backgroundColor: Colors.red.shade700,
        duration: Duration(seconds: 3),
        behavior: SnackBarBehavior.floating,
        margin: EdgeInsets.all(16),
        shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(8)),
      ),
    );
  }

  static void handlePuzzleSolved({
    required BuildContext context,
    required GameTimerService timerService,
    required VoidCallback stopTimer,
    required VoidCallback setPuzzleCompleted,
    required VoidCallback showSuccessDialog,
    bool isDaily = false,
  }) {
    stopTimer();
    setPuzzleCompleted();
    timerService.setPuzzleCompleted(true);
    
         // Win durumunda başarı titreşimi tetikle
     try {
       final settingsState = context.read<SettingsCubit>().state;
       if (settingsState.model.hapticOn) {
         HapticService().vibrateSuccess(
           event: AppLocalizations.of(context)!.levelCompleted,
           context: context,
         );
       }
     } catch (e) {
       // SettingsCubit bulunamazsa sessizce devam et
       print('SettingsCubit not found for haptic: $e');
     }
    
    showSuccessDialog();
  }
} \n\n===== FILE 147/160: lib/widgets/game_loading_widget.dart =====\nimport 'package:flutter/material.dart';

class GameLoadingWidget extends StatelessWidget {
  final double screenWidth;
  final double screenHeight;

  const GameLoadingWidget({
    Key? key,
    required this.screenWidth,
    required this.screenHeight,
  }) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Colors.black,
      body: Column(
        children: [
          // Boşluk - üstte
          SizedBox(height: screenHeight * 0.1),
          
          // Oyun adı
          Text(
            'SIKOKU',
            style: TextStyle(
              color: Colors.cyanAccent.shade100,
              fontSize: screenWidth * 0.08,
              fontWeight: FontWeight.bold,
              letterSpacing: 4,
              shadows: [
                Shadow(color: Colors.cyanAccent.withOpacity(0.7), blurRadius: 18, offset: const Offset(0, 0)),
                Shadow(color: Colors.cyanAccent.withOpacity(0.4), blurRadius: 40, offset: const Offset(0, 0)),
              ],
            ),
          ),
          
          SizedBox(height: screenHeight * 0.08),
          
          // Loading indicator
          CircularProgressIndicator(color: Colors.white),
          SizedBox(height: screenHeight * 0.025),
          Text(
            'Bulmaca yükleniyor...',
            style: TextStyle(
              color: Colors.white, 
              fontSize: screenWidth * 0.015
            ),
          ),
        ],
      ),
    );
  }
} \n\n===== FILE 148/160: lib/widgets/game_timer_widget.dart =====\nimport 'package:flutter/material.dart';
import '../services/game_timer_service.dart';

class GameTimerWidget extends StatefulWidget {
  final GameTimerService timerService;
  final double screenWidth;

  const GameTimerWidget({
    Key? key,
    required this.timerService,
    required this.screenWidth,
  }) : super(key: key);

  @override
  State<GameTimerWidget> createState() => _GameTimerWidgetState();
}

class _GameTimerWidgetState extends State<GameTimerWidget> {
  int _elapsedSeconds = 0;

  @override
  void initState() {
    super.initState();
    _elapsedSeconds = widget.timerService.currentTime;
  }

  @override
  Widget build(BuildContext context) {
    return Container(
      margin: EdgeInsets.only(right: widget.screenWidth * 0.02),
      padding: EdgeInsets.symmetric(
        horizontal: widget.screenWidth * 0.02, 
        vertical: 4
      ),
      decoration: BoxDecoration(
        color: Colors.black.withOpacity(0.7),
        borderRadius: BorderRadius.circular(8),
        border: Border.all(color: Colors.white24, width: 1),
      ),
      child: Row(
        mainAxisSize: MainAxisSize.min,
        children: [
          Icon(Icons.timer, color: Colors.amber, size: widget.screenWidth * 0.012),
          SizedBox(width: widget.screenWidth * 0.003),
          Text(
            widget.timerService.formatTime(widget.timerService.currentTime),
            style: TextStyle(
              color: Colors.white,
              fontSize: widget.screenWidth * 0.008,
              fontWeight: FontWeight.bold,
            ),
          ),
        ],
      ),
    );
  }
} \n\n===== FILE 149/160: lib/widgets/game_ui_builder.dart =====\nimport 'package:flutter/material.dart';
import 'package:auto_route/auto_route.dart';
import 'package:vector_math/vector_math_64.dart' show Vector3;
import 'package:flutter_bloc/flutter_bloc.dart';

import '../bloc/puzzle_bloc.dart';
import '../bloc/puzzle_events.dart';
import '../bloc/puzzle_states.dart';
import '../models/puzzle_data.dart';
import '../services/game_timer_service.dart';
import 'grid_widget.dart';
import 'sound_control.dart';
import 'game_timer_widget.dart';
import 'game_control_buttons.dart';
import 'check_dialog_widget.dart';
import '../theme/app_themes.dart';
import '../theme/cell_icons.dart';
import '../l10n/app_localizations.dart';
import 'dart:math' as math;

class GameUIBuilder extends StatefulWidget {
  final PuzzleLoaded state;
  final double screenWidth;
  final double screenHeight;
  final List<List<int>>? currentHints;
  final TransformationController transformationController;
  final GameTimerService timerService;
  final int actualLevel; // Gerçek level numarası
  final CellIconSet iconSet; // Yeni parametre
  final bool isDailyMode; // Günlük mod kontrolü
  final bool isWeeklyMode; // Haftalık mod kontrolü

  const GameUIBuilder({
    Key? key,
    required this.state,
    required this.screenWidth,
    required this.screenHeight,
    required this.currentHints,
    required this.transformationController,
    required this.timerService,
    required this.actualLevel,
    required this.iconSet, // Yeni parametre
    this.isDailyMode = false, // Varsayılan false
    this.isWeeklyMode = false, // Varsayılan false
  }) : super(key: key);

  @override
  State<GameUIBuilder> createState() => _GameUIBuilderState();
}

class _GameUIBuilderState extends State<GameUIBuilder> {
  String _getGameTitle() {
    // Günlük bulmaca kontrolü
    if (widget.isDailyMode) {
      return AppLocalizations.of(context)!.dailyPuzzle;
    }
    
    // Haftalık bulmaca kontrolü
    if (widget.isWeeklyMode) {
      return AppLocalizations.of(context)!.weeklyPuzzle;
    }
    
    // Normal evren level'ları - sezon ve bölüm formatı
    return 'Sezon ${widget.state.stage} - Bölüm ${widget.actualLevel}';
  }

  @override
  Widget build(BuildContext context) {
    final pal = Theme.of(context).extension<AppPalette>()!;
    final l10n = AppLocalizations.of(context)!;

    return Scaffold(
      backgroundColor: pal.puzzleBackground,
      appBar: AppBar(
        backgroundColor: Colors.transparent,
        elevation: 0,
        leading: IconButton(
          icon: Icon(Icons.arrow_back, color: pal.counterTextColor),
          onPressed: () => context.router.pop(),
        ),
        title: Text(
          _getGameTitle(),
          style: TextStyle(color: pal.counterTextColor),
        ),
        centerTitle: true,
        actions: [
          GameTimerWidget(
            timerService: widget.timerService,
            screenWidth: widget.screenWidth,
          ),
        ],
      ),
      body: Column(
        children: [
          Expanded(
            child: Center(
              child: Column(
                mainAxisAlignment: MainAxisAlignment.center,
                children: [
                  // GridWidget doğrudan kullanılıyor
                  GridWidget(
                    state: widget.state,
                    screenWidth: widget.screenWidth,
                    screenHeight: widget.screenHeight,
                    gridArea: widget.screenWidth * 0.8,
                    gap: (widget.screenWidth * 0.8) / widget.state.gridSize * 0.05, // Responsive gap
                    cellSize: (widget.screenWidth * 0.8 - ((widget.screenWidth * 0.8) / widget.state.gridSize * 0.05) * (widget.state.gridSize - 1)) / widget.state.gridSize,
                    cellCount: widget.state.gridSize,
                    fontSize: (widget.screenWidth * 0.8 - ((widget.screenWidth * 0.8) / widget.state.gridSize * 0.05) * (widget.state.gridSize - 1)) / widget.state.gridSize * 0.35,
                    currentHints: widget.currentHints,
                    transformationController: widget.transformationController,
                    stage: widget.state.stage,
                    iconSet: widget.iconSet, // Yeni parametre
                  ),
                  
                  const SizedBox(height: 20),
                  
                  // Game control buttons
                  GameControlButtons(
                    screenWidth: widget.screenWidth,
                    screenHeight: widget.screenHeight,
                  ),
                ],
              ),
            ),
          ),
          
          // Bottom navigation bar
          Container(
            padding: const EdgeInsets.only(left: 16, right: 16, top: 5, bottom: 16),
            child: Row(
              mainAxisAlignment: MainAxisAlignment.spaceBetween,
              crossAxisAlignment: CrossAxisAlignment.center,
              children: [
                const SizedBox.shrink(), // Sol boşluk
                Text(
                  '${widget.state.gridSize}x${widget.state.gridSize} Grid',
                  style: TextStyle(
                    color: pal.counterTextColor,
                    fontSize: 12,
                    fontWeight: FontWeight.w500,
                  ),
                ),
                SoundControl(),
              ],
            ),
          ),
        ],
      ),
    );
  }
} \n\n===== FILE 150/160: lib/widgets/grid_widget.dart =====\nimport 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:vector_math/vector_math_64.dart' show Vector3;
import 'dart:ui' as ui;
import '../bloc/puzzle_bloc.dart';
import '../bloc/puzzle_states.dart';
import '../bloc/puzzle_events.dart';
import '../widgets/painters.dart';
import '../models/puzzle_data.dart';
import '../services/image_cache_service.dart';
import '../theme/app_themes.dart';
import '../theme/cell_icons.dart';
import '../config/universe_config.dart';

import 'animated_error_cell.dart';

class GridWidget extends StatefulWidget {
  final PuzzleLoaded state;
  final double screenWidth;
  final double screenHeight;
  final double gridArea;
  final double gap;
  final double cellSize;
  final int cellCount;
  final double fontSize;
  final List<List<int>>? currentHints;
  final TransformationController transformationController;
  final int stage;
  final CellIconSet iconSet; // Yeni parametre

  const GridWidget({
    Key? key,
    required this.state,
    required this.screenWidth,
    required this.screenHeight,
    required this.gridArea,
    required this.gap,
    required this.cellSize,
    required this.cellCount,
    required this.fontSize,
    required this.currentHints,
    required this.transformationController,
    required this.stage,
    required this.iconSet, // Yeni parametre
  }) : super(key: key);

  @override
  State<GridWidget> createState() => _GridWidgetState();
}

class _GridWidgetState extends State<GridWidget> {
  ui.Image? equalImage;
  ui.Image? notEqualImage;

  @override
  void initState() {
    super.initState();
    _loadImages();
  }

  Future<void> _loadImages() async {
    // Cache'den PNG'leri al
    final imageCache = ImageCacheService();
    
    if (imageCache.isLoaded) {
      // Cache'de varsa direkt kullan
      equalImage = imageCache.equalImage;
      notEqualImage = imageCache.notEqualImage;
    } else {
      // Cache'de yoksa yükle (fallback)
      await imageCache.loadHintImages();
      equalImage = imageCache.equalImage;
      notEqualImage = imageCache.notEqualImage;
    }

    if (mounted) setState(() {});
  }

  @override
  Widget build(BuildContext context) {
    final pal = Theme.of(context).extension<AppPalette>()!;
    
    return InteractiveViewer(
      transformationController: widget.transformationController,
      minScale: 0.5,
      maxScale: 3.0,
      child: Container(
        width: widget.gridArea + (widget.gridArea * 0.25),
        height: widget.gridArea + (widget.gridArea * 0.15) + widget.gridArea * 0.1,
        color: pal.puzzleBackground,
        child: Stack(
          children: [
            // Grid Layer
            Positioned(
              left: widget.gridArea * 0.1,
              top: widget.gridArea * 0.1,
              width: widget.gridArea,
              height: widget.gridArea,
              child: GridView.builder(
                physics: const NeverScrollableScrollPhysics(),
                shrinkWrap: true,
                gridDelegate: SliverGridDelegateWithFixedCrossAxisCount(
                  crossAxisCount: widget.cellCount,
                  crossAxisSpacing: widget.gap,
                  mainAxisSpacing: widget.gap,
                ),
                itemCount: widget.cellCount * widget.cellCount,
                itemBuilder: (context, index) {
                  final row = index ~/ widget.cellCount;
                  final col = index % widget.cellCount;
                  
                  return GestureDetector(
                    behavior: HitTestBehavior.opaque,
                    onTap: () {
                      if (!_isPrefilledCell(row, col, widget.state.prefilled)) {
                        try {
                          final bloc = context.read<PuzzleBloc>();
                          bloc.add(PuzzleCellTapped(row, col));
                        } catch (e) {
                          print('ERROR: Bloc bulunamadı: $e');
                        }
                      }
                    },
                    child: Container(
                      decoration: _getCellDecoration(widget.state.gridState[row][col], row, col, widget.state.errorCells, pal),
                      child: _getCellSymbol(widget.state.gridState[row][col], widget.cellSize),
                    ),
                  );
                },
              ),
            ),
            
            // Hints Layer (Pass-through)
            if (widget.currentHints != null)
              Positioned(
                left: widget.gridArea * 0.1,
                top: widget.gridArea * 0.1,
                width: widget.gridArea,
                height: widget.gridArea,
                child: IgnorePointer(
                  ignoring: true,
                  child: CustomPaint(
                    painter: HintsPainter(
                      hints: widget.currentHints!,
                      cellSize: widget.cellSize,
                      gap: widget.gap,
                      cellCount: widget.cellCount,
                      equalImage: equalImage,
                      notEqualImage: notEqualImage,
                    ),
                  ),
                ),
              ),
            
            // Sol sayaçlar (satır sayıları)
            for (int row = 0; row < widget.cellCount; row++)
              Positioned(
                left: 0,
                top: widget.gridArea * 0.1 + row * (widget.cellSize + widget.gap) + (widget.cellSize - widget.gridArea * 0.08) / 2,
                width: widget.gridArea * 0.1,
                height: widget.gridArea * 0.08,
                child: Container(
                  color: Colors.transparent,
                  child: Center(
                    child: _buildCounter(
                      '${_getRowCounts(widget.state.gridState, row)[0]}|${_getRowCounts(widget.state.gridState, row)[1]}',
                      widget.fontSize * 0.8,
                      _getCounterColor(_getRowCounts(widget.state.gridState, row), widget.cellCount, pal),
                    ),
                  ),
                ),
              ),
            
            // Sağ sayaçlar (satır sayıları)
            for (int row = 0; row < widget.cellCount; row++)
              Positioned(
                left: widget.gridArea * 0.1 + widget.gridArea + widget.gridArea * 0.02,
                top: widget.gridArea * 0.1 + row * (widget.cellSize + widget.gap) + (widget.cellSize - widget.gridArea * 0.08) / 2,
                width: widget.gridArea * 0.1,
                height: widget.gridArea * 0.08,
                child: Container(
                  color: Colors.transparent,
                  child: Center(
                    child: _buildCounter(
                      '${_getRowCounts(widget.state.gridState, row)[0]}|${_getRowCounts(widget.state.gridState, row)[1]}',
                      widget.fontSize * 0.8,
                      _getCounterColor(_getRowCounts(widget.state.gridState, row), widget.cellCount, pal),
                    ),
                  ),
                ),
              ),
            
            // Üst sayaçlar (sütun sayıları)
            for (int col = 0; col < widget.cellCount; col++)
              Positioned(
                left: widget.gridArea * 0.1 + col * (widget.cellSize + widget.gap) + (widget.cellSize - widget.gridArea * 0.08) / 2,
                top: widget.gridArea * 0.02,
                width: widget.gridArea * 0.08,
                height: widget.gridArea * 0.1,
                child: Container(
                  color: Colors.transparent,
                  child: Center(
                    child: _buildCounter(
                      '${_getColumnCounts(widget.state.gridState, col)[0]}|${_getColumnCounts(widget.state.gridState, col)[1]}',
                      widget.fontSize * 0.8,
                      _getCounterColor(_getColumnCounts(widget.state.gridState, col), widget.cellCount, pal),
                    ),
                  ),
                ),
              ),
            
            // Alt sayaçlar (sütun sayıları)
            for (int col = 0; col < widget.cellCount; col++)
              Positioned(
                left: widget.gridArea * 0.1 + col * (widget.cellSize + widget.gap) + (widget.cellSize - widget.gridArea * 0.08) / 2,
                top: widget.gridArea * 0.1 + widget.gridArea,
                width: widget.gridArea * 0.08,
                height: widget.gridArea * 0.1,
                child: Container(
                  color: Colors.transparent,
                  child: Center(
                    child: _buildCounter(
                      '${_getColumnCounts(widget.state.gridState, col)[0]}|${_getColumnCounts(widget.state.gridState, col)[1]}',
                      widget.fontSize * 0.8,
                      _getCounterColor(_getColumnCounts(widget.state.gridState, col), widget.cellCount, pal),
                    ),
                  ),
                ),
              ),
          ],
        ),
      ),
    );
  }

  // Sayaç hesaplama fonksiyonları
  List<int> _getRowCounts(List<List<int>> gridState, int row) {
    int blueCount = 0;
    int yellowCount = 0;
    for (int col = 0; col < gridState[row].length; col++) {
      if (gridState[row][col] == 1) blueCount++;
      if (gridState[row][col] == 2) yellowCount++;
    }
    return [blueCount, yellowCount];
  }

  List<int> _getColumnCounts(List<List<int>> gridState, int col) {
    int blueCount = 0;
    int yellowCount = 0;
    for (int row = 0; row < gridState.length; row++) {
      if (gridState[row][col] == 1) blueCount++;
      if (gridState[row][col] == 2) yellowCount++;
    }
    return [blueCount, yellowCount];
  }

  Color _getCounterColor(List<int> counts, int cellCount, AppPalette pal) {
    // Maksimum değerleri hesapla (6x6 için 3|3, 8x8 için 4|4, 10x10 için 5|5)
    final maxValue = cellCount ~/ 2;
    
    // Eğer her iki değer de maksimuma ulaşmışsa gri renk
    if (counts[0] == maxValue && counts[1] == maxValue) {
      return Colors.grey.shade400;
    }
    
    // Normal renk
    return pal.counterTextColor;
  }

  Widget _buildCounter(String text, double fontSize, Color counterColor) {
    return Container(
      width: double.infinity,
      height: double.infinity,
      child: Center(
        child: Text(
          text,
          style: TextStyle(
            color: counterColor,
            fontWeight: FontWeight.bold,
            fontSize: fontSize,
          ),
          textAlign: TextAlign.center,
        ),
      ),
    );
  }

  bool _isPrefilledCell(int row, int col, List<List<int>> prefilled) {
    return prefilled.any((position) => position[0] == row && position[1] == col);
  }

  bool _isErrorCell(int row, int col, List<List<int>> errorCells) {
    return errorCells.any((cell) => cell[0] == row && cell[1] == col);
  }

  BoxDecoration _getCellDecoration(int state, int row, int col, List<List<int>> errorCells, AppPalette pal) {
    // Hatalı hücre kontrolü - canRevealMistakes true ise hataları göster
    bool isErrorCell = widget.state.canRevealMistakes && errorCells.any((cell) => cell[0] == row && cell[1] == col);
    bool isPrefilled = _isPrefilledCell(row, col, widget.state.prefilled);
    
    // İlk evren için PNG görselleri ile uyumlu gradyan arka planlar
    if (_isFirstUniverse()) {
      BoxDecoration decoration;
      
      switch (state) {
        case 0: 
          // Boş hücre - gri arka plan
          decoration = BoxDecoration(
            color: pal.emptyCellColor,
            borderRadius: BorderRadius.circular(6),
            border: isPrefilled 
                ? Border.all(
                    color: Color(0xFF6A0DAD),
                    width: (widget.cellSize * 0.04).clamp(1.0, 4.0),  // Her iki stage için %4
                  )
                : (isErrorCell 
                    ? Border.all(
                        color: const Color(0xFFFF3B30),
                        width: 3.0,
                      )
                    : null),
            boxShadow: isPrefilled 
                ? [
                    BoxShadow(
                      color: Colors.black.withOpacity(0.6),
                      blurRadius: 3,
                      offset: Offset(1, 1),
                    ),
                  ]
                : isErrorCell
                    ? [
                        BoxShadow(
                          color: const Color(0xFFFF3B30).withOpacity(0.5),
                          blurRadius: 8,
                          spreadRadius: 2,
                        ),
                      ]
                    : [
                        BoxShadow(
                          color: Colors.black.withOpacity(0.15),
                          blurRadius: 4,
                          offset: Offset(2, 2),
                        ),
                      ],
          );
          break;
        case 1: 
          // Dünya - mavi gradyan arka plan
          decoration = BoxDecoration(
            gradient: pal.earthCellGradient,
            borderRadius: BorderRadius.circular(6),
            border: isPrefilled 
                ? Border.all(
                    color: Color(0xFF6A0DAD),
                    width: (widget.cellSize * 0.04).clamp(1.0, 4.0),  // Her iki stage için %4
                  )
                : (isErrorCell 
                    ? Border.all(
                        color: const Color(0xFFFF3B30),
                        width: 3.0,
                      )
                    : null),
            boxShadow: isPrefilled 
                ? [
                    BoxShadow(
                      color: Colors.black.withOpacity(0.6),
                      blurRadius: 3,
                      offset: Offset(1, 1),
                    ),
                  ]
                : isErrorCell
                    ? [
                        BoxShadow(
                          color: const Color(0xFFFF3B30).withOpacity(0.5),
                          blurRadius: 8,
                          spreadRadius: 2,
                        ),
                      ]
                    : [
                        BoxShadow(
                          color: Colors.black.withOpacity(0.15),
                          blurRadius: 4,
                          offset: Offset(2, 2),
                        ),
                      ],
          );
          break;
        case 2: 
          // Güneş - sarı gradyan arka plan
          decoration = BoxDecoration(
            gradient: pal.sunCellGradient,
            borderRadius: BorderRadius.circular(6),
            border: isPrefilled 
                ? Border.all(
                    color: Color(0xFF6A0DAD),
                    width: (widget.cellSize * 0.04).clamp(1.0, 4.0),  // Her iki stage için %4
                  )
                : (isErrorCell 
                    ? Border.all(
                        color: const Color(0xFFFF3B30),
                        width: 3.0,
                      )
                    : null),
            boxShadow: isPrefilled 
                ? [
                    BoxShadow(
                      color: Colors.black.withOpacity(0.6),
                      blurRadius: 3,
                      offset: Offset(1, 1),
                    ),
                  ]
                : isErrorCell
                    ? [
                        BoxShadow(
                          color: const Color(0xFFFF3B30).withOpacity(0.5),
                          blurRadius: 8,
                          spreadRadius: 2,
                        ),
                      ]
                    : [
                        BoxShadow(
                          color: Colors.black.withOpacity(0.15),
                          blurRadius: 4,
                          offset: Offset(2, 2),
                        ),
                      ],
          );
          break;
        default: 
          decoration = BoxDecoration(
            color: pal.emptyCellColor,
            borderRadius: BorderRadius.circular(6),
            border: isPrefilled 
                ? Border.all(
                    color: Color(0xFF6A0DAD),
                    width: (widget.cellSize * 0.04).clamp(1.0, 4.0),  // Her iki stage için %4
                  )
                : (isErrorCell 
                    ? Border.all(
                        color: const Color(0xFFFF3B30),
                        width: 3.0,
                      )
                    : null),
            boxShadow: isPrefilled 
                ? [
                    BoxShadow(
                      color: Colors.black.withOpacity(0.6),
                      blurRadius: 3,
                      offset: Offset(1, 1),
                    ),
                  ]
                : isErrorCell
                    ? [
                        BoxShadow(
                          color: const Color(0xFFFF3B30).withOpacity(0.5),
                          blurRadius: 8,
                          spreadRadius: 2,
                        ),
                      ]
                    : [
                        BoxShadow(
                          color: Colors.black.withOpacity(0.15),
                          blurRadius: 4,
                          offset: Offset(2, 2),
                        ),
                      ],
          );
      }
      
      return decoration;
    }
    
    // Diğer evrenler için eski renk sistemi
    Color baseColor;
    switch (state) {
      case 0: baseColor = Colors.blueGrey.shade700; // Boş
      case 1: baseColor = Colors.blue; // Mavi
      case 2: baseColor = Colors.yellow; // Sarı
      default: baseColor = Colors.blueGrey.shade700;
    }
    
    // Hatalı hücre ise kırmızıya çalan renk
    if (isErrorCell) {
      baseColor = baseColor.withRed((baseColor.red + 100).clamp(0, 255));
    }
    
    return BoxDecoration(
      color: baseColor,
      borderRadius: BorderRadius.circular(6),
      border: isPrefilled 
          ? Border.all(
              color: Color(0xFF6A0DAD),
              width: (widget.cellSize * 0.04).clamp(1.0, 4.0),  // Her iki stage için %4
            )
          : (isErrorCell 
              ? Border.all(
                  color: Colors.red,
                  width: widget.screenWidth * 0.003,
                )
              : null),
      boxShadow: isPrefilled 
          ? [
              BoxShadow(
                color: Colors.black.withOpacity(0.6),
                blurRadius: 3,
                offset: Offset(1, 1),
              ),
            ]
          : [
              BoxShadow(
                color: Colors.black.withOpacity(0.15),
                blurRadius: 4,
                offset: Offset(2, 2),
              ),
            ],
    );
  }

  Widget _getCellSymbol(int state, double cellSize) {
    if (state == 0) return const SizedBox.shrink(); // Boş durum
    
    // Stage 0 (Günlük/Haftalık bulmacalar) için üçgen ve yuvarlak çizimler
        if (widget.stage == 0) {
          return Center(
            child: Container(
              width: cellSize * 0.7,
              height: cellSize * 0.7,
              decoration: BoxDecoration(
                boxShadow: [
                  BoxShadow(
                    color: Colors.black.withOpacity(0.2),
                    blurRadius: 3,
                    offset: Offset(1, 1),
                  ),
                ],
              ),
              child: Image.asset(
                state == 1 ? 'assets/images/circle.png' : 'assets/images/triangle.png',
                fit: BoxFit.contain,
              ),
            ),
          );
        }
    
    // Stage 1 için sunny.png ve earth.png görselleri
    if (widget.stage == 1) {
      final iconLogical = cellSize * 0.6;
      
      return Center(
        child: Container(
          width: iconLogical,
          height: iconLogical,
          decoration: BoxDecoration(
            boxShadow: [
              BoxShadow(
                color: Colors.black.withOpacity(0.3),
                blurRadius: 6,
                spreadRadius: 1,
                offset: Offset(2, 2),
              ),
            ],
            borderRadius: BorderRadius.circular(8),
          ),
          child: ClipRRect(
            borderRadius: BorderRadius.circular(8),
            child: Image.asset(
              state == 1 ? 'assets/images/earth.png' : 'assets/images/sunny.png',
              fit: BoxFit.contain,
            ),
          ),
        ),
      );
    }
    
    // Stage 2 için banana ve blueberry görselleri
    if (widget.stage == 2) {
      final iconLogical = cellSize * 0.6;
      
      return Center(
        child: Container(
          width: iconLogical,
          height: iconLogical,
          decoration: BoxDecoration(
            boxShadow: [
              BoxShadow(
                color: Colors.black.withOpacity(0.3),
                blurRadius: 6,
                spreadRadius: 1,
                offset: Offset(2, 2),
              ),
            ],
            borderRadius: BorderRadius.circular(8),
          ),
          child: ClipRRect(
            borderRadius: BorderRadius.circular(8),
            child: Image.asset(
              state == 1 ? 'assets/images/blueberry.png' : 'assets/images/banana.png',
              fit: BoxFit.contain,
            ),
          ),
        ),
      );
    }
    
    // Diğer evrenler için eski şekilleri kullan
    return Center(
      child: SizedBox(
        width: cellSize * 0.4,
        height: cellSize * 0.4,
        child: CustomPaint(
          painter: state == 1 ? CirclePainter() : DiamondPainter(),
        ),
      ),
    );
  }
  
  bool _isFirstUniverse() {
    // Stage 1 ve Stage 2 için gradyan sistemi kullan (PNG görselleri sadece Stage 1'de)
    return widget.stage == 1 || widget.stage == 2;
  }

  // Evren temasına göre hücre görselini getir
  String _getCellImage(int state) {
    print('=== GRID WIDGET DEBUG ===');
    print('Widget stage: ${widget.stage}');
    print('State: $state');
    print('IconSet blue: ${widget.iconSet.blue}');
    print('IconSet yellow: ${widget.iconSet.yellow}');
    
    if (state == 1) {
      print('Returning blue icon: ${widget.iconSet.blue}');
      return widget.iconSet.blue; // Mavi hücreler için
    } else {
      print('Returning yellow icon: ${widget.iconSet.yellow}');
      return widget.iconSet.yellow; // Sarı hücreler için
    }
  }

  // Net ikon oluşturma metodu - PNG'ler geçici olarak kaldırıldı
  Widget _buildSharpIcon(int state, double iconLogical) {
    // Hiçbir şey gösterme - sadece hücre rengi kalsın
    return const SizedBox.shrink();
  }
}\n\n===== FILE 151/160: lib/widgets/level_path_layout.dart =====\nimport 'dart:math' as math;
import 'package:flutter/material.dart';

class LevelPathLayout extends StatelessWidget {
  const LevelPathLayout({
    super.key,
    required this.polylinePoints, // SVG <polyline points="...">
    required this.viewBoxSize,    // Illustrator viewBox (width, height)
    required this.levelCount,     // kaç buton
    required this.onLevelTap,     // butona tıklandığında
    this.background,
    this.buttonSize = 44,
    this.startOffsetRatio = 0.06, // yolun %6'sından sonra başla
    this.endOffsetRatio = 0.00,   // yolun sonunda pay bırakma
    this.debugShowPath = false,
    this.unlockedLevels = const <int>[],
    this.levelStars = const <int, int>{},
  });

  final String polylinePoints;
  final Size viewBoxSize;
  final int levelCount;
  final void Function(int levelIndex) onLevelTap;

  final ImageProvider? background;
  final double buttonSize;
  final double startOffsetRatio;
  final double endOffsetRatio;
  final bool debugShowPath;
  final List<int> unlockedLevels;
  final Map<int, int> levelStars;

  // --- SVG polyline "points" string'ini (x y x y ...) -> List<Offset> dönüştürür
  List<Offset> _parsePolylinePoints(String raw) {
    // Virgül, yeni satır ve boşluk ayracıyla ayır
    final tokens = raw.trim().split(RegExp(r'[\s,]+')).where((t) => t.isNotEmpty);
    final nums = <double>[];
    for (var t in tokens) {
      // ".1" veya "-.2" gibi değerleri "0.1", "-0.2"e çevir (Illustrator bazen böyle yazıyor)
      if (t.startsWith('.')) t = '0$t';
      if (t.startsWith('-.')) t = t.replaceFirst('-.', '-0.');
      nums.add(double.parse(t));
    }
    final points = <Offset>[];
    for (int i = 0; i + 1 < nums.length; i += 2) {
      points.add(Offset(nums[i], nums[i + 1]));
    }
    return points;
  }

  // Eşit aralık hesaplama - PathMetric kullanarak
  List<Offset> _getPointsOnPath(List<Offset> points, int count, double startRatio, double endRatio) {
    if (points.length < 2) return [];
    
    final result = <Offset>[];
    
    // Path oluştur
    final path = Path();
    path.moveTo(points.first.dx, points.first.dy);
    for (int i = 1; i < points.length; i++) {
      path.lineTo(points[i].dx, points[i].dy);
    }
    
    // PathMetric hesapla
    final pathMetric = path.computeMetrics().first;
    final total = pathMetric.length;
    
    // Eşit dağıtım hesaplama - modulo kullanmadan
    final start = total * startRatio;
    final end = total * (1.0 - (endRatio ?? 0.0));
    final avail = (end - start).clamp(1.0, total);
    final step = avail / count;
    
    for (int i = 0; i < count; i++) {
      final at = (start + step * (i + 0.5)).clamp(0.0, total - 1e-6);
      
      // Tangent hesapla
      final tangent = pathMetric.getTangentForOffset(at);
      if (tangent != null) {
        result.add(tangent.position);
      }
    }
    
    return result;
  }

  @override
  Widget build(BuildContext context) {
    return LayoutBuilder(builder: (context, cons) {
      final screen = Size(cons.maxWidth, cons.maxHeight);

      // 1) Polyline -> Points
      final polyPts = _parsePolylinePoints(polylinePoints);
      if (polyPts.isEmpty) {
        return const SizedBox.shrink();
      }

      // 2) viewBox -> ekran ölçeklemesi
      final sx = screen.width / viewBoxSize.width;
      final sy = screen.height / viewBoxSize.height;
      
      final scaledPoints = polyPts.map((p) => 
        Offset(p.dx * sx, p.dy * sy)
      ).toList();

      // 3) Path üzerinde noktalar hesapla
      final samplePoints = _getPointsOnPath(scaledPoints, levelCount, startOffsetRatio, endOffsetRatio);

      final children = <Widget>[];

      if (background != null) {
        children.add(Positioned.fill(
          child: Image(image: background!, fit: BoxFit.cover),
        ));
      }

      // İsteğe bağlı debug path çizimi
      if (debugShowPath) {
        children.add(Positioned.fill(
          child: CustomPaint(painter: _PathPainter(scaledPoints)),
        ));
      }

      // Level butonları
      for (int i = 0; i < samplePoints.length; i++) {
        final p = samplePoints[i];
        final levelIndex = i + 1;
        final isUnlocked = unlockedLevels.contains(levelIndex);
        final stars = levelStars[levelIndex] ?? 0;
        
        children.add(Positioned(
          left: p.dx - buttonSize / 2,
          top: p.dy - buttonSize / 2,
          child: _LevelCircle(
            label: '$levelIndex',
            size: buttonSize,
            isUnlocked: isUnlocked,
            stars: stars,
            onTap: isUnlocked ? () => onLevelTap(levelIndex) : null,
          ),
        ));
      }

      return Stack(clipBehavior: Clip.none, children: children);
    });
  }
}

class _LevelCircle extends StatelessWidget {
  const _LevelCircle({
    required this.label,
    required this.size,
    required this.isUnlocked,
    required this.stars,
    this.onTap,
  });

  final String label;
  final double size;
  final bool isUnlocked;
  final int stars;
  final VoidCallback? onTap;

  @override
  Widget build(BuildContext context) {
    return GestureDetector(
      onTap: onTap,
      child: Column(
        mainAxisSize: MainAxisSize.min,
        children: [
          // Ana buton
          Stack(
            alignment: Alignment.center,
            children: [
              // Alt katman: Beyaz halo (glow) - sadece açık level'lar için
              if (isUnlocked)
                SizedBox(
                  width: size + 10,
                  height: size + 10,
                  child: Container(
                    decoration: BoxDecoration(
                      shape: BoxShape.circle,
                      color: Colors.white.withOpacity(0.18),
                    ),
                  ),
                ),
              
              // Orta katman: Daire
              SizedBox(
                width: size,
                height: size,
                child: Container(
                  decoration: BoxDecoration(
                    shape: BoxShape.circle,
                    color: isUnlocked 
                      ? const Color(0xFF2F73FF) // açık level'lar için mavi
                      : Colors.grey.shade300, // kilitli level'lar için net gri
                    border: Border.all(
                      color: isUnlocked ? Colors.white : Colors.grey.shade400, 
                      width: 2
                    ),
                  ),
                ),
              ),
              
              // Üst katman: İçerik (rakam veya kilit simgesi)
              if (isUnlocked)
                // Açık level'lar için rakam
                Text(
                  label,
                  style: const TextStyle(
                    color: Colors.white,
                    fontWeight: FontWeight.w700,
                    fontSize: 16,
                  ),
                )
              else
                // Kilitli level'lar için kilit simgesi
                Icon(
                  Icons.lock,
                  color: Colors.grey.shade600,
                  size: size * 0.4,
                ),
            ],
          ),
          
                                                                                     // Yıldızlar - sadece açık level'lar için
             if (isUnlocked && stars > 0)
               Transform.translate(
                 offset: const Offset(0, -4),
                 child: Row(
                   mainAxisSize: MainAxisSize.min,
                   children: List.generate(3, (index) {
                     return Icon(
                       index < stars ? Icons.star : Icons.star_border,
                       color: index < stars ? Colors.amber : Colors.grey.shade400,
                       size: 10,
                     );
                   }),
                 ),
               ),
        ],
      ),
    );
  }
}

class _PathPainter extends CustomPainter {
  _PathPainter(this.points);
  final List<Offset> points;

  @override
  void paint(Canvas canvas, Size size) {
    if (points.length < 2) return;
    
    final paint = Paint()
      ..color = Colors.white.withValues(alpha: 0.5)
      ..style = PaintingStyle.stroke
      ..strokeWidth = 2;
    
    final path = Path();
    path.moveTo(points.first.dx, points.first.dy);
    for (int i = 1; i < points.length; i++) {
      path.lineTo(points[i].dx, points[i].dy);
    }
    
    canvas.drawPath(path, paint);
  }

  @override
  bool shouldRepaint(covariant _PathPainter oldDelegate) => false;
}
\n\n===== FILE 152/160: lib/widgets/painters.dart =====\nimport 'package:flutter/material.dart';
import 'dart:ui' as ui;
import '../models/puzzle_data.dart';

class CirclePainter extends CustomPainter {
  @override
  void paint(Canvas canvas, Size size) {
    final paint = Paint()
      ..color = Colors.black
      ..style = PaintingStyle.stroke
      ..strokeWidth = (size.width * 0.12).clamp(1.5, 4.0);
    
    canvas.drawCircle(
      Offset(size.width / 2, size.height / 2),
      size.width / 2 - 2,
      paint,
    );
  }

  @override
  bool shouldRepaint(covariant CustomPainter oldDelegate) => false;
}

class DiamondPainter extends CustomPainter {
  @override
  void paint(Canvas canvas, Size size) {
    final paint = Paint()
      ..color = Colors.black
      ..style = PaintingStyle.stroke
      ..strokeWidth = (size.width * 0.12).clamp(1.5, 4.0);
    
    final path = Path();
    path.moveTo(size.width / 2, 0);
    path.lineTo(size.width, size.height / 2);
    path.lineTo(size.width / 2, size.height);
    path.lineTo(0, size.height / 2);
    path.close();
    
    canvas.drawPath(path, paint);
  }

  @override
  bool shouldRepaint(covariant CustomPainter oldDelegate) => false;
}

class HintsPainter extends CustomPainter {
  final List<List<int>> hints;
  final double cellSize;
  final double gap;
  final int cellCount;
  ui.Image? equalImage;
  ui.Image? notEqualImage;

  HintsPainter({
    required this.hints,
    required this.cellSize,
    required this.gap,
    required this.cellCount,
    this.equalImage,
    this.notEqualImage,
  });

  @override
  void paint(Canvas canvas, Size size) {
    final paint = Paint()
      ..color = Colors.white
      ..strokeWidth = 2.0
      ..style = PaintingStyle.stroke;

    final fillPaint = Paint()
      ..color = Color(0xFFF5F5F5) // Kırık beyaz tonu (saydam değil)
      ..style = PaintingStyle.fill;

    final textPaint = Paint()
      ..color = Colors.black
      ..style = PaintingStyle.fill;

    for (final hint in hints) {
      final cell1 = [hint[0], hint[1]];
      final cell2 = [hint[2], hint[3]];
      final hintType = hint.length > 4 ? hint[4] : 0; // 0 = equal, 1 = not_equal
      
      // Sadece yan yana veya alt alta olan hücreler için sembol göster
      if (_areAdjacent(cell1, cell2)) {
        final center1 = _getCellCenter(cell1[0], cell1[1]);
        final center2 = _getCellCenter(cell2[0], cell2[1]);
        final symbolCenter = Offset(
          (center1.dx + center2.dx) / 2,
          (center1.dy + center2.dy) / 2,
        );

        // Dolu yuvarlak çerçeve çiz
        final circleRadius = cellSize * 0.25;
        canvas.drawCircle(symbolCenter, circleRadius, fillPaint); // İçini tamamen doldur
        canvas.drawCircle(symbolCenter, circleRadius, paint); // Kenarlığını çiz

        // PNG görsellerini kullan
        bool isVertical = _isVerticalConnection(cell1, cell2);
        final imageSize = cellSize * 0.4; // Görsel boyutu
        
                 if (hintType == 0) {
           // EqualIcon mantığını kullan - pixel-snapped fill tabanlı çizim
           _drawEqualIcon(canvas, symbolCenter, imageSize, isVertical);
                 } else if (hintType == 1 && notEqualImage != null) {
           final src = Rect.fromLTWH(0, 0, notEqualImage!.width.toDouble(), notEqualImage!.height.toDouble());
           
           // Ana görsel çiz
           canvas.drawImageRect(
             notEqualImage!,
             src,
             Rect.fromCenter(
               center: symbolCenter,
               width: imageSize,
               height: imageSize,
             ),
             Paint(),
           );
         }
      }
    }
  }

  bool _areAdjacent(List<int> cell1, List<int> cell2) {
    final row1 = cell1[0];
    final col1 = cell1[1];
    final row2 = cell2[0];
    final col2 = cell2[1];
    
    if (row1 == row2 && (col1 == col2 - 1 || col1 == col2 + 1)) {
      return true;
    }
    
    if (col1 == col2 && (row1 == row2 - 1 || row1 == row2 + 1)) {
      return true;
    }
    
    return false;
  }

  bool _isVerticalConnection(List<int> cell1, List<int> cell2) {
    final row1 = cell1[0];
    final col1 = cell1[1];
    final row2 = cell2[0];
    final col2 = cell2[1];
    
    return col1 == col2 && (row1 == row2 - 1 || row1 == row2 + 1);
  }

  Offset _getCellCenter(int row, int col) {
    final x = col * (cellSize + gap) + cellSize / 2;
    final y = row * (cellSize + gap) + cellSize / 2;
    return Offset(x, y);
  }

  void _drawEqualIcon(Canvas canvas, Offset center, double size, bool isVertical) {
    final dpr = ui.PlatformDispatcher.instance.views.first.devicePixelRatio;
    
    // Yardımcı fonksiyonlar
    double toPhysical(double logical) => logical * dpr;
    double toLogical(double physical) => physical / dpr;
    double snap(double logical) => toLogical(toPhysical(logical).roundToDouble());
    
    double snappedThickness(double logicalThickness) {
      final phys = (logicalThickness * dpr).round().clamp(1, 10000);
      return phys / dpr;
    }

    // Parametreler
    final barThickness = size * 0.15; // Boyuta göre orantılı kalınlık
    final gap = size * 0.2; // Boyuta göre orantılı boşluk
    final cornerRadius = 999; // Kapsül şekli
    
    // Güvenli iç boşluk (%12 padding)
    final padding = size * 0.12;
    final contentWidth = size - (padding * 2);
    final contentHeight = size - (padding * 2);
    
    // Merkez koordinatları
    final centerX = center.dx;
    final centerY = center.dy;
    
    // Bar kalınlığını pixel-snap et
    final snappedBarThickness = snappedThickness(barThickness);
    final snappedGap = snap(gap);
    
    // Bar genişliği
    final barWidth = contentWidth;
    final barLeft = centerX - (barWidth / 2);
    final barRight = centerX + (barWidth / 2);
    
    // Paint objesi
    final paint = Paint()
      ..color = Colors.black
      ..style = PaintingStyle.fill;
    
    if (isVertical) {
      // Dikey bağlantı için 90 derece döndürülmüş eşittir işareti
      canvas.save();
      canvas.translate(centerX, centerY);
      canvas.rotate(90 * 3.14159 / 180);
      
      // Üst bar koordinatları (döndürülmüş)
      final topBarTop = -(snappedGap / 2) - snappedBarThickness;
      final topBarBottom = -(snappedGap / 2);
      
      // Alt bar koordinatları (döndürülmüş)
      final bottomBarTop = (snappedGap / 2);
      final bottomBarBottom = (snappedGap / 2) + snappedBarThickness;
      
      // Döndürülmüş bar genişliği
      final rotatedBarWidth = contentHeight;
      final rotatedBarLeft = -(rotatedBarWidth / 2);
      final rotatedBarRight = (rotatedBarWidth / 2);
      
      // Üst bar çiz (döndürülmüş)
      final topBarRect = RRect.fromLTRBR(
        rotatedBarLeft,
        topBarTop,
        rotatedBarRight,
        topBarBottom,
        Radius.circular(cornerRadius.toDouble()),
      );
      canvas.drawRRect(topBarRect, paint);
      
      // Alt bar çiz (döndürülmüş)
      final bottomBarRect = RRect.fromLTRBR(
        rotatedBarLeft,
        bottomBarTop,
        rotatedBarRight,
        bottomBarBottom,
        Radius.circular(cornerRadius.toDouble()),
      );
      canvas.drawRRect(bottomBarRect, paint);
      
      canvas.restore();
    } else {
      // Yatay bağlantı için normal eşittir işareti
      
      // Üst bar koordinatları
      final topBarTop = centerY - (snappedGap / 2) - snappedBarThickness;
      final topBarBottom = centerY - (snappedGap / 2);
      
      // Alt bar koordinatları
      final bottomBarTop = centerY + (snappedGap / 2);
      final bottomBarBottom = centerY + (snappedGap / 2) + snappedBarThickness;
      
      // Üst bar çiz
      final topBarRect = RRect.fromLTRBR(
        barLeft,
        topBarTop,
        barRight,
        topBarBottom,
        Radius.circular(cornerRadius.toDouble()),
      );
      canvas.drawRRect(topBarRect, paint);
      
      // Alt bar çiz
      final bottomBarRect = RRect.fromLTRBR(
        barLeft,
        bottomBarTop,
        barRight,
        bottomBarBottom,
        Radius.circular(cornerRadius.toDouble()),
      );
      canvas.drawRRect(bottomBarRect, paint);
    }
  }

  @override
  bool shouldRepaint(covariant CustomPainter oldDelegate) {
    if (oldDelegate is! HintsPainter) return true;
    
    // Sadece hints değiştiğinde repaint yap
    if (hints.length != oldDelegate.hints.length) return true;
    
    for (int i = 0; i < hints.length; i++) {
      if (hints[i][0] != oldDelegate.hints[i][0] ||
          hints[i][1] != oldDelegate.hints[i][1] ||
          hints[i][2] != oldDelegate.hints[i][2] ||
          hints[i][3] != oldDelegate.hints[i][3] ||
          (hints[i].length > 4 ? hints[i][4] : 0) != (oldDelegate.hints[i].length > 4 ? oldDelegate.hints[i][4] : 0)) {
        return true;
      }
    }
    
    // Cell size veya gap değiştiğinde repaint yap
    if (cellSize != oldDelegate.cellSize || 
        gap != oldDelegate.gap || 
        cellCount != oldDelegate.cellCount) {
      return true;
    }
    
    return false;
  }
} \n\n===== FILE 153/160: lib/widgets/sikkoku_loading.dart =====\nimport 'package:flutter/material.dart';
import 'dart:math' as math;
import 'dart:ui' as ui;
import 'dart:typed_data';

class SikkokuLoading extends StatefulWidget {
  final double size;
  final Color? background;
  final Color? gridBg;

  const SikkokuLoading({
    Key? key,
    this.size = 240.0,
    this.background,
    this.gridBg,
  }) : super(key: key);

  @override
  State<SikkokuLoading> createState() => _SikkokuLoadingState();
}

class _SikkokuLoadingState extends State<SikkokuLoading>
    with TickerProviderStateMixin {
  late AnimationController _controller;
  late List<Animation<double>> _rotations;
  late List<Animation<double>> _opacities;
  ui.Image? _logoImage;
  Uint8List? _logoBytes;
  ui.Image? _triangleImage;
  ui.Image? _circleImage;

  @override
  void initState() {
    super.initState();
    _controller = AnimationController(
      duration: const Duration(seconds: 2),
      vsync: this,
    );
    
    // Logo1.png'yi yükle
    _loadLogoImage();
    
    // Triangle ve Circle PNG'lerini yükle
    _loadShapeImages();

    // Her hücre için ayrı animasyon
    _rotations = List.generate(9, (index) {
      final start = (index * 0.08).clamp(0.0, 0.7);
      final end = (start + 0.2).clamp(0.0, 1.0);
      return Tween<double>(
        begin: 0.0,
        end: 18.0 * (math.pi / 180), // 18 derece radyan cinsinden
      ).animate(CurvedAnimation(
        parent: _controller,
        curve: Interval(
          start,
          end,
          curve: Curves.easeInOut,
        ),
      ));
    });

    _opacities = List.generate(9, (index) {
      final start = (index * 0.08).clamp(0.0, 0.7);
      final end = (start + 0.2).clamp(0.0, 1.0);
      return Tween<double>(
        begin: 1.0,
        end: 0.3,
      ).animate(CurvedAnimation(
        parent: _controller,
        curve: Interval(
          start,
          end,
          curve: Curves.easeInOut,
        ),
      ));
    });

    _controller.repeat();
  }

  Future<void> _loadShapeImages() async {
    try {
      // Triangle PNG'sini yükle
      final triangleCodec = await ui.instantiateImageCodec(
        await DefaultAssetBundle.of(context).load('assets/images/triangle.png').then((data) => data.buffer.asUint8List())
      );
      _triangleImage = (await triangleCodec.getNextFrame()).image;

      // Circle PNG'sini yükle
      final circleCodec = await ui.instantiateImageCodec(
        await DefaultAssetBundle.of(context).load('assets/images/circle.png').then((data) => data.buffer.asUint8List())
      );
      _circleImage = (await circleCodec.getNextFrame()).image;

      if (mounted) {
        setState(() {});
      }
    } catch (e) {
      print('Shape görsel yükleme hatası: $e');
    }
  }

  Future<void> _loadLogoImage() async {
    try {
      // Logo1.png'yi yükle
      final logoCodec = await ui.instantiateImageCodec(
        await DefaultAssetBundle.of(context).load('assets/images/logo1.png').then((data) => data.buffer.asUint8List())
      );
      _logoImage = (await logoCodec.getNextFrame()).image;
      
      // Logo bytes'ını cache'le
      _logoBytes = await _logoImage!.toByteData(format: ui.ImageByteFormat.png).then((data) => data!.buffer.asUint8List());

      if (mounted) {
        setState(() {});
      }
    } catch (e) {
      print('Logo yükleme hatası: $e');
    }
  }

  @override
  void dispose() {
    _controller.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Container(
      width: widget.size,
      height: widget.size,
      child: _logoBytes != null
          ? Image.memory(
              _logoBytes!,
              width: widget.size,
              height: widget.size,
              fit: BoxFit.contain,
            )
          : Container(
              width: widget.size,
              height: widget.size,
              color: Colors.transparent,
            ),
    );
  }
}

class ShapeOverlayPainter extends CustomPainter {
  final List<Animation<double>> rotations;
  final List<Animation<double>> opacities;
  final ui.Image? triangleImage;
  final ui.Image? circleImage;

  ShapeOverlayPainter({
    required this.rotations,
    required this.opacities,
    this.triangleImage,
    this.circleImage,
  }) : super(repaint: Listenable.merge([...rotations, ...opacities]));

  @override
  void paint(Canvas canvas, Size size) {
    final paint = Paint();
    final cellSize = size.width / 3;
    final center = Offset(size.width / 2, size.height / 2);

    // Arka plan yok - sadece shape'ler

    // Hücreleri çiz
    for (int row = 0; row < 3; row++) {
      for (int col = 0; col < 3; col++) {
        final index = row * 3 + col;
        final cellCenter = Offset(
          col * cellSize + cellSize / 2,
          row * cellSize + cellSize / 2,
        );

        canvas.save();
        canvas.translate(cellCenter.dx, cellCenter.dy);
        canvas.rotate(rotations[index].value);
        canvas.translate(-cellCenter.dx, -cellCenter.dy);

        // Desen: [O, △, O] [△, O, △] [O, △, O]
        if ((row + col) % 2 == 0) {
          // Circle PNG - mavi hücrelerde
          if (circleImage != null) {
            final imageSize = cellSize * 0.4;
            final srcRect = Rect.fromLTWH(0, 0, circleImage!.width.toDouble(), circleImage!.height.toDouble());
            final dstRect = Rect.fromCenter(
              center: cellCenter,
              width: imageSize,
              height: imageSize,
            );
            
            // Circle'ı opacity ile çiz
            paint.colorFilter = ColorFilter.mode(
              Colors.white.withOpacity(opacities[index].value),
              BlendMode.srcATop,
            );
            canvas.drawImageRect(
              circleImage!,
              srcRect,
              dstRect,
              paint,
            );
          }
        } else {
          // Triangle PNG - sarı hücrelerde
          if (triangleImage != null) {
            final imageSize = cellSize * 0.4;
            final srcRect = Rect.fromLTWH(0, 0, triangleImage!.width.toDouble(), triangleImage!.height.toDouble());
            final dstRect = Rect.fromCenter(
              center: cellCenter,
              width: imageSize,
              height: imageSize,
            );
            
            // Triangle'ı opacity ile çiz
            paint.colorFilter = ColorFilter.mode(
              Colors.white.withOpacity(opacities[index].value),
              BlendMode.srcATop,
            );
            canvas.drawImageRect(
              triangleImage!,
              srcRect,
              dstRect,
              paint,
            );
          }
        }

        canvas.restore();
      }
    }
  }

  void _drawDiamond(Canvas canvas, Offset center, double size, Paint paint) {
    final path = Path();
    path.moveTo(center.dx, center.dy - size); // Üst
    path.lineTo(center.dx + size, center.dy); // Sağ
    path.lineTo(center.dx, center.dy + size); // Alt
    path.lineTo(center.dx - size, center.dy); // Sol
    path.close();
    canvas.drawPath(path, paint);
  }

  @override
  bool shouldRepaint(covariant CustomPainter oldDelegate) => true;
}
\n\n===== FILE 154/160: lib/widgets/sound_control.dart =====\nimport 'package:flutter/material.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import '../theme/app_themes.dart';
import '../audio/audio_gateway.dart';
import '../settings/settings_cubit.dart';
import '../settings/settings_state.dart';

class SoundControl extends StatefulWidget {
  final double? size;
  final Color? color;
  final EdgeInsets? padding;

  const SoundControl({
    Key? key,
    this.size,
    this.color,
    this.padding,
  }) : super(key: key);

  @override
  State<SoundControl> createState() => _SoundControlState();
}

class _SoundControlState extends State<SoundControl> {
  @override
  Widget build(BuildContext context) {
    return BlocBuilder<SettingsCubit, SettingsState>(
      builder: (context, settingsState) {
        final isSoundOn = settingsState.model.musicOn && settingsState.model.sfxOn;
        
        return _buildSoundControl(context, isSoundOn);
      },
    );
  }

  Future<void> _toggleSound() async {
    final settingsCubit = context.read<SettingsCubit>();
    
    // Hem müzik hem de SFX'i aynı anda aç/kapat
    final currentMusic = settingsCubit.state.model.musicOn;
    final currentSfx = settingsCubit.state.model.sfxOn;
    
    // Eğer ikisi de açıksa, ikisini de kapat
    // Eğer ikisi de kapalıysa, ikisini de aç
    // Eğer biri açık biri kapalıysa, ikisini de aç
    if (currentMusic && currentSfx) {
      // İkisi de açık -> ikisini de kapat
      await settingsCubit.toggleMusic();
      await settingsCubit.toggleSfx();
    } else {
      // En az biri kapalı -> ikisini de aç
      if (!currentMusic) await settingsCubit.toggleMusic();
      if (!currentSfx) await settingsCubit.toggleSfx();
    }
  }

  Widget _buildSoundControl(BuildContext context, bool isSoundOn) {
    final screenHeight = MediaQuery.of(context).size.height;
    final screenWidth = MediaQuery.of(context).size.width;
    final pal = Theme.of(context).extension<AppPalette>();
    
    // Tema renklerini kullan
    final iconColor = widget.color ?? (pal?.counterTextColor ?? Colors.white.withOpacity(0.7));
    final backgroundColor = pal != null 
        ? (Theme.of(context).brightness == Brightness.light 
            ? Colors.white.withOpacity(0.8) 
            : Colors.black.withOpacity(0.3))
        : Colors.black.withOpacity(0.3);
    
    return Padding(
      padding: widget.padding ?? EdgeInsets.only(
        bottom: screenHeight * 0.04,
        right: screenWidth * 0.04,
      ),
      child: IconButton(
        icon: Icon(
          isSoundOn ? Icons.volume_up_rounded : Icons.volume_off_rounded,
          color: iconColor,
          size: widget.size ?? screenHeight * 0.035,
        ),
        onPressed: _toggleSound,
        style: IconButton.styleFrom(
          backgroundColor: backgroundColor,
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(12),
          ),
        ),
      ),
    );
  }
} \n\n===== FILE 155/160: lib/widgets/stage_button.dart =====\nimport 'package:flutter/material.dart';
import 'package:auto_route/auto_route.dart';
import '../routes/app_router.dart';
import '../services/level_progress_service.dart';

class StageButton extends StatefulWidget {
  final int level;
  final int stage;
  const StageButton({super.key, required this.level, this.stage = 1});

  @override
  State<StageButton> createState() => _StageButtonState();
}

class _StageButtonState extends State<StageButton> with SingleTickerProviderStateMixin {
  late AnimationController _animationController;
  late Animation<double> _scaleAnimation;
  bool _isUnlocked = false;
  int _starCount = 0;
  bool _isLoading = true;

  @override
  void initState() {
    super.initState();
    _animationController = AnimationController(
      duration: const Duration(milliseconds: 150),
      vsync: this,
    );
    _scaleAnimation = Tween<double>(
      begin: 1.0,
      end: 0.8,
    ).animate(CurvedAnimation(
      parent: _animationController,
      curve: Curves.easeInOut,
    ));
    
    _loadLevelData();
  }

  Future<void> _loadLevelData() async {
    final isUnlocked = await LevelProgressService.isLevelUnlocked(widget.level);
    final starCount = await LevelProgressService.getStars(widget.level);
    
    print('DEBUG StageButton: Level ${widget.level}, Unlocked: $isUnlocked, Stars: $starCount');
    
    if (mounted) {
      setState(() {
        _isUnlocked = isUnlocked;
        _starCount = starCount;
        _isLoading = false;
      });
    }
  }

  @override
  void dispose() {
    _animationController.dispose();
    super.dispose();
  }

  void _onTap() async {
    if (!_isUnlocked) {
      await _animationController.forward();
      await _animationController.reverse();
      return;
    }

    await _animationController.forward();
    await _animationController.reverse();
    
    print('Stage ${widget.level} tapped');
    if (mounted) {
      context.router.push(GameRoute(stage: widget.stage, level: widget.level));
    }
  }

  @override
  Widget build(BuildContext context) {
    if (_isLoading) {
      return const SizedBox(
        width: 40,
        height: 40,
        child: Center(
          child: CircularProgressIndicator(
            strokeWidth: 2,
            valueColor: AlwaysStoppedAnimation<Color>(Colors.white),
          ),
        ),
      );
    }

    return GestureDetector(
      onTap: _isUnlocked ? _onTap : null,
      child: AnimatedBuilder(
        animation: _scaleAnimation,
        builder: (context, child) {
          return Transform.scale(
            scale: _scaleAnimation.value,
            child: LayoutBuilder(
              builder: (context, constraints) {
                final screenWidth = MediaQuery.of(context).size.width;
                final screenHeight = MediaQuery.of(context).size.height;
                final buttonSize = (screenWidth + screenHeight) * 0.02;
                final fontSize = buttonSize * 0.4;
                final borderWidth = buttonSize * 0.05;
                
                return Column(
                  mainAxisSize: MainAxisSize.min,
                  children: [
                    // Ana buton
                    Stack(
                      children: [
                        Container(
                          width: buttonSize,
                          height: buttonSize,
                          decoration: BoxDecoration(
                            color: _isUnlocked ? Colors.blueAccent : Colors.grey.shade600,
                            shape: BoxShape.circle,
                            border: Border.all(
                              color: _isUnlocked ? Colors.white : Colors.grey.shade400,
                              width: borderWidth,
                            ),
                            boxShadow: [
                              BoxShadow(
                                color: (_isUnlocked ? Colors.blueAccent : Colors.grey).withOpacity(0.3),
                                blurRadius: 8,
                                spreadRadius: 2,
                              ),
                            ],
                          ),
                          alignment: Alignment.center,
                          child: Text(
                            '${widget.level}',
                            style: TextStyle(
                              color: Colors.white,
                              fontWeight: FontWeight.bold,
                              fontSize: fontSize,
                            ),
                          ),
                        ),
                        // Kilit ikonu (sadece kilitli level'lar için)
                        if (!_isUnlocked)
                          Positioned(
                            top: 0,
                            right: 0,
                            child: Icon(
                              Icons.lock_outline,
                              color: Colors.grey,
                              size: fontSize * 0.6,
                            ),
                          ),
                      ],
                    ),
                    
                    // Yıldız göstergesi
                    if (_starCount > 0) ...[
                      const SizedBox(height: 6),
                      Row(
                        mainAxisSize: MainAxisSize.min,
                        mainAxisAlignment: MainAxisAlignment.center,
                        children: List.generate(_starCount, (index) => 
                          Icon(Icons.star, color: Colors.yellow, size: 16)
                        ),
                      ),
                    ],
                  ],
                );
              },
            ),
          );
        },
      ),
    );
  }
} \n\n===== FILE 156/160: lib/widgets/star_indicator.dart =====\nimport 'package:flutter/material.dart';

class StarIndicator extends StatelessWidget {
  final int starCount;
  final double size;
  final Color? starColor;
  final Color? emptyStarColor;

  const StarIndicator({
    super.key,
    required this.starCount,
    this.size = 12.0,
    this.starColor,
    this.emptyStarColor,
  });

  @override
  Widget build(BuildContext context) {
    final effectiveStarColor = starColor ?? const Color(0xFFFFD700);
    final effectiveEmptyStarColor = emptyStarColor ?? Colors.grey.shade400;

    return Row(
      mainAxisSize: MainAxisSize.min,
      children: List.generate(3, (index) {
        final isFilled = index < starCount;
        return Icon(
          isFilled ? Icons.star : Icons.star_border,
          size: size,
          color: isFilled ? effectiveStarColor : effectiveEmptyStarColor,
        );
      }),
    );
  }
}\n\n===== FILE 157/160: lib/widgets/success_dialog_widget.dart =====\nimport 'package:flutter/material.dart';
import 'package:auto_route/auto_route.dart';
import '../routes/app_router.dart';
import '../bloc/level_progress_cubit.dart';
import '../bloc/game_stats_cubit.dart';
import '../l10n/app_localizations.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'dart:math';
import '../inventory/inventory_cubit.dart';
import 'package:shared_preferences/shared_preferences.dart';

class SuccessDialogWidget {
  static Future<void> show({
    required BuildContext context,
    required int level,
    required int elapsedSeconds,
    required int stage,
    required bool isDaily,
    required bool isWeekly,
    required VoidCallback onBackToMenu,
  }) async {
    final stars = _calculateStars(elapsedSeconds);
    final l10n = AppLocalizations.of(context)!;
    
    // Günlük ve haftalık bulmaca için rastgele ödül seç
    String? dailyReward;
    String? weeklyReward;
    bool canClaimDailyReward = false;
    bool canClaimWeeklyReward = false;
    
    if (isDaily) {
      // Günlük bulmaca ödülü daha önce alınmış mı kontrol et
      canClaimDailyReward = await _canClaimDailyReward();
      if (canClaimDailyReward) {
        final rewards = ['Hint', 'Check', 'Undo'];
        dailyReward = rewards[Random().nextInt(rewards.length)];
      }
    }
    
    if (isWeekly) {
      // Haftalık bulmaca ödülü daha önce alınmış mı kontrol et
      canClaimWeeklyReward = await _canClaimWeeklyReward();
      if (canClaimWeeklyReward) {
        final rewards = ['Hint', 'Check', 'Undo'];
        weeklyReward = rewards[Random().nextInt(rewards.length)];
      }
    }
    
    showDialog(
      context: context,
      barrierDismissible: false,
      builder: (context) => AlertDialog(
        backgroundColor: Colors.black.withOpacity(0.9),
        shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(16)),
        title: Text(
          '${l10n.winsCongratsTitle} 🎉',
          style: TextStyle(color: Colors.white, fontWeight: FontWeight.bold),
          textAlign: TextAlign.center,
        ),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            Text(
              AppLocalizations.of(context)!.puzzleCompletedIn(_formatTime(elapsedSeconds)),
              style: TextStyle(color: Colors.white),
              textAlign: TextAlign.center,
            ),
            SizedBox(height: 16),
            // Günlük bulmaca için ödül, normal seviyeler için yıldız
            if (isDaily) ...[
              if (canClaimDailyReward) ...[
                Text(
                  '🎁 ${AppLocalizations.of(context)!.rewardEarned(dailyReward!)}',
                  style: TextStyle(color: Colors.green, fontSize: 16, fontWeight: FontWeight.bold),
                  textAlign: TextAlign.center,
                ),
                SizedBox(height: 8),
                Icon(
                  _getRewardIcon(dailyReward!),
                  color: Colors.green,
                  size: 32,
                ),
                SizedBox(height: 8),
                Text(
                  AppLocalizations.of(context)!.congratulationsReward(dailyReward!),
                  style: TextStyle(color: Colors.green, fontSize: 12),
                  textAlign: TextAlign.center,
                ),
              ] else ...[
                Text(
                  '🎁 ${AppLocalizations.of(context)!.dailyRewardTitle}',
                  style: TextStyle(color: Colors.orange, fontSize: 16, fontWeight: FontWeight.bold),
                  textAlign: TextAlign.center,
                ),
                SizedBox(height: 8),
                Icon(
                  Icons.check_circle,
                  color: Colors.orange,
                  size: 32,
                ),
                SizedBox(height: 8),
                Text(
                  AppLocalizations.of(context)!.alreadyCompletedDaily,
                  style: TextStyle(color: Colors.orange, fontSize: 12),
                  textAlign: TextAlign.center,
                ),
              ],
            ] else if (isWeekly) ...[
              if (canClaimWeeklyReward) ...[
                Text(
                  '🎁 ${AppLocalizations.of(context)!.rewardEarned(weeklyReward!)}',
                  style: TextStyle(color: Colors.purple, fontSize: 16, fontWeight: FontWeight.bold),
                  textAlign: TextAlign.center,
                ),
                SizedBox(height: 8),
                Icon(
                  _getRewardIcon(weeklyReward!),
                  color: Colors.purple,
                  size: 32,
                ),
                SizedBox(height: 8),
                Text(
                  AppLocalizations.of(context)!.congratulationsReward(weeklyReward!),
                  style: TextStyle(color: Colors.purple, fontSize: 12),
                  textAlign: TextAlign.center,
                ),
              ] else ...[
                Text(
                  '🎁 ${AppLocalizations.of(context)!.weeklyRewardTitle}',
                  style: TextStyle(color: Colors.purple, fontSize: 16, fontWeight: FontWeight.bold),
                  textAlign: TextAlign.center,
                ),
                SizedBox(height: 8),
                Icon(
                  Icons.check_circle,
                  color: Colors.orange,
                  size: 32,
                ),
                SizedBox(height: 8),
                Text(
                  AppLocalizations.of(context)!.alreadyCompletedWeekly,
                  style: TextStyle(color: Colors.orange, fontSize: 12),
                  textAlign: TextAlign.center,
                ),
              ],
            ] else ...[
              Text(
                '⭐ Kazanılan Yıldız: $stars',
                style: TextStyle(color: Colors.amber, fontSize: 16, fontWeight: FontWeight.bold),
                textAlign: TextAlign.center,
              ),
              SizedBox(height: 8),
              Row(
                mainAxisAlignment: MainAxisAlignment.center,
                children: List.generate(stars, (_) => 
                  Icon(Icons.star, color: Colors.amber, size: 24)
                ),
              ),
              SizedBox(height: 8),
              Text(
                _getStarMessage(stars, context),
                style: TextStyle(color: Colors.amber, fontSize: 12),
                textAlign: TextAlign.center,
              ),
            ],
          ],
        ),
        actions: [
          // Günlük ve haftalık bulmaca için ödülü al butonu
          if (isDaily && canClaimDailyReward) ...[
            TextButton(
              onPressed: () async {
                // Direkt reklam izle ve ödülü al
                await _watchAdAndClaimReward(context, dailyReward!, isDaily: true);
              },
              child: Text(
                AppLocalizations.of(context)!.claimReward,
                style: TextStyle(color: Colors.green, fontWeight: FontWeight.bold),
              ),
            ),
          ],
          if (isWeekly && canClaimWeeklyReward) ...[
            TextButton(
              onPressed: () async {
                // Direkt reklam izle ve ödülü al
                await _watchAdAndClaimReward(context, weeklyReward!, isWeekly: true);
              },
              child: Text(
                AppLocalizations.of(context)!.claimReward,
                style: TextStyle(color: Colors.purple, fontWeight: FontWeight.bold),
              ),
            ),
          ],
          TextButton(
            onPressed: () async {
              print('=== SUCCESS DIALOG DEBUG ===');
              print('Level: $level, Elapsed: $elapsedSeconds');
              
              // GameStatsCubit'i al
              final gameStatsCubit = context.read<GameStatsCubit>();
              
              if (isDaily) {
                // Günlük puzzle tamamlandı
                await gameStatsCubit.onDailyCompleted(elapsedSeconds);
                print('Daily puzzle completed, stats updated');
              } else if (isWeekly) {
                // Haftalık puzzle tamamlandı
                await gameStatsCubit.onWeeklyCompleted(elapsedSeconds);
                print('Weekly puzzle completed, stats updated');
              } else {
                // Normal level tamamlandı
                await gameStatsCubit.onLevelCompleted(level, elapsedSeconds);
                print('Normal level completed, stats updated');
                // LevelProgress için yıldızları da güncelle (map üzerindeki yıldızlar için)
                final levelProgressCubit = context.read<LevelProgressCubit>();
                await levelProgressCubit.onLevelCompleted(level, elapsedSeconds);
              }
              
              Navigator.of(context).pop();
              
              // MapScreen'e dön
              onBackToMenu();
              
              // Haritayı yenile
              await Future.delayed(Duration(milliseconds: 200));
              if (context.mounted) {
                context.router.replace(MapRoute(stage: stage));
              }
              
              print('=== SUCCESS DIALOG END ===');
            },
            child: Text(
              AppLocalizations.of(context)!.continueButton,
              style: TextStyle(color: Colors.blue),
            ),
          ),
        ],
      ),
    );
  }

  static String _formatTime(int seconds) {
    int minutes = seconds ~/ 60;
    int remainingSeconds = seconds % 60;
    return '${minutes.toString().padLeft(2, '0')}:${remainingSeconds.toString().padLeft(2, '0')}';
  }

  static String _getStarMessage(int starCount, BuildContext context) {
    final l10n = AppLocalizations.of(context)!;
    switch (starCount) {
      case 3:
        return l10n.perfect3Stars;
      case 2:
        return l10n.great2Stars;
      case 1:
        return l10n.good1Star;
      default:
        return l10n.puzzleCompleted;
    }
  }

  // Yıldız hesaplama mantığı
  static int _calculateStars(int elapsedSeconds) {
    // Yeni kural:
    // <45 sn => 3 yıldız
    // 45..70 sn (70 dahil) => 2 yıldız
    // >70 sn => 1 yıldız
    if (elapsedSeconds < 45) return 3;
    if (elapsedSeconds <= 70) return 2;
    return 1;
  }

  // Ödül ikonu getir
  static IconData _getRewardIcon(String reward) {
    switch (reward) {
      case 'Hint':
        return Icons.lightbulb;
      case 'Check':
        return Icons.check_circle;
      case 'Undo':
        return Icons.undo;
      default:
        return Icons.card_giftcard;
    }
  }


  // Reklam izle ve ödülü al
  static Future<void> _watchAdAndClaimReward(BuildContext context, String reward, {bool isDaily = false, bool isWeekly = false}) async {
    // Reklam izleme simülasyonu
    showDialog(
      context: context,
      barrierDismissible: false,
      builder: (context) => AlertDialog(
        backgroundColor: Colors.black.withOpacity(0.9),
        shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(16)),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            CircularProgressIndicator(color: Colors.blue),
            SizedBox(height: 16),
            Text(
              'Reklam izleniyor...',
              style: TextStyle(color: Colors.white),
              textAlign: TextAlign.center,
            ),
          ],
        ),
      ),
    );

    // 1.5 saniye reklam simülasyonu (daha hızlı)
    await Future.delayed(Duration(milliseconds: 1500));

    if (context.mounted) {
      Navigator.of(context).pop(); // Loading dialog'u kapat
      
      // Ödülü envantere ekle
      await _addRewardToInventory(context, reward, isDaily: isDaily, isWeekly: isWeekly);
      
      // Başarı mesajı göster
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text(
            'Reklam izlendi! $reward ödülü envanterinize eklendi!',
            style: TextStyle(color: Colors.white, fontWeight: FontWeight.bold),
          ),
          backgroundColor: Colors.green.shade700,
          duration: Duration(seconds: 3),
          behavior: SnackBarBehavior.floating,
          margin: EdgeInsets.all(16),
          shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(8)),
        ),
      );
      
      // Success dialog'u kapat
      Navigator.of(context).pop();
      
      // MapScreen'e dön
      context.router.navigate(MapRoute());
    }
  }

  // Ödülü envantere ekle
  static Future<void> _addRewardToInventory(BuildContext context, String reward, {bool isDaily = false, bool isWeekly = false}) async {
    try {
      final inventoryCubit = context.read<InventoryCubit>();
      
      switch (reward) {
        case 'Hint':
          await inventoryCubit.addHints(1);
          print('Daily reward added to inventory: 1 Hint');
          break;
        case 'Check':
          await inventoryCubit.addChecks(1);
          print('Daily reward added to inventory: 1 Check');
          break;
        case 'Undo':
          await inventoryCubit.addUndos(1);
          print('Daily reward added to inventory: 1 Undo');
          break;
      }
      
      // Ödül alındı olarak işaretle (günlük veya haftalık)
      if (isDaily) {
        await _markDailyRewardClaimed();
      } else if (isWeekly) {
        await _markWeeklyRewardClaimed();
      }
    } catch (e) {
      print('Error adding reward to inventory: $e');
    }
  }

  // Günlük ödül alınabilir mi kontrol et
  static Future<bool> _canClaimDailyReward() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final today = DateTime.now();
      final todayKey = 'daily_reward_${today.year}_${today.month}_${today.day}';
      
      final claimed = prefs.getBool(todayKey) ?? false;
      return !claimed;
    } catch (e) {
      print('Error checking daily reward claim: $e');
      return true; // Hata durumunda ödül ver
    }
  }

  // Günlük ödül alındı olarak işaretle
  static Future<void> _markDailyRewardClaimed() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final today = DateTime.now();
      final todayKey = 'daily_reward_${today.year}_${today.month}_${today.day}';
      
      await prefs.setBool(todayKey, true);
      print('Daily reward marked as claimed for ${todayKey}');
    } catch (e) {
      print('Error marking daily reward as claimed: $e');
    }
  }

  // Haftalık ödül alınabilir mi kontrol et
  static Future<bool> _canClaimWeeklyReward() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final now = DateTime.now();
      // Haftalık bulmaca için haftanın başlangıcını al (Pazartesi)
      final monday = now.subtract(Duration(days: (now.weekday + 6) % 7));
      final weekKey = 'weekly_reward_${monday.year}_${monday.month}_${monday.day}';
      
      final claimed = prefs.getBool(weekKey) ?? false;
      return !claimed;
    } catch (e) {
      print('Error checking weekly reward claim: $e');
      return true; // Hata durumunda ödül ver
    }
  }

  // Haftalık ödül alındı olarak işaretle
  static Future<void> _markWeeklyRewardClaimed() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final now = DateTime.now();
      // Haftalık bulmaca için haftanın başlangıcını al (Pazartesi)
      final monday = now.subtract(Duration(days: (now.weekday + 6) % 7));
      final weekKey = 'weekly_reward_${monday.year}_${monday.month}_${monday.day}';
      
      await prefs.setBool(weekKey, true);
      print('Weekly reward marked as claimed for ${weekKey}');
    } catch (e) {
      print('Error marking weekly reward as claimed: $e');
    }
  }
} \n\n===== FILE 158/160: lib/widgets/symbol_equal.dart =====\nimport 'package:flutter/material.dart';
import 'dart:ui' as ui;

class EqualIcon extends StatelessWidget {
  final double size;
  final Color color;
  final double barThickness;
  final double gap;
  final double cornerRadius;

  const EqualIcon({
    Key? key,
    this.size = 44,
    this.color = Colors.white,
    this.barThickness = 6,
    this.gap = 8,
    this.cornerRadius = 999,
  }) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return RepaintBoundary(
      child: CustomPaint(
        size: Size(size, size),
        painter: _EqualIconPainter(
          color: color,
          barThickness: barThickness,
          gap: gap,
          cornerRadius: cornerRadius,
        ),
      ),
    );
  }
}

class _EqualIconPainter extends CustomPainter {
  final Color color;
  final double barThickness;
  final double gap;
  final double cornerRadius;

  _EqualIconPainter({
    required this.color,
    required this.barThickness,
    required this.gap,
    required this.cornerRadius,
  });

  @override
  void paint(Canvas canvas, Size size) {
    final dpr = ui.PlatformDispatcher.instance.views.first.devicePixelRatio;
    
    // Yardımcı fonksiyonlar
    double toPhysical(double logical) => logical * dpr;
    double toLogical(double physical) => physical / dpr;
    double snap(double logical) => toLogical(toPhysical(logical).roundToDouble());
    
    double snappedThickness(double logicalThickness) {
      final phys = (logicalThickness * dpr).round().clamp(1, 10000);
      return phys / dpr;
    }

    // Güvenli iç boşluk (%12 padding)
    final padding = size.width * 0.12;
    final contentWidth = size.width - (padding * 2);
    final contentHeight = size.height - (padding * 2);
    
    // Merkez koordinatları
    final centerX = size.width / 2;
    final centerY = size.height / 2;
    
    // Bar kalınlığını pixel-snap et
    final snappedBarThickness = snappedThickness(barThickness);
    final snappedGap = snap(gap);
    
    // Üst bar koordinatları
    final topBarTop = centerY - (snappedGap / 2) - snappedBarThickness;
    final topBarBottom = centerY - (snappedGap / 2);
    
    // Alt bar koordinatları
    final bottomBarTop = centerY + (snappedGap / 2);
    final bottomBarBottom = centerY + (snappedGap / 2) + snappedBarThickness;
    
    // Bar genişliği
    final barWidth = contentWidth;
    final barLeft = centerX - (barWidth / 2);
    final barRight = centerX + (barWidth / 2);
    
    // Paint objesi
    final paint = Paint()
      ..color = color
      ..style = PaintingStyle.fill;
    
    // Üst bar çiz
    final topBarRect = RRect.fromLTRBR(
      barLeft,
      topBarTop,
      barRight,
      topBarBottom,
      Radius.circular(cornerRadius),
    );
    canvas.drawRRect(topBarRect, paint);
    
    // Alt bar çiz
    final bottomBarRect = RRect.fromLTRBR(
      barLeft,
      bottomBarTop,
      barRight,
      bottomBarBottom,
      Radius.circular(cornerRadius),
    );
    canvas.drawRRect(bottomBarRect, paint);
  }

  @override
  bool shouldRepaint(covariant _EqualIconPainter oldDelegate) {
    return color != oldDelegate.color ||
           barThickness != oldDelegate.barThickness ||
           gap != oldDelegate.gap ||
           cornerRadius != oldDelegate.cornerRadius;
  }
}

// Demo Screen (sadece geliştirme/test için)
class SymbolEqualDemoScreen extends StatelessWidget {
  const SymbolEqualDemoScreen({Key? key}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Colors.black,
      appBar: AppBar(
        title: const Text('Equal Icon Demo'),
        backgroundColor: Colors.grey[900],
        foregroundColor: Colors.white,
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            _buildDemoRow(24, 'Size 24'),
            const SizedBox(height: 40),
            _buildDemoRow(28, 'Size 28'),
            const SizedBox(height: 40),
            _buildDemoRow(32, 'Size 32'),
            const SizedBox(height: 40),
            _buildDemoRow(44, 'Size 44'),
          ],
        ),
      ),
    );
  }

  Widget _buildDemoRow(double size, String label) {
    return Row(
      mainAxisAlignment: MainAxisAlignment.center,
      children: [
        Column(
          children: [
            Text(
              label,
              style: const TextStyle(color: Colors.white, fontSize: 16),
            ),
            const SizedBox(height: 8),
            EqualIcon(size: size),
          ],
        ),
        const SizedBox(width: 40),
        Column(
          children: [
            const Text(
              'Zoomed 2.2x',
              style: TextStyle(color: Colors.white, fontSize: 16),
            ),
            const SizedBox(height: 8),
            Transform.scale(
              scale: 2.2,
              child: EqualIcon(size: size),
            ),
          ],
        ),
      ],
    );
  }
}
\n\n===== FILE 159/160: lib/widgets/theme_toggle_button.dart =====\nimport 'dart:math' as math;

import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';

import '../bloc/theme_cubit.dart';
import '../bloc/theme_state.dart';

class ThemeToggleButton extends StatelessWidget {
  const ThemeToggleButton({super.key});

  @override
  Widget build(BuildContext context) {
    return BlocBuilder<ThemeCubit, ThemeState>(
      builder: (context, state) {
        final size = MediaQuery.sizeOf(context);
        final base = math.min(size.width, size.height);
        final double buttonSize = (base * 0.08).clamp(36.0, 56.0);

        final bool isDark = state.themeMode == ThemeMode.dark;
        final icon = isDark ? Icons.wb_sunny_outlined : Icons.nightlight_round;
        final ColorScheme scheme = Theme.of(context).colorScheme;

        return Material(
          color: Colors.transparent,
          child: Container
            (
            width: buttonSize,
            height: buttonSize,
            decoration: BoxDecoration(
              color: scheme.surface.withOpacity(0.9),
              shape: BoxShape.circle,
              boxShadow: [
                BoxShadow(
                  color: Colors.black.withOpacity(0.2),
                  blurRadius: 8,
                  offset: const Offset(0, 2),
                )
              ],
            ),
            child: IconButton(
              onPressed: () => context.read<ThemeCubit>().toggleTheme(),
              icon: Icon(icon,
                  size: buttonSize * 0.5,
                  color: isDark ? Colors.amber : Colors.blueGrey.shade700),
            ),
          ),
        );
      },
    );
  }
}
\n\n===== FILE 160/160: lib/widgets/universe_selector.dart =====\nimport 'package:flutter/material.dart';
import 'package:google_fonts/google_fonts.dart';
import '../config/universe_config.dart';
import '../l10n/app_localizations.dart';

class UniverseSelector extends StatefulWidget {
  final int currentUniverseId;
  final Function(int) onUniverseSelected;

  const UniverseSelector({
    Key? key,
    required this.currentUniverseId,
    required this.onUniverseSelected,
  }) : super(key: key);

  @override
  State<UniverseSelector> createState() => _UniverseSelectorState();
}

class _UniverseSelectorState extends State<UniverseSelector> {
  
  Future<List<bool>> _getUniverseUnlockStatus() async {
    final List<bool> unlockStatus = [];
    
    for (int i = 1; i <= UniverseConfig.getUniverseCount(); i++) {
      final isUnlocked = await UniverseConfig.isUniverseUnlockedFromPrefs(i);
      unlockStatus.add(isUnlocked);
    }
    
    return unlockStatus;
  }

  @override
  Widget build(BuildContext context) {
    final screenSize = MediaQuery.of(context).size;
    final maxWidth = screenSize.width * 0.9;
    final dialogWidth = maxWidth > 400 ? 400.0 : maxWidth;

    return Center(
      child: Material(
        color: Colors.transparent,
        child: Container(
          width: dialogWidth,
          padding: const EdgeInsets.all(20),
          decoration: BoxDecoration(
            color: Colors.black.withOpacity(0.85),
            borderRadius: BorderRadius.circular(20),
            boxShadow: [
              BoxShadow(
                color: Colors.black.withOpacity(0.3),
                blurRadius: 20,
                spreadRadius: 2,
              ),
            ],
          ),
          child: Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              // Başlık
              Text(
                AppLocalizations.of(context)!.selectUniverse,
                style: GoogleFonts.poppins(
                  fontSize: 24,
                  fontWeight: FontWeight.bold,
                  color: Colors.white,
                ),
              ),
              const SizedBox(height: 20),
              
              // Evren listesi
              FutureBuilder<List<bool>>(
                future: _getUniverseUnlockStatus(),
                builder: (context, snapshot) {
                  if (!snapshot.hasData) {
                    return const Center(child: CircularProgressIndicator());
                  }
                  
                  final unlockStatus = snapshot.data!;
                  return Column(
                    children: UniverseConfig.getAllUniverses(context).asMap().entries.map((entry) {
                      final index = entry.key;
                      final universe = entry.value;
                      final universeId = index + 1; // Index + 1 = Universe ID
                      final isSelected = universeId == widget.currentUniverseId;
                      final isUnlocked = unlockStatus[index];
                
                      return _UniverseCard(
                        universe: universe,
                        universeId: universeId,
                        isSelected: isSelected,
                        isUnlocked: isUnlocked,
                        onTap: isUnlocked ? () {
                          Navigator.of(context).pop();
                          widget.onUniverseSelected(universeId);
                        } : null,
                      );
                    }).toList(),
                  );
                },
              ),
              
              const SizedBox(height: 10),
              
              // Kapat butonu
              TextButton(
                onPressed: () => Navigator.of(context).pop(),
                child: Text(
                  AppLocalizations.of(context)!.close,
                  style: GoogleFonts.poppins(
                    color: Colors.white70,
                    fontSize: 16,
                  ),
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }
}

class _UniverseCard extends StatelessWidget {
  final UniverseData universe;
  final int universeId;
  final bool isSelected;
  final bool isUnlocked;
  final VoidCallback? onTap;

  const _UniverseCard({
    required this.universe,
    required this.universeId,
    required this.isSelected,
    required this.isUnlocked,
    this.onTap,
  });

  @override
  Widget build(BuildContext context) {
    return Container(
      margin: const EdgeInsets.only(bottom: 12),
      child: Material(
        color: Colors.transparent,
        child: InkWell(
          onTap: onTap,
          borderRadius: BorderRadius.circular(16),
          child: Container(
            padding: const EdgeInsets.all(16),
            decoration: BoxDecoration(
              borderRadius: BorderRadius.circular(16),
              border: Border.all(
                color: isSelected 
                  ? Colors.amber 
                  : isUnlocked 
                    ? Colors.white.withOpacity(0.3)
                    : Colors.grey.withOpacity(0.3),
                width: isSelected ? 2 : 1,
              ),
              color: isUnlocked 
                ? (isSelected ? Colors.amber.withOpacity(0.1) : Colors.white.withOpacity(0.05))
                : Colors.grey.withOpacity(0.1),
            ),
            child: Row(
              children: [
                // Evren ikonu/önizleme
                Container(
                  width: 60,
                  height: 60,
                  decoration: BoxDecoration(
                    borderRadius: BorderRadius.circular(12),
                    image: isUnlocked 
                      ? DecorationImage(
                          image: AssetImage(universe.backgroundImage),
                          fit: BoxFit.cover,
                        )
                      : null,
                    color: isUnlocked ? null : Colors.grey.withOpacity(0.3),
                  ),
                  child: !isUnlocked 
                    ? Icon(
                        Icons.lock,
                        color: Colors.grey.shade600,
                        size: 30,
                      )
                    : null,
                ),
                
                const SizedBox(width: 16),
                
                // Evren bilgileri
                Expanded(
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Row(
                        children: [
                          Expanded(
                            child: Text(
                              universe.name,
                              style: GoogleFonts.poppins(
                                fontSize: 18,
                                fontWeight: FontWeight.w600,
                                color: isUnlocked ? Colors.white : Colors.grey.shade400,
                              ),
                            ),
                          ),
                          if (isSelected) ...[
                            const SizedBox(width: 8),
                            Icon(
                              Icons.check_circle,
                              color: Colors.amber,
                              size: 20,
                            ),
                          ],
                        ],
                      ),
                      const SizedBox(height: 4),
                      Text(
                        universe.description,
                        style: GoogleFonts.poppins(
                          fontSize: 14,
                          color: isUnlocked ? Colors.white70 : Colors.grey.shade500,
                        ),
                      ),
                      const SizedBox(height: 4),
                      Text(
                        '${universe.maxLevels} Level',
                        style: GoogleFonts.poppins(
                          fontSize: 12,
                          color: isUnlocked ? Colors.white60 : Colors.grey.shade500,
                        ),
                      ),
                    ],
                  ),
                ),
                
                // Kilit durumu
                if (!isUnlocked)
                  Icon(
                    Icons.lock_outline,
                    color: Colors.grey.shade500,
                    size: 24,
                  ),
              ],
            ),
          ),
        ),
      ),
    );
  }
}
